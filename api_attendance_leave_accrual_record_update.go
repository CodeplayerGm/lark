// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateAttendanceLeaveAccrualRecord 仅可更新「授予数量」和「失效日期」
//
// - 仅飞书人事企业版可用
// - 由系统生成的授予记录不可被更新
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/leave_accrual_record/patch
func (r *AttendanceService) UpdateAttendanceLeaveAccrualRecord(ctx context.Context, request *UpdateAttendanceLeaveAccrualRecordReq, options ...MethodOptionFunc) (*UpdateAttendanceLeaveAccrualRecordResp, *Response, error) {
	if r.cli.mock.mockAttendanceUpdateAttendanceLeaveAccrualRecord != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UpdateAttendanceLeaveAccrualRecord mock enable")
		return r.cli.mock.mockAttendanceUpdateAttendanceLeaveAccrualRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UpdateAttendanceLeaveAccrualRecord",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/leave_accrual_record/:leave_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateAttendanceLeaveAccrualRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceUpdateAttendanceLeaveAccrualRecord mock AttendanceUpdateAttendanceLeaveAccrualRecord method
func (r *Mock) MockAttendanceUpdateAttendanceLeaveAccrualRecord(f func(ctx context.Context, request *UpdateAttendanceLeaveAccrualRecordReq, options ...MethodOptionFunc) (*UpdateAttendanceLeaveAccrualRecordResp, *Response, error)) {
	r.mockAttendanceUpdateAttendanceLeaveAccrualRecord = f
}

// UnMockAttendanceUpdateAttendanceLeaveAccrualRecord un-mock AttendanceUpdateAttendanceLeaveAccrualRecord method
func (r *Mock) UnMockAttendanceUpdateAttendanceLeaveAccrualRecord() {
	r.mockAttendanceUpdateAttendanceLeaveAccrualRecord = nil
}

// UpdateAttendanceLeaveAccrualRecordReq ...
type UpdateAttendanceLeaveAccrualRecordReq struct {
	LeaveID               string                                         `path:"leave_id" json:"-"`                  // 假期类型ID, 示例值: "7111688079785723436"
	LeaveGrantingRecordID string                                         `json:"leave_granting_record_id,omitempty"` // 授予记录的唯一ID, 示例值: "6893014062142064135"
	EmploymentID          string                                         `json:"employment_id,omitempty"`            // 员工ID, 示例值: "6982509313466189342"
	LeaveTypeID           string                                         `json:"leave_type_id,omitempty"`            // 假期类型ID, 示例值: "7111688079785723436"
	Reason                []*UpdateAttendanceLeaveAccrualRecordReqReason `json:"reason,omitempty"`                   // 修改授予记录原因
	TimeOffset            *int64                                         `json:"time_offset,omitempty"`              // 时间偏移, 东八区: 480    8*60, 示例值: 480
	ExpirationDate        *string                                        `json:"expiration_date,omitempty"`          // 失效日期, 格式"2020-01-01", 示例值: "2020-01-01"
	Quantity              *string                                        `json:"quantity,omitempty"`                 // 修改source 余额, 示例值: "1"
}

// UpdateAttendanceLeaveAccrualRecordReqReason ...
type UpdateAttendanceLeaveAccrualRecordReqReason struct {
	Lang  string `json:"lang,omitempty"`  // 语言码, 示例值: "zh-CN"
	Value string `json:"value,omitempty"` // 语言码对应的文本, 示例值: "test"
}

// UpdateAttendanceLeaveAccrualRecordResp ...
type UpdateAttendanceLeaveAccrualRecordResp struct {
	Record *UpdateAttendanceLeaveAccrualRecordRespRecord `json:"record,omitempty"` // 员工过期日期的授予记录
}

// UpdateAttendanceLeaveAccrualRecordRespRecord ...
type UpdateAttendanceLeaveAccrualRecordRespRecord struct {
	ID               string                                                `json:"id,omitempty"`                // 授予记录唯一ID
	EmploymentID     string                                                `json:"employment_id,omitempty"`     // 员工ID
	LeaveTypeID      string                                                `json:"leave_type_id,omitempty"`     // 假期类型ID
	GrantingQuantity string                                                `json:"granting_quantity,omitempty"` // 授予数量
	GrantingUnit     int64                                                 `json:"granting_unit,omitempty"`     // 授予单位, 1表示天, 2表示小时
	EffectiveDate    string                                                `json:"effective_date,omitempty"`    // 生效日期, 格式"2020-01-01"
	ExpirationDate   string                                                `json:"expiration_date,omitempty"`   // 失效日期, 格式"2020-01-01"
	GrantedBy        int64                                                 `json:"granted_by,omitempty"`        // 授予来源, 1: 系统授予；2: 手动授予；3: 外部系统授予
	Reason           []*UpdateAttendanceLeaveAccrualRecordRespRecordReason `json:"reason,omitempty"`            // 授予原因
	CreatedAt        string                                                `json:"created_at,omitempty"`        // 授予记录的创建时间, unix时间戳
	CreatedBy        string                                                `json:"created_by,omitempty"`        // 授予记录的创建人的ID
	UpdatedAt        string                                                `json:"updated_at,omitempty"`        // 授予记录的更新时间, unix时间戳
	UpdatedBy        string                                                `json:"updated_by,omitempty"`        // 授予记录的更新人的ID
}

// UpdateAttendanceLeaveAccrualRecordRespRecordReason ...
type UpdateAttendanceLeaveAccrualRecordRespRecordReason struct {
	Lang  string `json:"lang,omitempty"`  // 语言码
	Value string `json:"value,omitempty"` // 语言码对应的文本
}

// updateAttendanceLeaveAccrualRecordResp ...
type updateAttendanceLeaveAccrualRecordResp struct {
	Code int64                                   `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                                  `json:"msg,omitempty"`  // 错误描述
	Data *UpdateAttendanceLeaveAccrualRecordResp `json:"data,omitempty"`
}
