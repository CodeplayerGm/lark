// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteBitableView 删除数据表中的视图
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/delete
func (r *BitableService) DeleteBitableView(ctx context.Context, request *DeleteBitableViewReq, options ...MethodOptionFunc) (*DeleteBitableViewResp, *Response, error) {
	if r.cli.mock.mockBitableDeleteBitableView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#DeleteBitableView mock enable")
		return r.cli.mock.mockBitableDeleteBitableView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "DeleteBitableView",
		Method:                "DELETE",
		URL:                   "https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteBitableViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockBitableDeleteBitableView(f func(ctx context.Context, request *DeleteBitableViewReq, options ...MethodOptionFunc) (*DeleteBitableViewResp, *Response, error)) {
	r.mockBitableDeleteBitableView = f
}

func (r *Mock) UnMockBitableDeleteBitableView() {
	r.mockBitableDeleteBitableView = nil
}

type DeleteBitableViewReq struct {
	AppToken string `path:"app_token" json:"-"` // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID  string `path:"table_id" json:"-"`  // table id, 示例值："tblsRc9GRRXKqhvW"
	ViewID   string `path:"view_id" json:"-"`   // 视图Id, 示例值："vewTpR1urY"
}

type deleteBitableViewResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteBitableViewResp `json:"data,omitempty"`
}

type DeleteBitableViewResp struct{}
