// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateMailGroupAlias 创建邮件组别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-alias/create
func (r *MailService) CreateMailGroupAlias(ctx context.Context, request *CreateMailGroupAliasReq, options ...MethodOptionFunc) (*CreateMailGroupAliasResp, *Response, error) {
	if r.cli.mock.mockMailCreateMailGroupAlias != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreateMailGroupAlias mock enable")
		return r.cli.mock.mockMailCreateMailGroupAlias(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreateMailGroupAlias",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMailGroupAliasResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreateMailGroupAlias mock MailCreateMailGroupAlias method
func (r *Mock) MockMailCreateMailGroupAlias(f func(ctx context.Context, request *CreateMailGroupAliasReq, options ...MethodOptionFunc) (*CreateMailGroupAliasResp, *Response, error)) {
	r.mockMailCreateMailGroupAlias = f
}

// UnMockMailCreateMailGroupAlias un-mock MailCreateMailGroupAlias method
func (r *Mock) UnMockMailCreateMailGroupAlias() {
	r.mockMailCreateMailGroupAlias = nil
}

// CreateMailGroupAliasReq ...
type CreateMailGroupAliasReq struct {
	MailGroupID string  `path:"mailgroup_id" json:"-"` // 邮件组id或邮件组邮箱地址, 示例值："xxxxxx 或者 xxx@xx.xxx"
	EmailAlias  *string `json:"email_alias,omitempty"` // 邮箱别名, 示例值："xxx@xx.xxx"
}

// createMailGroupAliasResp ...
type createMailGroupAliasResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *CreateMailGroupAliasResp `json:"data,omitempty"`
}

// CreateMailGroupAliasResp ...
type CreateMailGroupAliasResp struct {
	MailGroupAlias *CreateMailGroupAliasRespMailGroupAlias `json:"mailgroup_alias,omitempty"` // 邮件组别名
}

// CreateMailGroupAliasRespMailGroupAlias ...
type CreateMailGroupAliasRespMailGroupAlias struct {
	PrimaryEmail string `json:"primary_email,omitempty"` // 主邮箱地址
	EmailAlias   string `json:"email_alias,omitempty"`   // 邮箱别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailGroupAlias 删除邮件组别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-alias/delete
func (r *MailService) DeleteMailGroupAlias(ctx context.Context, request *DeleteMailGroupAliasReq, options ...MethodOptionFunc) (*DeleteMailGroupAliasResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailGroupAlias != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailGroupAlias mock enable")
		return r.cli.mock.mockMailDeleteMailGroupAlias(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailGroupAlias",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases/:alias_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailGroupAliasResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailGroupAlias mock MailDeleteMailGroupAlias method
func (r *Mock) MockMailDeleteMailGroupAlias(f func(ctx context.Context, request *DeleteMailGroupAliasReq, options ...MethodOptionFunc) (*DeleteMailGroupAliasResp, *Response, error)) {
	r.mockMailDeleteMailGroupAlias = f
}

// UnMockMailDeleteMailGroupAlias un-mock MailDeleteMailGroupAlias method
func (r *Mock) UnMockMailDeleteMailGroupAlias() {
	r.mockMailDeleteMailGroupAlias = nil
}

// DeleteMailGroupAliasReq ...
type DeleteMailGroupAliasReq struct {
	MailGroupID string `path:"mailgroup_id" json:"-"` // 邮件组id或邮件组邮箱地址, 示例值："xxxxxx 或 test_group@xx.xxx"
	AliasID     string `path:"alias_id" json:"-"`     // 邮件组别名邮箱地址, 示例值："xxx@xx.xxx"
}

// deleteMailGroupAliasResp ...
type deleteMailGroupAliasResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailGroupAliasResp `json:"data,omitempty"`
}

// DeleteMailGroupAliasResp ...
type DeleteMailGroupAliasResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroupAliasList 获取邮件组所有别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-alias/list
func (r *MailService) GetMailGroupAliasList(ctx context.Context, request *GetMailGroupAliasListReq, options ...MethodOptionFunc) (*GetMailGroupAliasListResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroupAliasList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroupAliasList mock enable")
		return r.cli.mock.mockMailGetMailGroupAliasList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroupAliasList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupAliasListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroupAliasList mock MailGetMailGroupAliasList method
func (r *Mock) MockMailGetMailGroupAliasList(f func(ctx context.Context, request *GetMailGroupAliasListReq, options ...MethodOptionFunc) (*GetMailGroupAliasListResp, *Response, error)) {
	r.mockMailGetMailGroupAliasList = f
}

// UnMockMailGetMailGroupAliasList un-mock MailGetMailGroupAliasList method
func (r *Mock) UnMockMailGetMailGroupAliasList() {
	r.mockMailGetMailGroupAliasList = nil
}

// GetMailGroupAliasListReq ...
type GetMailGroupAliasListReq struct {
	MailGroupID string `path:"mailgroup_id" json:"-"` // 邮件组id或邮件组邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
}

// getMailGroupAliasListResp ...
type getMailGroupAliasListResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupAliasListResp `json:"data,omitempty"`
}

// GetMailGroupAliasListResp ...
type GetMailGroupAliasListResp struct {
	Items []*GetMailGroupAliasListRespItem `json:"items,omitempty"` // 邮件组别名
}

// GetMailGroupAliasListRespItem ...
type GetMailGroupAliasListRespItem struct {
	PrimaryEmail string `json:"primary_email,omitempty"` // 主邮箱地址
	EmailAlias   string `json:"email_alias,omitempty"`   // 邮箱别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMailGroup 创建一个邮件组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/create
func (r *MailService) CreateMailGroup(ctx context.Context, request *CreateMailGroupReq, options ...MethodOptionFunc) (*CreateMailGroupResp, *Response, error) {
	if r.cli.mock.mockMailCreateMailGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreateMailGroup mock enable")
		return r.cli.mock.mockMailCreateMailGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreateMailGroup",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMailGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreateMailGroup mock MailCreateMailGroup method
func (r *Mock) MockMailCreateMailGroup(f func(ctx context.Context, request *CreateMailGroupReq, options ...MethodOptionFunc) (*CreateMailGroupResp, *Response, error)) {
	r.mockMailCreateMailGroup = f
}

// UnMockMailCreateMailGroup un-mock MailCreateMailGroup method
func (r *Mock) UnMockMailCreateMailGroup() {
	r.mockMailCreateMailGroup = nil
}

// CreateMailGroupReq ...
type CreateMailGroupReq struct {
	Email          *string `json:"email,omitempty"`             // 邮件组地址, 示例值："test_mail_group@xxx.xx"
	Name           *string `json:"name,omitempty"`              // 邮件组名称, 示例值："test mail group"
	Description    *string `json:"description,omitempty"`       // 邮件组描述, 示例值："mail group for testing"
	WhoCanSendMail *string `json:"who_can_send_mail,omitempty"` // 谁可发送邮件到此邮件组, 示例值："ALL_INTERNAL_USERS", 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// createMailGroupResp ...
type createMailGroupResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *CreateMailGroupResp `json:"data,omitempty"`
}

// CreateMailGroupResp ...
type CreateMailGroupResp struct {
	MailGroupID             string `json:"mailgroup_id,omitempty"`               // 邮件组ID
	Email                   string `json:"email,omitempty"`                      // 邮件组地址
	Name                    string `json:"name,omitempty"`                       // 邮件组名称
	Description             string `json:"description,omitempty"`                // 邮件组描述
	DirectMembersCount      string `json:"direct_members_count,omitempty"`       // 邮件组成员数量
	IncludeExternalMember   bool   `json:"include_external_member,omitempty"`    // 是否包含外部成员
	IncludeAllCompanyMember bool   `json:"include_all_company_member,omitempty"` // 是否是全员邮件组
	WhoCanSendMail          string `json:"who_can_send_mail,omitempty"`          // 谁可发送邮件到此邮件组, 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailGroup 删除一个邮件组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/delete
func (r *MailService) DeleteMailGroup(ctx context.Context, request *DeleteMailGroupReq, options ...MethodOptionFunc) (*DeleteMailGroupResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailGroup mock enable")
		return r.cli.mock.mockMailDeleteMailGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailGroup",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailGroup mock MailDeleteMailGroup method
func (r *Mock) MockMailDeleteMailGroup(f func(ctx context.Context, request *DeleteMailGroupReq, options ...MethodOptionFunc) (*DeleteMailGroupResp, *Response, error)) {
	r.mockMailDeleteMailGroup = f
}

// UnMockMailDeleteMailGroup un-mock MailDeleteMailGroup method
func (r *Mock) UnMockMailDeleteMailGroup() {
	r.mockMailDeleteMailGroup = nil
}

// DeleteMailGroupReq ...
type DeleteMailGroupReq struct {
	MailGroupID string `path:"mailgroup_id" json:"-"` // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
}

// deleteMailGroupResp ...
type deleteMailGroupResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailGroupResp `json:"data,omitempty"`
}

// DeleteMailGroupResp ...
type DeleteMailGroupResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroup 获取特定邮件组信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/get
func (r *MailService) GetMailGroup(ctx context.Context, request *GetMailGroupReq, options ...MethodOptionFunc) (*GetMailGroupResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroup mock enable")
		return r.cli.mock.mockMailGetMailGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroup",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroup mock MailGetMailGroup method
func (r *Mock) MockMailGetMailGroup(f func(ctx context.Context, request *GetMailGroupReq, options ...MethodOptionFunc) (*GetMailGroupResp, *Response, error)) {
	r.mockMailGetMailGroup = f
}

// UnMockMailGetMailGroup un-mock MailGetMailGroup method
func (r *Mock) UnMockMailGetMailGroup() {
	r.mockMailGetMailGroup = nil
}

// GetMailGroupReq ...
type GetMailGroupReq struct {
	MailGroupID string `path:"mailgroup_id" json:"-"` // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
}

// getMailGroupResp ...
type getMailGroupResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupResp `json:"data,omitempty"`
}

// GetMailGroupResp ...
type GetMailGroupResp struct {
	MailGroupID             string `json:"mailgroup_id,omitempty"`               // 邮件组ID
	Email                   string `json:"email,omitempty"`                      // 邮件组地址
	Name                    string `json:"name,omitempty"`                       // 邮件组名称
	Description             string `json:"description,omitempty"`                // 邮件组描述
	DirectMembersCount      string `json:"direct_members_count,omitempty"`       // 邮件组成员数量
	IncludeExternalMember   bool   `json:"include_external_member,omitempty"`    // 是否包含外部成员
	IncludeAllCompanyMember bool   `json:"include_all_company_member,omitempty"` // 是否是全员邮件组
	WhoCanSendMail          string `json:"who_can_send_mail,omitempty"`          // 谁可发送邮件到此邮件组, 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroupList 分页批量获取邮件组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/list
func (r *MailService) GetMailGroupList(ctx context.Context, request *GetMailGroupListReq, options ...MethodOptionFunc) (*GetMailGroupListResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroupList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroupList mock enable")
		return r.cli.mock.mockMailGetMailGroupList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroupList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroupList mock MailGetMailGroupList method
func (r *Mock) MockMailGetMailGroupList(f func(ctx context.Context, request *GetMailGroupListReq, options ...MethodOptionFunc) (*GetMailGroupListResp, *Response, error)) {
	r.mockMailGetMailGroupList = f
}

// UnMockMailGetMailGroupList un-mock MailGetMailGroupList method
func (r *Mock) UnMockMailGetMailGroupList() {
	r.mockMailGetMailGroupList = nil
}

// GetMailGroupListReq ...
type GetMailGroupListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`200`
}

// getMailGroupListResp ...
type getMailGroupListResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupListResp `json:"data,omitempty"`
}

// GetMailGroupListResp ...
type GetMailGroupListResp struct {
	HasMore   bool                        `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                      `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetMailGroupListRespItem `json:"items,omitempty"`      // 邮件组列表
}

// GetMailGroupListRespItem ...
type GetMailGroupListRespItem struct {
	MailGroupID             string `json:"mailgroup_id,omitempty"`               // 邮件组ID
	Email                   string `json:"email,omitempty"`                      // 邮件组地址
	Name                    string `json:"name,omitempty"`                       // 邮件组名称
	Description             string `json:"description,omitempty"`                // 邮件组描述
	DirectMembersCount      string `json:"direct_members_count,omitempty"`       // 邮件组成员数量
	IncludeExternalMember   bool   `json:"include_external_member,omitempty"`    // 是否包含外部成员
	IncludeAllCompanyMember bool   `json:"include_all_company_member,omitempty"` // 是否是全员邮件组
	WhoCanSendMail          string `json:"who_can_send_mail,omitempty"`          // 谁可发送邮件到此邮件组, 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMailGroupMember 向邮件组添加单个成员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/create
func (r *MailService) CreateMailGroupMember(ctx context.Context, request *CreateMailGroupMemberReq, options ...MethodOptionFunc) (*CreateMailGroupMemberResp, *Response, error) {
	if r.cli.mock.mockMailCreateMailGroupMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreateMailGroupMember mock enable")
		return r.cli.mock.mockMailCreateMailGroupMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreateMailGroupMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMailGroupMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreateMailGroupMember mock MailCreateMailGroupMember method
func (r *Mock) MockMailCreateMailGroupMember(f func(ctx context.Context, request *CreateMailGroupMemberReq, options ...MethodOptionFunc) (*CreateMailGroupMemberResp, *Response, error)) {
	r.mockMailCreateMailGroupMember = f
}

// UnMockMailCreateMailGroupMember un-mock MailCreateMailGroupMember method
func (r *Mock) UnMockMailCreateMailGroupMember() {
	r.mockMailCreateMailGroupMember = nil
}

// CreateMailGroupMemberReq ...
type CreateMailGroupMemberReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	MailGroupID      string            `path:"mailgroup_id" json:"-"`        // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
	Email            *string           `json:"email,omitempty"`              // 成员邮箱地址（当成员类型是EXTERNAL_USER/MAIL_GROUP/OTHER_MEMBER时有值）, 示例值："test_memeber@xxx.xx"
	UserID           *string           `json:"user_id,omitempty"`            // 租户内用户的唯一标识（当成员类型是USER时有值）, 示例值："xxxxxxxxxx"
	DepartmentID     *string           `json:"department_id,omitempty"`      // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）, 示例值："xxxxxxxxxx"
	Type             *MailUserType     `json:"type,omitempty"`               // 成员类型, 示例值："USER", 可选值有: `USER`：内部用户, `DEPARTMENT`：部门, `COMPANY`：全员, `EXTERNAL_USER`：外部用户, `MAIL_GROUP`：邮件组, `OTHER_MEMBER`：内部成员
}

// createMailGroupMemberResp ...
type createMailGroupMemberResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateMailGroupMemberResp `json:"data,omitempty"`
}

// CreateMailGroupMemberResp ...
type CreateMailGroupMemberResp struct {
	MemberID     string       `json:"member_id,omitempty"`     // 邮件组内成员唯一标识
	Email        string       `json:"email,omitempty"`         // 成员邮箱地址（当成员类型是EXTERNAL_USER/MAIL_GROUP/OTHER_MEMBER时有值）
	UserID       string       `json:"user_id,omitempty"`       // 租户内用户的唯一标识（当成员类型是USER时有值）
	DepartmentID string       `json:"department_id,omitempty"` // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
	Type         MailUserType `json:"type,omitempty"`          // 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门, `COMPANY`：全员, `EXTERNAL_USER`：外部用户, `MAIL_GROUP`：邮件组, `OTHER_MEMBER`：内部成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailGroupMember 删除邮件组单个成员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/delete
func (r *MailService) DeleteMailGroupMember(ctx context.Context, request *DeleteMailGroupMemberReq, options ...MethodOptionFunc) (*DeleteMailGroupMemberResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailGroupMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailGroupMember mock enable")
		return r.cli.mock.mockMailDeleteMailGroupMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailGroupMember",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailGroupMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailGroupMember mock MailDeleteMailGroupMember method
func (r *Mock) MockMailDeleteMailGroupMember(f func(ctx context.Context, request *DeleteMailGroupMemberReq, options ...MethodOptionFunc) (*DeleteMailGroupMemberResp, *Response, error)) {
	r.mockMailDeleteMailGroupMember = f
}

// UnMockMailDeleteMailGroupMember un-mock MailDeleteMailGroupMember method
func (r *Mock) UnMockMailDeleteMailGroupMember() {
	r.mockMailDeleteMailGroupMember = nil
}

// DeleteMailGroupMemberReq ...
type DeleteMailGroupMemberReq struct {
	MailGroupID string `path:"mailgroup_id" json:"-"` // The unique ID or email address of a mail group, 示例值："xxxxxxxxxxxxxxx or test_mail_group@xxx.xx"
	MemberID    string `path:"member_id" json:"-"`    // The unique ID of a member in this mail group, 示例值："xxxxxxxxxxxxxxx"
}

// deleteMailGroupMemberResp ...
type deleteMailGroupMemberResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailGroupMemberResp `json:"data,omitempty"`
}

// DeleteMailGroupMemberResp ...
type DeleteMailGroupMemberResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroupMember 获取邮件组单个成员信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/get
func (r *MailService) GetMailGroupMember(ctx context.Context, request *GetMailGroupMemberReq, options ...MethodOptionFunc) (*GetMailGroupMemberResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroupMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroupMember mock enable")
		return r.cli.mock.mockMailGetMailGroupMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroupMember",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroupMember mock MailGetMailGroupMember method
func (r *Mock) MockMailGetMailGroupMember(f func(ctx context.Context, request *GetMailGroupMemberReq, options ...MethodOptionFunc) (*GetMailGroupMemberResp, *Response, error)) {
	r.mockMailGetMailGroupMember = f
}

// UnMockMailGetMailGroupMember un-mock MailGetMailGroupMember method
func (r *Mock) UnMockMailGetMailGroupMember() {
	r.mockMailGetMailGroupMember = nil
}

// GetMailGroupMemberReq ...
type GetMailGroupMemberReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	MailGroupID      string            `path:"mailgroup_id" json:"-"`        // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
	MemberID         string            `path:"member_id" json:"-"`           // 邮件组内成员唯一标识, 示例值："xxxxxxxxxxxxxxx"
}

// getMailGroupMemberResp ...
type getMailGroupMemberResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupMemberResp `json:"data,omitempty"`
}

// GetMailGroupMemberResp ...
type GetMailGroupMemberResp struct {
	MemberID     string       `json:"member_id,omitempty"`     // 邮件组内成员唯一标识
	Email        string       `json:"email,omitempty"`         // 成员邮箱地址（当成员类型是EXTERNAL_USER/MAIL_GROUP/OTHER_MEMBER时有值）
	UserID       string       `json:"user_id,omitempty"`       // 租户内用户的唯一标识（当成员类型是USER时有值）
	DepartmentID string       `json:"department_id,omitempty"` // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
	Type         MailUserType `json:"type,omitempty"`          // 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门, `COMPANY`：全员, `EXTERNAL_USER`：外部用户, `MAIL_GROUP`：邮件组, `OTHER_MEMBER`：内部成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroupMemberList 分页批量获取邮件组成员列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/list
func (r *MailService) GetMailGroupMemberList(ctx context.Context, request *GetMailGroupMemberListReq, options ...MethodOptionFunc) (*GetMailGroupMemberListResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroupMemberList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroupMemberList mock enable")
		return r.cli.mock.mockMailGetMailGroupMemberList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroupMemberList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupMemberListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroupMemberList mock MailGetMailGroupMemberList method
func (r *Mock) MockMailGetMailGroupMemberList(f func(ctx context.Context, request *GetMailGroupMemberListReq, options ...MethodOptionFunc) (*GetMailGroupMemberListResp, *Response, error)) {
	r.mockMailGetMailGroupMemberList = f
}

// UnMockMailGetMailGroupMemberList un-mock MailGetMailGroupMemberList method
func (r *Mock) UnMockMailGetMailGroupMemberList() {
	r.mockMailGetMailGroupMemberList = nil
}

// GetMailGroupMemberListReq ...
type GetMailGroupMemberListReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`200`
	MailGroupID      string            `path:"mailgroup_id" json:"-"`        // The unique ID or email address of a mail group, 示例值："xxxxxxxxxxxxxxx or test_mail_group@xxx.xx"
}

// getMailGroupMemberListResp ...
type getMailGroupMemberListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupMemberListResp `json:"data,omitempty"`
}

// GetMailGroupMemberListResp ...
type GetMailGroupMemberListResp struct {
	HasMore   bool                              `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                            `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetMailGroupMemberListRespItem `json:"items,omitempty"`      // 邮件组成员列表
}

// GetMailGroupMemberListRespItem ...
type GetMailGroupMemberListRespItem struct {
	MemberID     string       `json:"member_id,omitempty"`     // 邮件组内成员唯一标识
	Email        string       `json:"email,omitempty"`         // 成员邮箱地址（当成员类型是EXTERNAL_USER/MAIL_GROUP/OTHER_MEMBER时有值）
	UserID       string       `json:"user_id,omitempty"`       // 租户内用户的唯一标识（当成员类型是USER时有值）
	DepartmentID string       `json:"department_id,omitempty"` // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
	Type         MailUserType `json:"type,omitempty"`          // 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门, `COMPANY`：全员, `EXTERNAL_USER`：外部用户, `MAIL_GROUP`：邮件组, `OTHER_MEMBER`：内部成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateMailGroupPatch 更新邮件组部分字段，没有填写的字段不会被更新
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/patch
func (r *MailService) UpdateMailGroupPatch(ctx context.Context, request *UpdateMailGroupPatchReq, options ...MethodOptionFunc) (*UpdateMailGroupPatchResp, *Response, error) {
	if r.cli.mock.mockMailUpdateMailGroupPatch != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#UpdateMailGroupPatch mock enable")
		return r.cli.mock.mockMailUpdateMailGroupPatch(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "UpdateMailGroupPatch",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateMailGroupPatchResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailUpdateMailGroupPatch mock MailUpdateMailGroupPatch method
func (r *Mock) MockMailUpdateMailGroupPatch(f func(ctx context.Context, request *UpdateMailGroupPatchReq, options ...MethodOptionFunc) (*UpdateMailGroupPatchResp, *Response, error)) {
	r.mockMailUpdateMailGroupPatch = f
}

// UnMockMailUpdateMailGroupPatch un-mock MailUpdateMailGroupPatch method
func (r *Mock) UnMockMailUpdateMailGroupPatch() {
	r.mockMailUpdateMailGroupPatch = nil
}

// UpdateMailGroupPatchReq ...
type UpdateMailGroupPatchReq struct {
	MailGroupID    string  `path:"mailgroup_id" json:"-"`       // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
	Name           *string `json:"name,omitempty"`              // 邮件组名称, 示例值："test mail group"
	Description    *string `json:"description,omitempty"`       // 邮件组描述, 示例值："mail group for testing"
	WhoCanSendMail *string `json:"who_can_send_mail,omitempty"` // 谁可发送邮件到此邮件组, 示例值："ALL_INTERNAL_USERS", 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// updateMailGroupPatchResp ...
type updateMailGroupPatchResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *UpdateMailGroupPatchResp `json:"data,omitempty"`
}

// UpdateMailGroupPatchResp ...
type UpdateMailGroupPatchResp struct {
	MailGroupID             string `json:"mailgroup_id,omitempty"`               // 邮件组ID
	Email                   string `json:"email,omitempty"`                      // 邮件组地址
	Name                    string `json:"name,omitempty"`                       // 邮件组名称
	Description             string `json:"description,omitempty"`                // 邮件组描述
	DirectMembersCount      string `json:"direct_members_count,omitempty"`       // 邮件组成员数量
	IncludeExternalMember   bool   `json:"include_external_member,omitempty"`    // 是否包含外部成员
	IncludeAllCompanyMember bool   `json:"include_all_company_member,omitempty"` // 是否是全员邮件组
	WhoCanSendMail          string `json:"who_can_send_mail,omitempty"`          // 谁可发送邮件到此邮件组, 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMailGroupPermissionMember 向邮件组添加单个自定义权限成员，添加后该成员可发送邮件到该邮件组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/create
func (r *MailService) CreateMailGroupPermissionMember(ctx context.Context, request *CreateMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*CreateMailGroupPermissionMemberResp, *Response, error) {
	if r.cli.mock.mockMailCreateMailGroupPermissionMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreateMailGroupPermissionMember mock enable")
		return r.cli.mock.mockMailCreateMailGroupPermissionMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreateMailGroupPermissionMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMailGroupPermissionMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreateMailGroupPermissionMember mock MailCreateMailGroupPermissionMember method
func (r *Mock) MockMailCreateMailGroupPermissionMember(f func(ctx context.Context, request *CreateMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*CreateMailGroupPermissionMemberResp, *Response, error)) {
	r.mockMailCreateMailGroupPermissionMember = f
}

// UnMockMailCreateMailGroupPermissionMember un-mock MailCreateMailGroupPermissionMember method
func (r *Mock) UnMockMailCreateMailGroupPermissionMember() {
	r.mockMailCreateMailGroupPermissionMember = nil
}

// CreateMailGroupPermissionMemberReq ...
type CreateMailGroupPermissionMemberReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："xxx", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	MailGroupID      string            `path:"mailgroup_id" json:"-"`        // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
	UserID           *string           `json:"user_id,omitempty"`            // 租户内用户的唯一标识（当成员类型是USER时有值）, 示例值："xxxxxxxxxx"
	DepartmentID     *string           `json:"department_id,omitempty"`      // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）, 示例值："xxxxxxxxxx"
	Type             *MailUserType     `json:"type,omitempty"`               // 成员类型, 示例值："USER", 可选值有: `USER`：内部用户, `DEPARTMENT`：部门
}

// createMailGroupPermissionMemberResp ...
type createMailGroupPermissionMemberResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *CreateMailGroupPermissionMemberResp `json:"data,omitempty"`
}

// CreateMailGroupPermissionMemberResp ...
type CreateMailGroupPermissionMemberResp struct {
	PermissionMemberID string       `json:"permission_member_id,omitempty"` // 权限组内成员唯一标识
	UserID             string       `json:"user_id,omitempty"`              // 租户内用户的唯一标识（当成员类型是USER时有值）
	DepartmentID       string       `json:"department_id,omitempty"`        // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
	Type               MailUserType `json:"type,omitempty"`                 // 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailGroupPermissionMember 从自定义成员中删除单个成员，删除后该成员无法发送邮件到该邮件组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/delete
func (r *MailService) DeleteMailGroupPermissionMember(ctx context.Context, request *DeleteMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*DeleteMailGroupPermissionMemberResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailGroupPermissionMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailGroupPermissionMember mock enable")
		return r.cli.mock.mockMailDeleteMailGroupPermissionMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailGroupPermissionMember",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailGroupPermissionMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailGroupPermissionMember mock MailDeleteMailGroupPermissionMember method
func (r *Mock) MockMailDeleteMailGroupPermissionMember(f func(ctx context.Context, request *DeleteMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*DeleteMailGroupPermissionMemberResp, *Response, error)) {
	r.mockMailDeleteMailGroupPermissionMember = f
}

// UnMockMailDeleteMailGroupPermissionMember un-mock MailDeleteMailGroupPermissionMember method
func (r *Mock) UnMockMailDeleteMailGroupPermissionMember() {
	r.mockMailDeleteMailGroupPermissionMember = nil
}

// DeleteMailGroupPermissionMemberReq ...
type DeleteMailGroupPermissionMemberReq struct {
	MailGroupID        string `path:"mailgroup_id" json:"-"`         // The unique ID or email address of a mail group, 示例值："xxxxxxxxxxxxxxx or test_mail_group@xxx.xx"
	PermissionMemberID string `path:"permission_member_id" json:"-"` // The unique ID of a member in this permission group, 示例值："xxxxxxxxxxxxxxx"
}

// deleteMailGroupPermissionMemberResp ...
type deleteMailGroupPermissionMemberResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailGroupPermissionMemberResp `json:"data,omitempty"`
}

// DeleteMailGroupPermissionMemberResp ...
type DeleteMailGroupPermissionMemberResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroupPermissionMember 获取邮件组单个权限成员信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/get
func (r *MailService) GetMailGroupPermissionMember(ctx context.Context, request *GetMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*GetMailGroupPermissionMemberResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroupPermissionMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroupPermissionMember mock enable")
		return r.cli.mock.mockMailGetMailGroupPermissionMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroupPermissionMember",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupPermissionMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroupPermissionMember mock MailGetMailGroupPermissionMember method
func (r *Mock) MockMailGetMailGroupPermissionMember(f func(ctx context.Context, request *GetMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*GetMailGroupPermissionMemberResp, *Response, error)) {
	r.mockMailGetMailGroupPermissionMember = f
}

// UnMockMailGetMailGroupPermissionMember un-mock MailGetMailGroupPermissionMember method
func (r *Mock) UnMockMailGetMailGroupPermissionMember() {
	r.mockMailGetMailGroupPermissionMember = nil
}

// GetMailGroupPermissionMemberReq ...
type GetMailGroupPermissionMemberReq struct {
	UserIDType         *IDType           `query:"user_id_type" json:"-"`        // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType   *DepartmentIDType `query:"department_id_type" json:"-"`  // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	MailGroupID        string            `path:"mailgroup_id" json:"-"`         // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
	PermissionMemberID string            `path:"permission_member_id" json:"-"` // 权限组内成员唯一标识, 示例值："xxxxxxxxxxxxxxx"
}

// getMailGroupPermissionMemberResp ...
type getMailGroupPermissionMemberResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupPermissionMemberResp `json:"data,omitempty"`
}

// GetMailGroupPermissionMemberResp ...
type GetMailGroupPermissionMemberResp struct {
	PermissionMemberID string       `json:"permission_member_id,omitempty"` // 权限组内成员唯一标识
	UserID             string       `json:"user_id,omitempty"`              // 租户内用户的唯一标识（当成员类型是USER时有值）
	DepartmentID       string       `json:"department_id,omitempty"`        // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
	Type               MailUserType `json:"type,omitempty"`                 // 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroupPermissionMemberList 分页批量获取邮件组权限成员列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/list
func (r *MailService) GetMailGroupPermissionMemberList(ctx context.Context, request *GetMailGroupPermissionMemberListReq, options ...MethodOptionFunc) (*GetMailGroupPermissionMemberListResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroupPermissionMemberList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroupPermissionMemberList mock enable")
		return r.cli.mock.mockMailGetMailGroupPermissionMemberList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroupPermissionMemberList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupPermissionMemberListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroupPermissionMemberList mock MailGetMailGroupPermissionMemberList method
func (r *Mock) MockMailGetMailGroupPermissionMemberList(f func(ctx context.Context, request *GetMailGroupPermissionMemberListReq, options ...MethodOptionFunc) (*GetMailGroupPermissionMemberListResp, *Response, error)) {
	r.mockMailGetMailGroupPermissionMemberList = f
}

// UnMockMailGetMailGroupPermissionMemberList un-mock MailGetMailGroupPermissionMemberList method
func (r *Mock) UnMockMailGetMailGroupPermissionMemberList() {
	r.mockMailGetMailGroupPermissionMemberList = nil
}

// GetMailGroupPermissionMemberListReq ...
type GetMailGroupPermissionMemberListReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`200`
	MailGroupID      string            `path:"mailgroup_id" json:"-"`        // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
}

// getMailGroupPermissionMemberListResp ...
type getMailGroupPermissionMemberListResp struct {
	Code int64                                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupPermissionMemberListResp `json:"data,omitempty"`
}

// GetMailGroupPermissionMemberListResp ...
type GetMailGroupPermissionMemberListResp struct {
	HasMore   bool                                        `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                                      `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetMailGroupPermissionMemberListRespItem `json:"items,omitempty"`      // 邮件组权限成员列表
}

// GetMailGroupPermissionMemberListRespItem ...
type GetMailGroupPermissionMemberListRespItem struct {
	PermissionMemberID string       `json:"permission_member_id,omitempty"` // 权限组内成员唯一标识
	UserID             string       `json:"user_id,omitempty"`              // 租户内用户的唯一标识（当成员类型是USER时有值）
	DepartmentID       string       `json:"department_id,omitempty"`        // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
	Type               MailUserType `json:"type,omitempty"`                 // 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateMailGroup 更新邮件组所有信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/update
func (r *MailService) UpdateMailGroup(ctx context.Context, request *UpdateMailGroupReq, options ...MethodOptionFunc) (*UpdateMailGroupResp, *Response, error) {
	if r.cli.mock.mockMailUpdateMailGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#UpdateMailGroup mock enable")
		return r.cli.mock.mockMailUpdateMailGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "UpdateMailGroup",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateMailGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailUpdateMailGroup mock MailUpdateMailGroup method
func (r *Mock) MockMailUpdateMailGroup(f func(ctx context.Context, request *UpdateMailGroupReq, options ...MethodOptionFunc) (*UpdateMailGroupResp, *Response, error)) {
	r.mockMailUpdateMailGroup = f
}

// UnMockMailUpdateMailGroup un-mock MailUpdateMailGroup method
func (r *Mock) UnMockMailUpdateMailGroup() {
	r.mockMailUpdateMailGroup = nil
}

// UpdateMailGroupReq ...
type UpdateMailGroupReq struct {
	MailGroupID    string  `path:"mailgroup_id" json:"-"`       // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
	Name           *string `json:"name,omitempty"`              // 邮件组名称, 示例值："test mail group"
	Description    *string `json:"description,omitempty"`       // 邮件组描述, 示例值："mail group for testing"
	WhoCanSendMail *string `json:"who_can_send_mail,omitempty"` // 谁可发送邮件到此邮件组, 示例值："ALL_INTERNAL_USERS", 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// updateMailGroupResp ...
type updateMailGroupResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *UpdateMailGroupResp `json:"data,omitempty"`
}

// UpdateMailGroupResp ...
type UpdateMailGroupResp struct {
	MailGroupID             string `json:"mailgroup_id,omitempty"`               // 邮件组ID
	Email                   string `json:"email,omitempty"`                      // 邮件组地址
	Name                    string `json:"name,omitempty"`                       // 邮件组名称
	Description             string `json:"description,omitempty"`                // 邮件组描述
	DirectMembersCount      string `json:"direct_members_count,omitempty"`       // 邮件组成员数量
	IncludeExternalMember   bool   `json:"include_external_member,omitempty"`    // 是否包含外部成员
	IncludeAllCompanyMember bool   `json:"include_all_company_member,omitempty"` // 是否是全员邮件组
	WhoCanSendMail          string `json:"who_can_send_mail,omitempty"`          // 谁可发送邮件到此邮件组, 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMailPublicMailboxAlias 创建公共邮箱别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-alias/create
func (r *MailService) CreateMailPublicMailboxAlias(ctx context.Context, request *CreateMailPublicMailboxAliasReq, options ...MethodOptionFunc) (*CreateMailPublicMailboxAliasResp, *Response, error) {
	if r.cli.mock.mockMailCreateMailPublicMailboxAlias != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreateMailPublicMailboxAlias mock enable")
		return r.cli.mock.mockMailCreateMailPublicMailboxAlias(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreateMailPublicMailboxAlias",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMailPublicMailboxAliasResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreateMailPublicMailboxAlias mock MailCreateMailPublicMailboxAlias method
func (r *Mock) MockMailCreateMailPublicMailboxAlias(f func(ctx context.Context, request *CreateMailPublicMailboxAliasReq, options ...MethodOptionFunc) (*CreateMailPublicMailboxAliasResp, *Response, error)) {
	r.mockMailCreateMailPublicMailboxAlias = f
}

// UnMockMailCreateMailPublicMailboxAlias un-mock MailCreateMailPublicMailboxAlias method
func (r *Mock) UnMockMailCreateMailPublicMailboxAlias() {
	r.mockMailCreateMailPublicMailboxAlias = nil
}

// CreateMailPublicMailboxAliasReq ...
type CreateMailPublicMailboxAliasReq struct {
	PublicMailboxID string  `path:"public_mailbox_id" json:"-"` // 公共邮箱id或公共邮箱地址, 示例值："xxxxxx 或 xxx@xx.xxx"
	EmailAlias      *string `json:"email_alias,omitempty"`      // 邮箱别名, 示例值："xxx@xx.xxx"
}

// createMailPublicMailboxAliasResp ...
type createMailPublicMailboxAliasResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *CreateMailPublicMailboxAliasResp `json:"data,omitempty"`
}

// CreateMailPublicMailboxAliasResp ...
type CreateMailPublicMailboxAliasResp struct {
	PublicMailboxAlias *CreateMailPublicMailboxAliasRespPublicMailboxAlias `json:"public_mailbox_alias,omitempty"` // 公共邮箱别名
}

// CreateMailPublicMailboxAliasRespPublicMailboxAlias ...
type CreateMailPublicMailboxAliasRespPublicMailboxAlias struct {
	PrimaryEmail string `json:"primary_email,omitempty"` // 主邮箱地址
	EmailAlias   string `json:"email_alias,omitempty"`   // 邮箱别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailPublicMailboxAlias 删除公共邮箱别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-alias/delete
func (r *MailService) DeleteMailPublicMailboxAlias(ctx context.Context, request *DeleteMailPublicMailboxAliasReq, options ...MethodOptionFunc) (*DeleteMailPublicMailboxAliasResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailPublicMailboxAlias != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailPublicMailboxAlias mock enable")
		return r.cli.mock.mockMailDeleteMailPublicMailboxAlias(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailPublicMailboxAlias",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases/:alias_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailPublicMailboxAliasResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailPublicMailboxAlias mock MailDeleteMailPublicMailboxAlias method
func (r *Mock) MockMailDeleteMailPublicMailboxAlias(f func(ctx context.Context, request *DeleteMailPublicMailboxAliasReq, options ...MethodOptionFunc) (*DeleteMailPublicMailboxAliasResp, *Response, error)) {
	r.mockMailDeleteMailPublicMailboxAlias = f
}

// UnMockMailDeleteMailPublicMailboxAlias un-mock MailDeleteMailPublicMailboxAlias method
func (r *Mock) UnMockMailDeleteMailPublicMailboxAlias() {
	r.mockMailDeleteMailPublicMailboxAlias = nil
}

// DeleteMailPublicMailboxAliasReq ...
type DeleteMailPublicMailboxAliasReq struct {
	PublicMailboxID string `path:"public_mailbox_id" json:"-"` // 公共邮箱id或公共邮箱地址, 示例值："xxxxxx 或 xxx@xx.xxx"
	AliasID         string `path:"alias_id" json:"-"`          // 公共邮箱别名, 示例值："xxx@xx.xxx"
}

// deleteMailPublicMailboxAliasResp ...
type deleteMailPublicMailboxAliasResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailPublicMailboxAliasResp `json:"data,omitempty"`
}

// DeleteMailPublicMailboxAliasResp ...
type DeleteMailPublicMailboxAliasResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailPublicMailboxAliasList 获取所有公共邮箱别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-alias/list
func (r *MailService) GetMailPublicMailboxAliasList(ctx context.Context, request *GetMailPublicMailboxAliasListReq, options ...MethodOptionFunc) (*GetMailPublicMailboxAliasListResp, *Response, error) {
	if r.cli.mock.mockMailGetMailPublicMailboxAliasList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailPublicMailboxAliasList mock enable")
		return r.cli.mock.mockMailGetMailPublicMailboxAliasList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailPublicMailboxAliasList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailPublicMailboxAliasListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailPublicMailboxAliasList mock MailGetMailPublicMailboxAliasList method
func (r *Mock) MockMailGetMailPublicMailboxAliasList(f func(ctx context.Context, request *GetMailPublicMailboxAliasListReq, options ...MethodOptionFunc) (*GetMailPublicMailboxAliasListResp, *Response, error)) {
	r.mockMailGetMailPublicMailboxAliasList = f
}

// UnMockMailGetMailPublicMailboxAliasList un-mock MailGetMailPublicMailboxAliasList method
func (r *Mock) UnMockMailGetMailPublicMailboxAliasList() {
	r.mockMailGetMailPublicMailboxAliasList = nil
}

// GetMailPublicMailboxAliasListReq ...
type GetMailPublicMailboxAliasListReq struct {
	PublicMailboxID string `path:"public_mailbox_id" json:"-"` // 公共邮箱id或公共邮箱邮件地址, 示例值："xxxxxx 或 xxx@xx.xxx"
}

// getMailPublicMailboxAliasListResp ...
type getMailPublicMailboxAliasListResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *GetMailPublicMailboxAliasListResp `json:"data,omitempty"`
}

// GetMailPublicMailboxAliasListResp ...
type GetMailPublicMailboxAliasListResp struct {
	Items []*GetMailPublicMailboxAliasListRespItem `json:"items,omitempty"` // 公共邮箱别名
}

// GetMailPublicMailboxAliasListRespItem ...
type GetMailPublicMailboxAliasListRespItem struct {
	PrimaryEmail string `json:"primary_email,omitempty"` // 主邮箱地址
	EmailAlias   string `json:"email_alias,omitempty"`   // 邮箱别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreatePublicMailbox 创建一个公共邮箱
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/create
func (r *MailService) CreatePublicMailbox(ctx context.Context, request *CreatePublicMailboxReq, options ...MethodOptionFunc) (*CreatePublicMailboxResp, *Response, error) {
	if r.cli.mock.mockMailCreatePublicMailbox != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreatePublicMailbox mock enable")
		return r.cli.mock.mockMailCreatePublicMailbox(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreatePublicMailbox",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createPublicMailboxResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreatePublicMailbox mock MailCreatePublicMailbox method
func (r *Mock) MockMailCreatePublicMailbox(f func(ctx context.Context, request *CreatePublicMailboxReq, options ...MethodOptionFunc) (*CreatePublicMailboxResp, *Response, error)) {
	r.mockMailCreatePublicMailbox = f
}

// UnMockMailCreatePublicMailbox un-mock MailCreatePublicMailbox method
func (r *Mock) UnMockMailCreatePublicMailbox() {
	r.mockMailCreatePublicMailbox = nil
}

// CreatePublicMailboxReq ...
type CreatePublicMailboxReq struct {
	Email *string `json:"email,omitempty"` // 公共邮箱地址, 示例值："test_public_mailbox@xxx.xx"
	Name  *string `json:"name,omitempty"`  // 公共邮箱名称, 示例值："test public mailbox"
}

// createPublicMailboxResp ...
type createPublicMailboxResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *CreatePublicMailboxResp `json:"data,omitempty"`
}

// CreatePublicMailboxResp ...
type CreatePublicMailboxResp struct {
	PublicMailboxID string `json:"public_mailbox_id,omitempty"` // 公共邮箱唯一标识
	Email           string `json:"email,omitempty"`             // 公共邮箱地址
	Name            string `json:"name,omitempty"`              // 公共邮箱名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeletePublicMailbox 该接口会永久删除公共邮箱地址。可用于释放邮箱回收站的公共邮箱地址，一旦删除，该邮箱地址将无法恢复。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/delete
func (r *MailService) DeletePublicMailbox(ctx context.Context, request *DeletePublicMailboxReq, options ...MethodOptionFunc) (*DeletePublicMailboxResp, *Response, error) {
	if r.cli.mock.mockMailDeletePublicMailbox != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeletePublicMailbox mock enable")
		return r.cli.mock.mockMailDeletePublicMailbox(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeletePublicMailbox",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deletePublicMailboxResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeletePublicMailbox mock MailDeletePublicMailbox method
func (r *Mock) MockMailDeletePublicMailbox(f func(ctx context.Context, request *DeletePublicMailboxReq, options ...MethodOptionFunc) (*DeletePublicMailboxResp, *Response, error)) {
	r.mockMailDeletePublicMailbox = f
}

// UnMockMailDeletePublicMailbox un-mock MailDeletePublicMailbox method
func (r *Mock) UnMockMailDeletePublicMailbox() {
	r.mockMailDeletePublicMailbox = nil
}

// DeletePublicMailboxReq ...
type DeletePublicMailboxReq struct {
	PublicMailboxID string `path:"public_mailbox_id" json:"-"` // 要释放的公共邮箱地址, 示例值："xxxxxx@abc.com"
}

// deletePublicMailboxResp ...
type deletePublicMailboxResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *DeletePublicMailboxResp `json:"data,omitempty"`
}

// DeletePublicMailboxResp ...
type DeletePublicMailboxResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetPublicMailbox 获取公共邮箱信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/get
func (r *MailService) GetPublicMailbox(ctx context.Context, request *GetPublicMailboxReq, options ...MethodOptionFunc) (*GetPublicMailboxResp, *Response, error) {
	if r.cli.mock.mockMailGetPublicMailbox != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetPublicMailbox mock enable")
		return r.cli.mock.mockMailGetPublicMailbox(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetPublicMailbox",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getPublicMailboxResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetPublicMailbox mock MailGetPublicMailbox method
func (r *Mock) MockMailGetPublicMailbox(f func(ctx context.Context, request *GetPublicMailboxReq, options ...MethodOptionFunc) (*GetPublicMailboxResp, *Response, error)) {
	r.mockMailGetPublicMailbox = f
}

// UnMockMailGetPublicMailbox un-mock MailGetPublicMailbox method
func (r *Mock) UnMockMailGetPublicMailbox() {
	r.mockMailGetPublicMailbox = nil
}

// GetPublicMailboxReq ...
type GetPublicMailboxReq struct {
	PublicMailboxID string `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
}

// getPublicMailboxResp ...
type getPublicMailboxResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetPublicMailboxResp `json:"data,omitempty"`
}

// GetPublicMailboxResp ...
type GetPublicMailboxResp struct {
	PublicMailboxID string `json:"public_mailbox_id,omitempty"` // 公共邮箱唯一标识
	Email           string `json:"email,omitempty"`             // 公共邮箱地址
	Name            string `json:"name,omitempty"`              // 公共邮箱名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetPublicMailboxList 分页批量获取公共邮箱列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/list
func (r *MailService) GetPublicMailboxList(ctx context.Context, request *GetPublicMailboxListReq, options ...MethodOptionFunc) (*GetPublicMailboxListResp, *Response, error) {
	if r.cli.mock.mockMailGetPublicMailboxList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetPublicMailboxList mock enable")
		return r.cli.mock.mockMailGetPublicMailboxList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetPublicMailboxList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getPublicMailboxListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetPublicMailboxList mock MailGetPublicMailboxList method
func (r *Mock) MockMailGetPublicMailboxList(f func(ctx context.Context, request *GetPublicMailboxListReq, options ...MethodOptionFunc) (*GetPublicMailboxListResp, *Response, error)) {
	r.mockMailGetPublicMailboxList = f
}

// UnMockMailGetPublicMailboxList un-mock MailGetPublicMailboxList method
func (r *Mock) UnMockMailGetPublicMailboxList() {
	r.mockMailGetPublicMailboxList = nil
}

// GetPublicMailboxListReq ...
type GetPublicMailboxListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`200`
}

// getPublicMailboxListResp ...
type getPublicMailboxListResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *GetPublicMailboxListResp `json:"data,omitempty"`
}

// GetPublicMailboxListResp ...
type GetPublicMailboxListResp struct {
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                          `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetPublicMailboxListRespItem `json:"items,omitempty"`      // 公共邮箱列表
}

// GetPublicMailboxListRespItem ...
type GetPublicMailboxListRespItem struct {
	PublicMailboxID string `json:"public_mailbox_id,omitempty"` // 公共邮箱唯一标识
	Email           string `json:"email,omitempty"`             // 公共邮箱地址
	Name            string `json:"name,omitempty"`              // 公共邮箱名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ClearPublicMailboxMember 删除公共邮箱所有成员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/clear
func (r *MailService) ClearPublicMailboxMember(ctx context.Context, request *ClearPublicMailboxMemberReq, options ...MethodOptionFunc) (*ClearPublicMailboxMemberResp, *Response, error) {
	if r.cli.mock.mockMailClearPublicMailboxMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#ClearPublicMailboxMember mock enable")
		return r.cli.mock.mockMailClearPublicMailboxMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "ClearPublicMailboxMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/clear",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(clearPublicMailboxMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailClearPublicMailboxMember mock MailClearPublicMailboxMember method
func (r *Mock) MockMailClearPublicMailboxMember(f func(ctx context.Context, request *ClearPublicMailboxMemberReq, options ...MethodOptionFunc) (*ClearPublicMailboxMemberResp, *Response, error)) {
	r.mockMailClearPublicMailboxMember = f
}

// UnMockMailClearPublicMailboxMember un-mock MailClearPublicMailboxMember method
func (r *Mock) UnMockMailClearPublicMailboxMember() {
	r.mockMailClearPublicMailboxMember = nil
}

// ClearPublicMailboxMemberReq ...
type ClearPublicMailboxMemberReq struct {
	PublicMailboxID string `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
}

// clearPublicMailboxMemberResp ...
type clearPublicMailboxMemberResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *ClearPublicMailboxMemberResp `json:"data,omitempty"`
}

// ClearPublicMailboxMemberResp ...
type ClearPublicMailboxMemberResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreatePublicMailboxMember 向公共邮箱添加单个成员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/create
func (r *MailService) CreatePublicMailboxMember(ctx context.Context, request *CreatePublicMailboxMemberReq, options ...MethodOptionFunc) (*CreatePublicMailboxMemberResp, *Response, error) {
	if r.cli.mock.mockMailCreatePublicMailboxMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreatePublicMailboxMember mock enable")
		return r.cli.mock.mockMailCreatePublicMailboxMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreatePublicMailboxMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createPublicMailboxMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreatePublicMailboxMember mock MailCreatePublicMailboxMember method
func (r *Mock) MockMailCreatePublicMailboxMember(f func(ctx context.Context, request *CreatePublicMailboxMemberReq, options ...MethodOptionFunc) (*CreatePublicMailboxMemberResp, *Response, error)) {
	r.mockMailCreatePublicMailboxMember = f
}

// UnMockMailCreatePublicMailboxMember un-mock MailCreatePublicMailboxMember method
func (r *Mock) UnMockMailCreatePublicMailboxMember() {
	r.mockMailCreatePublicMailboxMember = nil
}

// CreatePublicMailboxMemberReq ...
type CreatePublicMailboxMemberReq struct {
	UserIDType      *IDType       `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PublicMailboxID string        `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
	UserID          *string       `json:"user_id,omitempty"`          // 租户内用户的唯一标识（当成员类型是USER时有值）, 示例值："xxxxxxxxxx"
	Type            *MailUserType `json:"type,omitempty"`             // 成员类型, 示例值："USER", 可选值有: `USER`：内部用户
}

// createPublicMailboxMemberResp ...
type createPublicMailboxMemberResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *CreatePublicMailboxMemberResp `json:"data,omitempty"`
}

// CreatePublicMailboxMemberResp ...
type CreatePublicMailboxMemberResp struct {
	MemberID string       `json:"member_id,omitempty"` // 公共邮箱内成员唯一标识
	UserID   string       `json:"user_id,omitempty"`   // 租户内用户的唯一标识（当成员类型是USER时有值）
	Type     MailUserType `json:"type,omitempty"`      // 成员类型, 可选值有: `USER`：内部用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeletePublicMailboxMember 删除公共邮箱单个成员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/delete
func (r *MailService) DeletePublicMailboxMember(ctx context.Context, request *DeletePublicMailboxMemberReq, options ...MethodOptionFunc) (*DeletePublicMailboxMemberResp, *Response, error) {
	if r.cli.mock.mockMailDeletePublicMailboxMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeletePublicMailboxMember mock enable")
		return r.cli.mock.mockMailDeletePublicMailboxMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeletePublicMailboxMember",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deletePublicMailboxMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeletePublicMailboxMember mock MailDeletePublicMailboxMember method
func (r *Mock) MockMailDeletePublicMailboxMember(f func(ctx context.Context, request *DeletePublicMailboxMemberReq, options ...MethodOptionFunc) (*DeletePublicMailboxMemberResp, *Response, error)) {
	r.mockMailDeletePublicMailboxMember = f
}

// UnMockMailDeletePublicMailboxMember un-mock MailDeletePublicMailboxMember method
func (r *Mock) UnMockMailDeletePublicMailboxMember() {
	r.mockMailDeletePublicMailboxMember = nil
}

// DeletePublicMailboxMemberReq ...
type DeletePublicMailboxMemberReq struct {
	PublicMailboxID string `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
	MemberID        string `path:"member_id" json:"-"`         // 公共邮箱内成员唯一标识, 示例值："xxxxxxxxxxxxxxx"
}

// deletePublicMailboxMemberResp ...
type deletePublicMailboxMemberResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *DeletePublicMailboxMemberResp `json:"data,omitempty"`
}

// DeletePublicMailboxMemberResp ...
type DeletePublicMailboxMemberResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetPublicMailboxMember 获取公共邮箱单个成员信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/get
func (r *MailService) GetPublicMailboxMember(ctx context.Context, request *GetPublicMailboxMemberReq, options ...MethodOptionFunc) (*GetPublicMailboxMemberResp, *Response, error) {
	if r.cli.mock.mockMailGetPublicMailboxMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetPublicMailboxMember mock enable")
		return r.cli.mock.mockMailGetPublicMailboxMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetPublicMailboxMember",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getPublicMailboxMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetPublicMailboxMember mock MailGetPublicMailboxMember method
func (r *Mock) MockMailGetPublicMailboxMember(f func(ctx context.Context, request *GetPublicMailboxMemberReq, options ...MethodOptionFunc) (*GetPublicMailboxMemberResp, *Response, error)) {
	r.mockMailGetPublicMailboxMember = f
}

// UnMockMailGetPublicMailboxMember un-mock MailGetPublicMailboxMember method
func (r *Mock) UnMockMailGetPublicMailboxMember() {
	r.mockMailGetPublicMailboxMember = nil
}

// GetPublicMailboxMemberReq ...
type GetPublicMailboxMemberReq struct {
	UserIDType      *IDType `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PublicMailboxID string  `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
	MemberID        string  `path:"member_id" json:"-"`         // 公共邮箱内成员唯一标识, 示例值："xxxxxxxxxxxxxxx"
}

// getPublicMailboxMemberResp ...
type getPublicMailboxMemberResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetPublicMailboxMemberResp `json:"data,omitempty"`
}

// GetPublicMailboxMemberResp ...
type GetPublicMailboxMemberResp struct {
	MemberID string       `json:"member_id,omitempty"` // 公共邮箱内成员唯一标识
	UserID   string       `json:"user_id,omitempty"`   // 租户内用户的唯一标识（当成员类型是USER时有值）
	Type     MailUserType `json:"type,omitempty"`      // 成员类型, 可选值有: `USER`：内部用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetPublicMailboxMemberList 分页批量获取公共邮箱成员列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/list
func (r *MailService) GetPublicMailboxMemberList(ctx context.Context, request *GetPublicMailboxMemberListReq, options ...MethodOptionFunc) (*GetPublicMailboxMemberListResp, *Response, error) {
	if r.cli.mock.mockMailGetPublicMailboxMemberList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetPublicMailboxMemberList mock enable")
		return r.cli.mock.mockMailGetPublicMailboxMemberList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetPublicMailboxMemberList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getPublicMailboxMemberListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetPublicMailboxMemberList mock MailGetPublicMailboxMemberList method
func (r *Mock) MockMailGetPublicMailboxMemberList(f func(ctx context.Context, request *GetPublicMailboxMemberListReq, options ...MethodOptionFunc) (*GetPublicMailboxMemberListResp, *Response, error)) {
	r.mockMailGetPublicMailboxMemberList = f
}

// UnMockMailGetPublicMailboxMemberList un-mock MailGetPublicMailboxMemberList method
func (r *Mock) UnMockMailGetPublicMailboxMemberList() {
	r.mockMailGetPublicMailboxMemberList = nil
}

// GetPublicMailboxMemberListReq ...
type GetPublicMailboxMemberListReq struct {
	UserIDType      *IDType `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageToken       *string `query:"page_token" json:"-"`       // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize        *int64  `query:"page_size" json:"-"`        // 分页大小, 示例值：10, 最大值：`200`
	PublicMailboxID string  `path:"public_mailbox_id" json:"-"` // The unique ID or email address of a public mailbox, 示例值："xxxxxxxxxxxxxxx or test_public_mailbox@xxx.xx"
}

// getPublicMailboxMemberListResp ...
type getPublicMailboxMemberListResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *GetPublicMailboxMemberListResp `json:"data,omitempty"`
}

// GetPublicMailboxMemberListResp ...
type GetPublicMailboxMemberListResp struct {
	HasMore   bool                                  `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                                `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetPublicMailboxMemberListRespItem `json:"items,omitempty"`      // 公共邮箱成员列表
}

// GetPublicMailboxMemberListRespItem ...
type GetPublicMailboxMemberListRespItem struct {
	MemberID string       `json:"member_id,omitempty"` // 公共邮箱内成员唯一标识
	UserID   string       `json:"user_id,omitempty"`   // 租户内用户的唯一标识（当成员类型是USER时有值）
	Type     MailUserType `json:"type,omitempty"`      // 成员类型, 可选值有: `USER`：内部用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdatePublicMailboxPatch 更新公共邮箱部分字段，没有填写的字段不会被更新
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/patch
func (r *MailService) UpdatePublicMailboxPatch(ctx context.Context, request *UpdatePublicMailboxPatchReq, options ...MethodOptionFunc) (*UpdatePublicMailboxPatchResp, *Response, error) {
	if r.cli.mock.mockMailUpdatePublicMailboxPatch != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#UpdatePublicMailboxPatch mock enable")
		return r.cli.mock.mockMailUpdatePublicMailboxPatch(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "UpdatePublicMailboxPatch",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updatePublicMailboxPatchResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailUpdatePublicMailboxPatch mock MailUpdatePublicMailboxPatch method
func (r *Mock) MockMailUpdatePublicMailboxPatch(f func(ctx context.Context, request *UpdatePublicMailboxPatchReq, options ...MethodOptionFunc) (*UpdatePublicMailboxPatchResp, *Response, error)) {
	r.mockMailUpdatePublicMailboxPatch = f
}

// UnMockMailUpdatePublicMailboxPatch un-mock MailUpdatePublicMailboxPatch method
func (r *Mock) UnMockMailUpdatePublicMailboxPatch() {
	r.mockMailUpdatePublicMailboxPatch = nil
}

// UpdatePublicMailboxPatchReq ...
type UpdatePublicMailboxPatchReq struct {
	PublicMailboxID string  `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
	Name            *string `json:"name,omitempty"`             // 公共邮箱名称, 示例值："test public mailbox"
}

// updatePublicMailboxPatchResp ...
type updatePublicMailboxPatchResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *UpdatePublicMailboxPatchResp `json:"data,omitempty"`
}

// UpdatePublicMailboxPatchResp ...
type UpdatePublicMailboxPatchResp struct {
	PublicMailboxID string `json:"public_mailbox_id,omitempty"` // 公共邮箱唯一标识
	Email           string `json:"email,omitempty"`             // 公共邮箱地址
	Name            string `json:"name,omitempty"`              // 公共邮箱名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdatePublicMailbox 更新公共邮箱所有信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/update
func (r *MailService) UpdatePublicMailbox(ctx context.Context, request *UpdatePublicMailboxReq, options ...MethodOptionFunc) (*UpdatePublicMailboxResp, *Response, error) {
	if r.cli.mock.mockMailUpdatePublicMailbox != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#UpdatePublicMailbox mock enable")
		return r.cli.mock.mockMailUpdatePublicMailbox(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "UpdatePublicMailbox",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updatePublicMailboxResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailUpdatePublicMailbox mock MailUpdatePublicMailbox method
func (r *Mock) MockMailUpdatePublicMailbox(f func(ctx context.Context, request *UpdatePublicMailboxReq, options ...MethodOptionFunc) (*UpdatePublicMailboxResp, *Response, error)) {
	r.mockMailUpdatePublicMailbox = f
}

// UnMockMailUpdatePublicMailbox un-mock MailUpdatePublicMailbox method
func (r *Mock) UnMockMailUpdatePublicMailbox() {
	r.mockMailUpdatePublicMailbox = nil
}

// UpdatePublicMailboxReq ...
type UpdatePublicMailboxReq struct {
	PublicMailboxID string  `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
	Name            *string `json:"name,omitempty"`             // 公共邮箱名称, 示例值："test public mailbox"
}

// updatePublicMailboxResp ...
type updatePublicMailboxResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *UpdatePublicMailboxResp `json:"data,omitempty"`
}

// UpdatePublicMailboxResp ...
type UpdatePublicMailboxResp struct {
	PublicMailboxID string `json:"public_mailbox_id,omitempty"` // 公共邮箱唯一标识
	Email           string `json:"email,omitempty"`             // 公共邮箱地址
	Name            string `json:"name,omitempty"`              // 公共邮箱名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailUser 使用邮箱状态查询接口，可以输入邮箱地址，查询出该邮箱地址对应的类型以及状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user/query
func (r *MailService) GetMailUser(ctx context.Context, request *GetMailUserReq, options ...MethodOptionFunc) (*GetMailUserResp, *Response, error) {
	if r.cli.mock.mockMailGetMailUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailUser mock enable")
		return r.cli.mock.mockMailGetMailUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailUser",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/users/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailUser mock MailGetMailUser method
func (r *Mock) MockMailGetMailUser(f func(ctx context.Context, request *GetMailUserReq, options ...MethodOptionFunc) (*GetMailUserResp, *Response, error)) {
	r.mockMailGetMailUser = f
}

// UnMockMailGetMailUser un-mock MailGetMailUser method
func (r *Mock) UnMockMailGetMailUser() {
	r.mockMailGetMailUser = nil
}

// GetMailUserReq ...
type GetMailUserReq struct {
	EmailList []string `json:"email_list,omitempty"` // 需要查询的邮箱地址列表, 示例值：["aaa@lark.com","bbb@lark.com"]
}

// getMailUserResp ...
type getMailUserResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetMailUserResp `json:"data,omitempty"`
}

// GetMailUserResp ...
type GetMailUserResp struct {
	UserList []*GetMailUserRespUser `json:"user_list,omitempty"` // 邮箱地址以及其对应的类型类型和状态
}

// GetMailUserRespUser ...
type GetMailUserRespUser struct {
	Email  string `json:"email,omitempty"`  // 邮箱地址
	Status int64  `json:"status,omitempty"` // 邮箱地址状态, 可选值有: `1`：邮箱地址格式错误, `2`：邮箱地址域名不存在, `3`：邮箱地址不存在, `4`：启用, `5`：已删除（邮箱回收站中）, `6`：禁用
	Type   int64  `json:"type,omitempty"`   // 邮箱地址类型, 可选值有: `1`：成员邮箱, `2`：成员邮箱别名, `3`：公共邮箱, `4`：公共邮箱别名, `5`：邮件组, `6`：邮件组别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMailUserMailboxAlias 创建用户邮箱别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-alias/create
func (r *MailService) CreateMailUserMailboxAlias(ctx context.Context, request *CreateMailUserMailboxAliasReq, options ...MethodOptionFunc) (*CreateMailUserMailboxAliasResp, *Response, error) {
	if r.cli.mock.mockMailCreateMailUserMailboxAlias != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreateMailUserMailboxAlias mock enable")
		return r.cli.mock.mockMailCreateMailUserMailboxAlias(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreateMailUserMailboxAlias",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMailUserMailboxAliasResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreateMailUserMailboxAlias mock MailCreateMailUserMailboxAlias method
func (r *Mock) MockMailCreateMailUserMailboxAlias(f func(ctx context.Context, request *CreateMailUserMailboxAliasReq, options ...MethodOptionFunc) (*CreateMailUserMailboxAliasResp, *Response, error)) {
	r.mockMailCreateMailUserMailboxAlias = f
}

// UnMockMailCreateMailUserMailboxAlias un-mock MailCreateMailUserMailboxAlias method
func (r *Mock) UnMockMailCreateMailUserMailboxAlias() {
	r.mockMailCreateMailUserMailboxAlias = nil
}

// CreateMailUserMailboxAliasReq ...
type CreateMailUserMailboxAliasReq struct {
	UserMailboxID string  `path:"user_mailbox_id" json:"-"` // 用户邮箱地址, 示例值："user@xxx.xx"
	EmailAlias    *string `json:"email_alias,omitempty"`    // 邮箱别名, 示例值："xxx@xx.xxx"
}

// createMailUserMailboxAliasResp ...
type createMailUserMailboxAliasResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *CreateMailUserMailboxAliasResp `json:"data,omitempty"`
}

// CreateMailUserMailboxAliasResp ...
type CreateMailUserMailboxAliasResp struct {
	UserMailboxAlias *CreateMailUserMailboxAliasRespUserMailboxAlias `json:"user_mailbox_alias,omitempty"` // 用户邮箱别名
}

// CreateMailUserMailboxAliasRespUserMailboxAlias ...
type CreateMailUserMailboxAliasRespUserMailboxAlias struct {
	PrimaryEmail string `json:"primary_email,omitempty"` // 主邮箱地址
	EmailAlias   string `json:"email_alias,omitempty"`   // 邮箱别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailUserMailboxAlias 删除用户邮箱别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-alias/delete
func (r *MailService) DeleteMailUserMailboxAlias(ctx context.Context, request *DeleteMailUserMailboxAliasReq, options ...MethodOptionFunc) (*DeleteMailUserMailboxAliasResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailUserMailboxAlias != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailUserMailboxAlias mock enable")
		return r.cli.mock.mockMailDeleteMailUserMailboxAlias(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailUserMailboxAlias",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases/:alias_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailUserMailboxAliasResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailUserMailboxAlias mock MailDeleteMailUserMailboxAlias method
func (r *Mock) MockMailDeleteMailUserMailboxAlias(f func(ctx context.Context, request *DeleteMailUserMailboxAliasReq, options ...MethodOptionFunc) (*DeleteMailUserMailboxAliasResp, *Response, error)) {
	r.mockMailDeleteMailUserMailboxAlias = f
}

// UnMockMailDeleteMailUserMailboxAlias un-mock MailDeleteMailUserMailboxAlias method
func (r *Mock) UnMockMailDeleteMailUserMailboxAlias() {
	r.mockMailDeleteMailUserMailboxAlias = nil
}

// DeleteMailUserMailboxAliasReq ...
type DeleteMailUserMailboxAliasReq struct {
	UserMailboxID string `path:"user_mailbox_id" json:"-"` // 用户邮箱地址, 示例值："user@xxx.xx"
	AliasID       string `path:"alias_id" json:"-"`        // 别名邮箱地址, 示例值："user_alias@xxx.xx"
}

// deleteMailUserMailboxAliasResp ...
type deleteMailUserMailboxAliasResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailUserMailboxAliasResp `json:"data,omitempty"`
}

// DeleteMailUserMailboxAliasResp ...
type DeleteMailUserMailboxAliasResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailUserMailboxAliasList 获取用户邮箱所有别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-alias/list
func (r *MailService) GetMailUserMailboxAliasList(ctx context.Context, request *GetMailUserMailboxAliasListReq, options ...MethodOptionFunc) (*GetMailUserMailboxAliasListResp, *Response, error) {
	if r.cli.mock.mockMailGetMailUserMailboxAliasList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailUserMailboxAliasList mock enable")
		return r.cli.mock.mockMailGetMailUserMailboxAliasList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailUserMailboxAliasList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailUserMailboxAliasListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailUserMailboxAliasList mock MailGetMailUserMailboxAliasList method
func (r *Mock) MockMailGetMailUserMailboxAliasList(f func(ctx context.Context, request *GetMailUserMailboxAliasListReq, options ...MethodOptionFunc) (*GetMailUserMailboxAliasListResp, *Response, error)) {
	r.mockMailGetMailUserMailboxAliasList = f
}

// UnMockMailGetMailUserMailboxAliasList un-mock MailGetMailUserMailboxAliasList method
func (r *Mock) UnMockMailGetMailUserMailboxAliasList() {
	r.mockMailGetMailUserMailboxAliasList = nil
}

// GetMailUserMailboxAliasListReq ...
type GetMailUserMailboxAliasListReq struct {
	PageToken     *string `query:"page_token" json:"-"`     // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize      *int64  `query:"page_size" json:"-"`      // 分页大小, 示例值：10, 最大值：`20`
	UserMailboxID string  `path:"user_mailbox_id" json:"-"` // 用户邮箱地址, 示例值："user@xxx.xx"
}

// getMailUserMailboxAliasListResp ...
type getMailUserMailboxAliasListResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetMailUserMailboxAliasListResp `json:"data,omitempty"`
}

// GetMailUserMailboxAliasListResp ...
type GetMailUserMailboxAliasListResp struct {
	Items []*GetMailUserMailboxAliasListRespItem `json:"items,omitempty"` // 用户邮箱别名
}

// GetMailUserMailboxAliasListRespItem ...
type GetMailUserMailboxAliasListRespItem struct {
	PrimaryEmail string `json:"primary_email,omitempty"` // 主邮箱地址
	EmailAlias   string `json:"email_alias,omitempty"`   // 邮箱别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailUserMailbox 该接口会永久删除用户邮箱地址。可用于删除位于邮箱回收站中的用户邮箱地址，一旦删除，将无法恢复。该接口支持邮件的转移，可以将被释放邮箱的邮件转移到另外一个可以使用的邮箱中。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox/delete
func (r *MailService) DeleteMailUserMailbox(ctx context.Context, request *DeleteMailUserMailboxReq, options ...MethodOptionFunc) (*DeleteMailUserMailboxResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailUserMailbox != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailUserMailbox mock enable")
		return r.cli.mock.mockMailDeleteMailUserMailbox(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailUserMailbox",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailUserMailboxResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailUserMailbox mock MailDeleteMailUserMailbox method
func (r *Mock) MockMailDeleteMailUserMailbox(f func(ctx context.Context, request *DeleteMailUserMailboxReq, options ...MethodOptionFunc) (*DeleteMailUserMailboxResp, *Response, error)) {
	r.mockMailDeleteMailUserMailbox = f
}

// UnMockMailDeleteMailUserMailbox un-mock MailDeleteMailUserMailbox method
func (r *Mock) UnMockMailDeleteMailUserMailbox() {
	r.mockMailDeleteMailUserMailbox = nil
}

// DeleteMailUserMailboxReq ...
type DeleteMailUserMailboxReq struct {
	TransferMailbox *string `query:"transfer_mailbox" json:"-"` // 用于接受转移的邮箱地址, 示例值："888888@abc.com"
	UserMailboxID   string  `path:"user_mailbox_id" json:"-"`   // 要释放的邮箱地址, 示例值："111111@abc.com"
}

// deleteMailUserMailboxResp ...
type deleteMailUserMailboxResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailUserMailboxResp `json:"data,omitempty"`
}

// DeleteMailUserMailboxResp ...
type DeleteMailUserMailboxResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomBuilding 该接口用于获取指定建筑物的详细信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukzNyUjL5cjM14SO3ITN
func (r *MeetingRoomService) BatchGetMeetingRoomBuilding(ctx context.Context, request *BatchGetMeetingRoomBuildingReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomBuildingResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomBuilding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomBuilding mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomBuilding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomBuilding",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomBuildingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomBatchGetMeetingRoomBuilding mock MeetingRoomBatchGetMeetingRoomBuilding method
func (r *Mock) MockMeetingRoomBatchGetMeetingRoomBuilding(f func(ctx context.Context, request *BatchGetMeetingRoomBuildingReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomBuildingResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomBuilding = f
}

// UnMockMeetingRoomBatchGetMeetingRoomBuilding un-mock MeetingRoomBatchGetMeetingRoomBuilding method
func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomBuilding() {
	r.mockMeetingRoomBatchGetMeetingRoomBuilding = nil
}

// BatchGetMeetingRoomBuildingReq ...
type BatchGetMeetingRoomBuildingReq struct {
	BuildingIDs []string `query:"building_ids" json:"-"` // 用于查询指定建筑物的 ID
	Fields      *string  `query:"fields" json:"-"`       // 用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,floors"，默认返回所有字段
}

// batchGetMeetingRoomBuildingResp ...
type batchGetMeetingRoomBuildingResp struct {
	Code int64                            `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomBuildingResp `json:"data,omitempty"` // 返回业务信息
}

// BatchGetMeetingRoomBuildingResp ...
type BatchGetMeetingRoomBuildingResp struct {
	Buildings []*BatchGetMeetingRoomBuildingRespBuilding `json:"buildings,omitempty"` // 建筑列表
}

// BatchGetMeetingRoomBuildingRespBuilding ...
type BatchGetMeetingRoomBuildingRespBuilding struct {
	BuildingID  string   `json:"building_id,omitempty"` // 建筑物 ID
	Description string   `json:"description,omitempty"` // 建筑物的相关描述
	Floors      []string `json:"floors,omitempty"`      // 属于当前建筑物的所有楼层列表
	Name        string   `json:"name,omitempty"`        // 建筑物名称
	CountryID   string   `json:"country_id,omitempty"`  // 所属国家 ID
	DistrictID  string   `json:"district_id,omitempty"` // 所属城市 ID
}
