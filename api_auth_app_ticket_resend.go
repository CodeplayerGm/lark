// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// ResendAppTicket 飞书每隔 1 小时会给应用推送一次最新的 app_ticket，应用也可以主动调用此接口，触发飞书进行及时的重新推送。（该接口并不能直接获取app_ticket，而是触发事件推送）
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/auth-v3/auth/app_ticket_resend
func (r *AuthService) ResendAppTicket(ctx context.Context, request *ResendAppTicketReq, options ...MethodOptionFunc) (*ResendAppTicketResp, *Response, error) {
	if r.cli.mock.mockAuthResendAppTicket != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#ResendAppTicket mock enable")
		return r.cli.mock.mockAuthResendAppTicket(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:        "Auth",
		API:          "ResendAppTicket",
		Method:       "POST",
		URL:          "https://open.feishu.cn/open-apis/auth/v3/app_ticket/resend",
		Body:         request,
		MethodOption: newMethodOption(options),
	}
	resp := new(resendAppTicketResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAuthResendAppTicket(f func(ctx context.Context, request *ResendAppTicketReq, options ...MethodOptionFunc) (*ResendAppTicketResp, *Response, error)) {
	r.mockAuthResendAppTicket = f
}

func (r *Mock) UnMockAuthResendAppTicket() {
	r.mockAuthResendAppTicket = nil
}

type ResendAppTicketReq struct {
	AppID     string `json:"app_id,omitempty"`     // 应用唯一标识，创建应用后获得, 示例值："cli_slkdjalasdkjasd"
	AppSecret string `json:"app_secret,omitempty"` // 应用秘钥，创建应用后获得, 示例值："dskLLdkasdjlasdKK"
}

type resendAppTicketResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *ResendAppTicketResp `json:"data,omitempty"`
}

type ResendAppTicketResp struct{}
