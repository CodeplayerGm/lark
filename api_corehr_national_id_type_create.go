// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateCoreHrNationalIDType 创建国家证件类型。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/create
func (r *CoreHrService) CreateCoreHrNationalIDType(ctx context.Context, request *CreateCoreHrNationalIDTypeReq, options ...MethodOptionFunc) (*CreateCoreHrNationalIDTypeResp, *Response, error) {
	if r.cli.mock.mockCoreHrCreateCoreHrNationalIDType != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] CoreHr#CreateCoreHrNationalIDType mock enable")
		return r.cli.mock.mockCoreHrCreateCoreHrNationalIDType(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "CoreHr",
		API:                   "CreateCoreHrNationalIDType",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/corehr/v1/national_id_types",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createCoreHrNationalIDTypeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCoreHrCreateCoreHrNationalIDType mock CoreHrCreateCoreHrNationalIDType method
func (r *Mock) MockCoreHrCreateCoreHrNationalIDType(f func(ctx context.Context, request *CreateCoreHrNationalIDTypeReq, options ...MethodOptionFunc) (*CreateCoreHrNationalIDTypeResp, *Response, error)) {
	r.mockCoreHrCreateCoreHrNationalIDType = f
}

// UnMockCoreHrCreateCoreHrNationalIDType un-mock CoreHrCreateCoreHrNationalIDType method
func (r *Mock) UnMockCoreHrCreateCoreHrNationalIDType() {
	r.mockCoreHrCreateCoreHrNationalIDType = nil
}

// CreateCoreHrNationalIDTypeReq ...
type CreateCoreHrNationalIDTypeReq struct {
	ClientToken               *string                                                   `query:"client_token" json:"-"`                // 根据client_token是否一致来判断是否为同一请求, 示例值: 12454646
	CountryRegionID           string                                                    `json:"country_region_id,omitempty"`           // 国家 / 地区, 示例值: "6862995747139225096"
	Name                      []*CreateCoreHrNationalIDTypeReqName                      `json:"name,omitempty"`                        // 名称
	Active                    bool                                                      `json:"active,omitempty"`                      // 是否启用, 示例值: true
	ValidationRule            string                                                    `json:"validation_rule,omitempty"`             // 校验规则, 示例值: "^\d{9}$"
	ValidationRuleDescription []*CreateCoreHrNationalIDTypeReqValidationRuleDescription `json:"validation_rule_description,omitempty"` // 校验规则描述
	Code                      string                                                    `json:"code,omitempty"`                        // 编码, 示例值: "AUS-TFN"
	IdentificationType        *CreateCoreHrNationalIDTypeReqIdentificationType          `json:"identification_type,omitempty"`         // 证件类型
	CustomFields              []*CreateCoreHrNationalIDTypeReqCustomField               `json:"custom_fields,omitempty"`               // 自定义字段
}

// CreateCoreHrNationalIDTypeReqCustomField ...
type CreateCoreHrNationalIDTypeReqCustomField struct {
	FieldName string `json:"field_name,omitempty"` // 字段名, 示例值: "name"
	Value     string `json:"value,omitempty"`      // 字段值, 是json转义后的字符串, 根据元数据定义不同, 字段格式不同(如123, 123.23, "true", [\"id1\", \"id2\"], "2006-01-02 15:04:05"), 示例值: "\"Sandy\""
}

// CreateCoreHrNationalIDTypeReqIdentificationType ...
type CreateCoreHrNationalIDTypeReqIdentificationType struct {
	EnumName string `json:"enum_name,omitempty"` // 枚举值, 示例值: "type_1"
}

// CreateCoreHrNationalIDTypeReqName ...
type CreateCoreHrNationalIDTypeReqName struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言, 示例值: "zh-CN"
	Value string `json:"value,omitempty"` // 名称信息的内容, 示例值: "张三"
}

// CreateCoreHrNationalIDTypeReqValidationRuleDescription ...
type CreateCoreHrNationalIDTypeReqValidationRuleDescription struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言, 示例值: "zh-CN"
	Value string `json:"value,omitempty"` // 名称信息的内容, 示例值: "张三"
}

// CreateCoreHrNationalIDTypeResp ...
type CreateCoreHrNationalIDTypeResp struct {
	NationalIDType *CreateCoreHrNationalIDTypeRespNationalIDType `json:"national_id_type,omitempty"` // 创建成功的国家证件类型数据
}

// CreateCoreHrNationalIDTypeRespNationalIDType ...
type CreateCoreHrNationalIDTypeRespNationalIDType struct {
	ID                        string                                                                   `json:"id,omitempty"`                          // 证件类型 ID
	CountryRegionID           string                                                                   `json:"country_region_id,omitempty"`           // 国家 / 地区
	Name                      []*CreateCoreHrNationalIDTypeRespNationalIDTypeName                      `json:"name,omitempty"`                        // 名称
	Active                    bool                                                                     `json:"active,omitempty"`                      // 是否启用
	ValidationRule            string                                                                   `json:"validation_rule,omitempty"`             // 校验规则
	ValidationRuleDescription []*CreateCoreHrNationalIDTypeRespNationalIDTypeValidationRuleDescription `json:"validation_rule_description,omitempty"` // 校验规则描述
	Code                      string                                                                   `json:"code,omitempty"`                        // 编码
	IdentificationType        *CreateCoreHrNationalIDTypeRespNationalIDTypeIdentificationType          `json:"identification_type,omitempty"`         // 证件类型
	CustomFields              []*CreateCoreHrNationalIDTypeRespNationalIDTypeCustomField               `json:"custom_fields,omitempty"`               // 自定义字段
}

// CreateCoreHrNationalIDTypeRespNationalIDTypeCustomField ...
type CreateCoreHrNationalIDTypeRespNationalIDTypeCustomField struct {
	FieldName string `json:"field_name,omitempty"` // 字段名
	Value     string `json:"value,omitempty"`      // 字段值, 是json转义后的字符串, 根据元数据定义不同, 字段格式不同(如123, 123.23, "true", [\"id1\", \"id2\"], "2006-01-02 15:04:05")
}

// CreateCoreHrNationalIDTypeRespNationalIDTypeIdentificationType ...
type CreateCoreHrNationalIDTypeRespNationalIDTypeIdentificationType struct {
	EnumName string                                                                   `json:"enum_name,omitempty"` // 枚举值
	Display  []*CreateCoreHrNationalIDTypeRespNationalIDTypeIdentificationTypeDisplay `json:"display,omitempty"`   // 枚举多语展示
}

// CreateCoreHrNationalIDTypeRespNationalIDTypeIdentificationTypeDisplay ...
type CreateCoreHrNationalIDTypeRespNationalIDTypeIdentificationTypeDisplay struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言
	Value string `json:"value,omitempty"` // 名称信息的内容
}

// CreateCoreHrNationalIDTypeRespNationalIDTypeName ...
type CreateCoreHrNationalIDTypeRespNationalIDTypeName struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言
	Value string `json:"value,omitempty"` // 名称信息的内容
}

// CreateCoreHrNationalIDTypeRespNationalIDTypeValidationRuleDescription ...
type CreateCoreHrNationalIDTypeRespNationalIDTypeValidationRuleDescription struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言
	Value string `json:"value,omitempty"` // 名称信息的内容
}

// createCoreHrNationalIDTypeResp ...
type createCoreHrNationalIDTypeResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *CreateCoreHrNationalIDTypeResp `json:"data,omitempty"`
}
