// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// UpdateHireEmployee 根据员工 ID 更新员工转正、离职状态
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/patch
func (r *HireService) UpdateHireEmployee(ctx context.Context, request *UpdateHireEmployeeReq, options ...MethodOptionFunc) (*UpdateHireEmployeeResp, *Response, error) {
	if r.cli.mock.mockHireUpdateHireEmployee != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#UpdateHireEmployee mock enable")
		return r.cli.mock.mockHireUpdateHireEmployee(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "UpdateHireEmployee",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/employees/:employee_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateHireEmployeeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireUpdateHireEmployee(f func(ctx context.Context, request *UpdateHireEmployeeReq, options ...MethodOptionFunc) (*UpdateHireEmployeeResp, *Response, error)) {
	r.mockHireUpdateHireEmployee = f
}

func (r *Mock) UnMockHireUpdateHireEmployee() {
	r.mockHireUpdateHireEmployee = nil
}

type UpdateHireEmployeeReq struct {
	EmployeeID     string                               `path:"employee_id" json:"-"`      // 员工ID, 示例值："123"
	Operation      int64                                `json:"operation,omitempty"`       // 修改状态操作, 示例值：1, 可选值有: `1`：转正, `2`：离职
	ConversionInfo *UpdateHireEmployeeReqConversionInfo `json:"conversion_info,omitempty"` // 转正信息
	OverboardInfo  *UpdateHireEmployeeReqOverboardInfo  `json:"overboard_info,omitempty"`  // 离职信息
}

type UpdateHireEmployeeReqConversionInfo struct {
	ActualConversionTime *int64 `json:"actual_conversion_time,omitempty"` // 实际转正日期, 示例值：1637596800000
}

type UpdateHireEmployeeReqOverboardInfo struct {
	ActualOverboardTime *int64  `json:"actual_overboard_time,omitempty"` // 实际离职日期, 示例值：1637596800000
	OverboardNote       *string `json:"overboard_note,omitempty"`        // 离职原因, 示例值："职业发展考虑"
}

type updateHireEmployeeResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHireEmployeeResp `json:"data,omitempty"`
}

type UpdateHireEmployeeResp struct {
	Employee *UpdateHireEmployeeRespEmployee `json:"employee,omitempty"` // 员工信息
}

type UpdateHireEmployeeRespEmployee struct {
	ID                     string `json:"id,omitempty"`                       // 员工ID
	ApplicationID          string `json:"application_id,omitempty"`           // 投递ID
	OnboardStatus          int64  `json:"onboard_status,omitempty"`           // 入职状态, 可选值有: `1`：已入职, `2`：已离职
	ConversionStatus       int64  `json:"conversion_status,omitempty"`        // 转正状态, 可选值有: `1`：未转正, `2`：已转正
	OnboardTime            int64  `json:"onboard_time,omitempty"`             // 实际入职时间
	ExpectedConversionTime int64  `json:"expected_conversion_time,omitempty"` // 预期转正时间
	ActualConversionTime   int64  `json:"actual_conversion_time,omitempty"`   // 实际转正时间
	OverboardTime          int64  `json:"overboard_time,omitempty"`           // 离职时间
	OverboardNote          string `json:"overboard_note,omitempty"`           // 离职原因
}
