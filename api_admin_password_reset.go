// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// AdminResetPassword
//
// 重置用户的企业邮箱密码, 仅当用户的邮箱和企业邮箱(别名)一致时生效, 可用于处理飞书企业邮箱登录死锁的问题。
// 邮箱死锁: 当用户的登录凭证与飞书企业邮箱一致时, 目前飞书登录流程要求用户输入验证码, 由于飞书邮箱无单独的帐号体系, 则未登录时无法收取邮箱验证码, 即陷入死锁
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/password/reset
func (r *AdminService) AdminResetPassword(ctx context.Context, request *AdminResetPasswordReq, options ...MethodOptionFunc) (*AdminResetPasswordResp, *Response, error) {
	if r.cli.mock.mockAdminAdminResetPassword != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Admin#AdminResetPassword mock enable")
		return r.cli.mock.mockAdminAdminResetPassword(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Admin",
		API:                   "AdminResetPassword",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/admin/v1/password/reset",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(adminResetPasswordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAdminAdminResetPassword mock AdminAdminResetPassword method
func (r *Mock) MockAdminAdminResetPassword(f func(ctx context.Context, request *AdminResetPasswordReq, options ...MethodOptionFunc) (*AdminResetPasswordResp, *Response, error)) {
	r.mockAdminAdminResetPassword = f
}

// UnMockAdminAdminResetPassword un-mock AdminAdminResetPassword method
func (r *Mock) UnMockAdminAdminResetPassword() {
	r.mockAdminAdminResetPassword = nil
}

// AdminResetPasswordReq ...
type AdminResetPasswordReq struct {
	UserIDType IDType                         `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: "open_id", 可选值有: `open_id`: 用户的 open id, `union_id`: 用户的 union id, `user_id`: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Password   *AdminResetPasswordReqPassword `json:"password,omitempty"`     // 需要重置的密码参数, 不少于8个字符, 字母、数字和符号, 至少三选二
	UserID     string                         `json:"user_id,omitempty"`      // 待修改密码的用户ID, 只针对邮箱登录凭证与企业邮箱(包括别名)相等的用户生效, 示例值: "abc123", 长度范围: `0` ～ `200` 字符
}

// AdminResetPasswordReqPassword ...
type AdminResetPasswordReqPassword struct {
	EntEmailPassword string `json:"ent_email_password,omitempty"` // 企业邮箱密码, 示例值: "abcd*efg"
}

// AdminResetPasswordResp ...
type AdminResetPasswordResp struct {
}

// adminResetPasswordResp ...
type adminResetPasswordResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *AdminResetPasswordResp `json:"data,omitempty"`
}
