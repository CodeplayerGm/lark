// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
	"io"
)

// DownloadAttachments
//
// 根据文件 token 下载文件。
// 调用「[批量获取员工花名册信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/ehr/employees)」接口的返回值中，「文件」类型的字段 id，即是文件 token
// ![image.png](//sf1-ttcdn-tos.pstatp.com/obj/open-platform-opendoc/bed391d2a8ce6ed2d5985ea69bf92850_9GY1mnuDXP.png)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/ehr/ehr-v1/attachment/get
func (r *EHRAPI) DownloadAttachments(ctx context.Context, request *DownloadAttachmentsReq) (*DownloadAttachmentsResp, *Response, error) {
	req := &RawRequestReq{
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/ehr/v1/attachments/:token",
		Body:                  request,
		NeedTenantAccessToken: true,
		NeedAppAccessToken:    false,
		NeedHelpdeskAuth:      false,
		IsFile:                false,
	}
	resp := new(downloadAttachmentsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	if err != nil {
		return nil, response, err
	} else if resp.Code != 0 {
		return nil, response, NewError("EHR", "DownloadAttachments", resp.Code, resp.Msg)
	}

	return resp.Data, response, nil
}

type DownloadAttachmentsReq struct {
	Token string `path:"token" json:"-"` // 文件 token, 示例值："09bf7b924f9a4a69875788891b5970d8"
}

type downloadAttachmentsResp struct {
	IsFile bool                     `json:"is_file,omitempty"`
	Code   int                      `json:"code,omitempty"`
	Msg    string                   `json:"msg,omitempty"`
	Data   *DownloadAttachmentsResp `json:"data,omitempty"`
}

func (r *downloadAttachmentsResp) IsFileType() bool {
	return r.IsFile
}

func (r *downloadAttachmentsResp) SetFile(file io.Reader) {
	r.Data = &DownloadAttachmentsResp{
		File: file,
	}
}

type DownloadAttachmentsResp struct {
	File io.Reader `json:"file,omitempty"`
}
