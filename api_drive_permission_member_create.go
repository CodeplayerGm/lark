// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// CreateDriveMemberPermission 该接口用于根据 filetoken 给用户增加文档的权限。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzNzUjLzczM14yM3MTN
func (r *DriveService) CreateDriveMemberPermission(ctx context.Context, request *CreateDriveMemberPermissionReq, options ...MethodOptionFunc) (*CreateDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveCreateDriveMemberPermission(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Drive#CreateDriveMemberPermission call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveMemberPermission request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/drive/permission/member/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,

		NeedUserAccessToken: true,
	}
	resp := new(createDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Drive#CreateDriveMemberPermission POST https://open.feishu.cn/open-apis/drive/permission/member/create failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Drive#CreateDriveMemberPermission POST https://open.feishu.cn/open-apis/drive/permission/member/create failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Drive", "CreateDriveMemberPermission", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveMemberPermission success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockDriveCreateDriveMemberPermission(f func(ctx context.Context, request *CreateDriveMemberPermissionReq, options ...MethodOptionFunc) (*CreateDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveCreateDriveMemberPermission = f
}

func (r *Mock) UnMockDriveCreateDriveMemberPermission() {
	r.mockDriveCreateDriveMemberPermission = nil
}

type CreateDriveMemberPermissionReq struct {
	Token      string                                 `json:"token,omitempty"`       // 文件的 token，获取方式见 [对接前说明](/ssl:ttdoc/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)的第 4 项
	Type       string                                 `json:"type,omitempty"`        // 文档类型  "doc"  or  "sheet" or "file"
	Members    *CreateDriveMemberPermissionReqMembers `json:"members,omitempty"`     // 用户
	NotifyLark *bool                                  `json:"notify_lark,omitempty"` // 添加权限后是否飞书/lark通知对方<br>true 通知 or false 不通知
}

type CreateDriveMemberPermissionReqMembers struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型，可选 **email 、openid、openchat、userid**
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
	Perm       string `json:"perm,omitempty"`        // 需要增加的权限，权限值："view"，"edit"
}

type createDriveMemberPermissionResp struct {
	Code int64                            `json:"code,omitempty"`
	Msg  string                           `json:"msg,omitempty"`
	Data *CreateDriveMemberPermissionResp `json:"data,omitempty"`
}

type CreateDriveMemberPermissionResp struct {
	IsAllSuccess bool                                        `json:"is_all_success,omitempty"` // 是否全部成功
	FailMembers  *CreateDriveMemberPermissionRespFailMembers `json:"fail_members,omitempty"`   // 添加权限失败的用户信息
}

type CreateDriveMemberPermissionRespFailMembers struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
	Perm       string `json:"perm,omitempty"`        // 需要增加的权限
}
