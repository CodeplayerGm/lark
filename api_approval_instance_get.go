// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetApprovalInstance 通过审批实例 Instance Code  获取审批实例详情。Instance Code 由 [批量获取审批实例](https://open.feishu.cn/document/ukTMukTMukTM/uQDOyUjL0gjM14CN4ITN) 接口获取。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uEDNyUjLxQjM14SM0ITN
func (r *ApprovalService) GetApprovalInstance(ctx context.Context, request *GetApprovalInstanceReq, options ...MethodOptionFunc) (*GetApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApprovalInstance mock enable")
		return r.cli.mock.mockApprovalGetApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApprovalInstance mock ApprovalGetApprovalInstance method
func (r *Mock) MockApprovalGetApprovalInstance(f func(ctx context.Context, request *GetApprovalInstanceReq, options ...MethodOptionFunc) (*GetApprovalInstanceResp, *Response, error)) {
	r.mockApprovalGetApprovalInstance = f
}

// UnMockApprovalGetApprovalInstance un-mock ApprovalGetApprovalInstance method
func (r *Mock) UnMockApprovalGetApprovalInstance() {
	r.mockApprovalGetApprovalInstance = nil
}

// GetApprovalInstanceReq ...
type GetApprovalInstanceReq struct {
	InstanceCode string  `json:"instance_code,omitempty"` // 审批实例 Code, 若在创建的时候传了uuid, 也可以通过传uuid获取
	Locale       *string `json:"locale,omitempty"`        // zh-CN - 中文 en-US - 英文 ja-JP - 日文
	UserID       *string `json:"user_id,omitempty"`       // 发起审批用户, 平台级审批时使用
	OpenID       *string `json:"open_id,omitempty"`       // 发起审批用户 open id
}

// GetApprovalInstanceResp ...
type GetApprovalInstanceResp struct {
	ApprovalCode string                             `json:"approval_code,omitempty"` // 审批定义 Code
	ApprovalName string                             `json:"approval_name,omitempty"` // 审批名称
	StartTime    int64                              `json:"start_time,omitempty"`    // 审批创建时间
	EndTime      int64                              `json:"end_time,omitempty"`      // 审批完成时间, 未完成为 0
	UserID       string                             `json:"user_id,omitempty"`       // 发起审批用户
	OpenID       string                             `json:"open_id,omitempty"`       // 发起审批用户 open id
	SerialNumber string                             `json:"serial_number,omitempty"` // 审批单编号
	DepartmentID string                             `json:"department_id,omitempty"` // 发起审批用户所在部门
	Status       string                             `json:"status,omitempty"`        // 审批实例状态 PENDING    - 审批中 APPROVED - 通过 REJECTED  - 拒绝 CANCELED -  撤回 DELETED    -  删除
	UUID         string                             `json:"uuid,omitempty"`          // 用户的唯一标识id
	Form         ApprovalWidgetList                 `json:"form,omitempty"`          // json字符串, 控件值
	TaskList     []*GetApprovalInstanceRespTask     `json:"task_list,omitempty"`     // 审批任务列表
	CommentList  []*GetApprovalInstanceRespComment  `json:"comment_list,omitempty"`  // 评论列表
	Timeline     []*GetApprovalInstanceRespTimeline `json:"timeline,omitempty"`      // 审批动态
}

// GetApprovalInstanceRespComment ...
type GetApprovalInstanceRespComment struct {
	ID         string `json:"id,omitempty"`          // comment id
	UserID     string `json:"user_id,omitempty"`     // 发表评论用户
	OpenID     string `json:"open_id,omitempty"`     // 发表评论用户 open id
	Comment    string `json:"comment,omitempty"`     // 评论内容
	CreateTime int64  `json:"create_time,omitempty"` // 评论时间
}

// GetApprovalInstanceRespTask ...
type GetApprovalInstanceRespTask struct {
	ID           string  `json:"id,omitempty"`             // task id
	UserID       *string `json:"user_id,omitempty"`        // 审批人 自动通过、自动拒绝 task user_id 为空
	OpenID       *string `json:"open_id,omitempty"`        // 审批人 open id
	Status       string  `json:"status,omitempty"`         // 任务状态 PENDING - 审批中 APPROVED - 同意 REJECTED  - 拒绝 TRANSFERRED - 已转交 DONE -  完成
	NodeID       *string `json:"node_id,omitempty"`        // task 所属节点 id
	NodeName     *string `json:"node_name,omitempty"`      // task 所属节点名称
	CustomNodeID *string `json:"custom_node_id,omitempty"` // task 所属节点自定义 id, 如果没设置自定义 id, 则不返回该字段
	Type         string  `json:"type,omitempty"`           // 审批方式 AND -会签 OR - 或签 AUTO_PASS -自动通过 AUTO_REJECT - 自动拒绝 SEQUENTIAL - 按顺序
	StartTime    int64   `json:"start_time,omitempty"`     // task 开始时间
	EndTime      int64   `json:"end_time,omitempty"`       // task 完成时间, 未完成为 0
}

// GetApprovalInstanceRespTimeline ...
type GetApprovalInstanceRespTimeline struct {
	Type                 string                                   `json:"type,omitempty"`                   // 动态类型, 不同类型 ext 内的 user_id_list 含义不一样 START - 审批开始 PASS - 通过 REJECT  - 拒绝 AUTO_PASS -  自动通过 AUTO_REJECT - 自动拒绝 REMOVE_REPEAT - 去重 TRANSFER - 转交  ADD_APPROVER_BEFORE  - 前加签 ADD_APPROVER -  并加签 ADD_APPROVER_AFTER -  后加签  DELETE_APPROVER  - 减签 ROLLBACK_SELECTED -  指定回退 ROLLBACK - 全部回退 CANCEL -  撤回 DELETE - 删除 CC - 抄送
	CreateTime           int64                                    `json:"create_time,omitempty"`            // 发生时间
	UserID               *string                                  `json:"user_id,omitempty"`                // 动态产生用户
	OpenID               *string                                  `json:"open_id,omitempty"`                // 动态产生用户 open id
	UserIDList           []string                                 `json:"user_id_list,omitempty"`           // 被抄送人列表
	OpenIDList           []string                                 `json:"open_id_list,omitempty"`           // 被抄送人列表
	TaskID               *string                                  `json:"task_id,omitempty"`                // 产生动态关联的task_id
	Comment              *string                                  `json:"comment,omitempty"`                // 理由
	CcUserList           []*GetApprovalInstanceRespTimelineCcUser `json:"cc_user_list,omitempty"`           // 抄送人列表
	Ext                  *GetApprovalInstanceRespTimelineExt      `json:"ext,omitempty"`                    // 动态其他信息, 目前包括 user_id_list, user_id
	NodeKey              *string                                  `json:"node_key,omitempty"`               // 产生task的节点key
	ModifiedInstanceCode *string                                  `json:"modified_instance_code,omitempty"` // 修改的原实例 code, 仅在查询修改实例时显示该字段
	RevertedInstanceCode *string                                  `json:"reverted_instance_code,omitempty"` // 撤销的原实例 code, 仅在查询撤销实例时显示该字段
}

// GetApprovalInstanceRespTimelineCcUser ...
type GetApprovalInstanceRespTimelineCcUser struct {
	UserID *string `json:"user_id,omitempty"` // 抄送人 user id
	CcID   *string `json:"cc_id,omitempty"`   // 审批实例内抄送唯一标识
	OpenID *string `json:"open_id,omitempty"` // 抄送人 open id
}

// GetApprovalInstanceRespTimelineExt ...
type GetApprovalInstanceRespTimelineExt struct {
	UserIDList []string `json:"user_id_list,omitempty"` // type类型 - user_id_list 含义 TRANSFER - 被转交人  ADD_APPROVER_BEFORE  -  被加签人 ADD_APPROVER -   被加签人 ADD_APPROVER_AFTER -   被加签人  DELETE_APPROVER  - 被减签人
	OpenIDList []string `json:"open_id_list,omitempty"` // user_id_list 对应的 open id
	UserID     *string  `json:"user_id,omitempty"`      // type类型 - user_id 含义 CC - 抄送人
	OpenID     *string  `json:"open_id,omitempty"`      // user_id 对应的 open_id
}

// getApprovalInstanceResp ...
type getApprovalInstanceResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApprovalInstanceResp `json:"data,omitempty"` // 返回业务信息
}
