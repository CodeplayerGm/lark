// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// SetVCPermissionMeetingRecording 将一个会议的录制文件授权给组织、用户或公开到公网
//
// 会议结束后并且收到了"录制完成"的事件方可进行授权；会议owner（通过开放平台预约的会议即为预约人）才有权限操作
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/set_permission
func (r *VCService) SetVCPermissionMeetingRecording(ctx context.Context, request *SetVCPermissionMeetingRecordingReq, options ...MethodOptionFunc) (*SetVCPermissionMeetingRecordingResp, *Response, error) {
	if r.cli.mock.mockVCSetVCPermissionMeetingRecording != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#SetVCPermissionMeetingRecording mock enable")
		return r.cli.mock.mockVCSetVCPermissionMeetingRecording(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "SetVCPermissionMeetingRecording",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/recording/set_permission",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(setVCPermissionMeetingRecordingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCSetVCPermissionMeetingRecording mock VCSetVCPermissionMeetingRecording method
func (r *Mock) MockVCSetVCPermissionMeetingRecording(f func(ctx context.Context, request *SetVCPermissionMeetingRecordingReq, options ...MethodOptionFunc) (*SetVCPermissionMeetingRecordingResp, *Response, error)) {
	r.mockVCSetVCPermissionMeetingRecording = f
}

// UnMockVCSetVCPermissionMeetingRecording un-mock VCSetVCPermissionMeetingRecording method
func (r *Mock) UnMockVCSetVCPermissionMeetingRecording() {
	r.mockVCSetVCPermissionMeetingRecording = nil
}

// SetVCPermissionMeetingRecordingReq ...
type SetVCPermissionMeetingRecordingReq struct {
	UserIDType        *IDType                                               `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	MeetingID         string                                                `path:"meeting_id" json:"-"`          // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
	PermissionObjects []*SetVCPermissionMeetingRecordingReqPermissionObject `json:"permission_objects,omitempty"` // 授权对象列表
}

// SetVCPermissionMeetingRecordingReqPermissionObject ...
type SetVCPermissionMeetingRecordingReqPermissionObject struct {
	ID         *string `json:"id,omitempty"`         // 授权对象ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	Type       int64   `json:"type,omitempty"`       // 授权对象类型, 示例值：1, 可选值有: `1`：用户授权, `2`：群组授权, `3`：租户内授权（id字段不填）, `4`：公网授权（id字段不填）
	Permission int64   `json:"permission,omitempty"` // 权限, 示例值：1, 可选值有: `1`：查看
}

// setVCPermissionMeetingRecordingResp ...
type setVCPermissionMeetingRecordingResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *SetVCPermissionMeetingRecordingResp `json:"data,omitempty"`
}

// SetVCPermissionMeetingRecordingResp ...
type SetVCPermissionMeetingRecordingResp struct {
}
