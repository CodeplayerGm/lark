// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteSearchDataSource 删除一个已存在的数据源
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/delete
func (r *SearchService) DeleteSearchDataSource(ctx context.Context, request *DeleteSearchDataSourceReq, options ...MethodOptionFunc) (*DeleteSearchDataSourceResp, *Response, error) {
	if r.cli.mock.mockSearchDeleteSearchDataSource != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#DeleteSearchDataSource mock enable")
		return r.cli.mock.mockSearchDeleteSearchDataSource(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "DeleteSearchDataSource",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteSearchDataSourceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockSearchDeleteSearchDataSource(f func(ctx context.Context, request *DeleteSearchDataSourceReq, options ...MethodOptionFunc) (*DeleteSearchDataSourceResp, *Response, error)) {
	r.mockSearchDeleteSearchDataSource = f
}

func (r *Mock) UnMockSearchDeleteSearchDataSource() {
	r.mockSearchDeleteSearchDataSource = nil
}

type DeleteSearchDataSourceReq struct {
	DataSourceID string `path:"data_source_id" json:"-"` // 数据源的唯一标识, 示例值："6953903108179099667"
}

type deleteSearchDataSourceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSearchDataSourceResp `json:"data,omitempty"`
}

type DeleteSearchDataSourceResp struct{}
