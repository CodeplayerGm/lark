// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteTaskReminder 删除提醒时间，返回结果状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/delete
func (r *TaskService) DeleteTaskReminder(ctx context.Context, request *DeleteTaskReminderReq, options ...MethodOptionFunc) (*DeleteTaskReminderResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTaskReminder != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTaskReminder mock enable")
		return r.cli.mock.mockTaskDeleteTaskReminder(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTaskReminder",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/reminders/:reminder_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskReminderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskDeleteTaskReminder(f func(ctx context.Context, request *DeleteTaskReminderReq, options ...MethodOptionFunc) (*DeleteTaskReminderResp, *Response, error)) {
	r.mockTaskDeleteTaskReminder = f
}

func (r *Mock) UnMockTaskDeleteTaskReminder() {
	r.mockTaskDeleteTaskReminder = nil
}

type DeleteTaskReminderReq struct {
	TaskID     string `path:"task_id" json:"-"`     // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	ReminderID string `path:"reminder_id" json:"-"` // 任务提醒时间设置的 ID（即 reminder.id）, 示例值："1"
}

type deleteTaskReminderResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskReminderResp `json:"data,omitempty"`
}

type DeleteTaskReminderResp struct{}
