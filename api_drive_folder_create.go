// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// CreateDriveFolder 该接口用于根据 folderToken 在该 folder 下创建文件夹。
//
// 该接口不支持并发创建，且调用频率上限为 5QPS 以及 10000次每天
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukTNzUjL5UzM14SO1MTN
func (r *DriveService) CreateDriveFolder(ctx context.Context, request *CreateDriveFolderReq, options ...MethodOptionFunc) (*CreateDriveFolderResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveFolder != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveFolder mock enable")
		return r.cli.mock.mockDriveCreateDriveFolder(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Drive#CreateDriveFolder call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveFolder request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:       "POST",
		URL:          "https://open.feishu.cn/open-apis/drive/explorer/v2/folder/{folderToken}",
		Body:         request,
		MethodOption: newMethodOption(options),

		NeedUserAccessToken: true,
	}
	resp := new(createDriveFolderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Drive#CreateDriveFolder POST https://open.feishu.cn/open-apis/drive/explorer/v2/folder/{folderToken} failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Drive#CreateDriveFolder POST https://open.feishu.cn/open-apis/drive/explorer/v2/folder/{folderToken} failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Drive", "CreateDriveFolder", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveFolder success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockDriveCreateDriveFolder(f func(ctx context.Context, request *CreateDriveFolderReq, options ...MethodOptionFunc) (*CreateDriveFolderResp, *Response, error)) {
	r.mockDriveCreateDriveFolder = f
}

func (r *Mock) UnMockDriveCreateDriveFolder() {
	r.mockDriveCreateDriveFolder = nil
}

type CreateDriveFolderReq struct {
	FolderToken string `path:"folderToken" json:"-"` // 文件夹的 token，获取方式见 [对接前说明](/ssl:ttdoc/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)的第 3 项
	Title       string `json:"title,omitempty"`      // 文件夹标题
}

type createDriveFolderResp struct {
	Code int64                  `json:"code,omitempty"`
	Msg  string                 `json:"msg,omitempty"`
	Data *CreateDriveFolderResp `json:"data,omitempty"`
}

type CreateDriveFolderResp struct {
	URL      string `json:"url,omitempty"`      // 新创建文件夹的 url
	Revision int64  `json:"revision,omitempty"` // 新创建文件夹的版本号
	Token    string `json:"token,omitempty"`    // 新创建文件夹的 token
}
