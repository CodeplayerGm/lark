// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeleteDriveMemberPermission 该接口用于根据 filetoken 移除文档协作者的权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/delete
func (r *DriveService) DeleteDriveMemberPermission(ctx context.Context, request *DeleteDriveMemberPermissionReq, options ...MethodOptionFunc) (*DeleteDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveDeleteDriveMemberPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteDriveMemberPermission",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/permissions/:token/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteDriveMemberPermission mock DriveDeleteDriveMemberPermission method
func (r *Mock) MockDriveDeleteDriveMemberPermission(f func(ctx context.Context, request *DeleteDriveMemberPermissionReq, options ...MethodOptionFunc) (*DeleteDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveDeleteDriveMemberPermission = f
}

// UnMockDriveDeleteDriveMemberPermission un-mock DriveDeleteDriveMemberPermission method
func (r *Mock) UnMockDriveDeleteDriveMemberPermission() {
	r.mockDriveDeleteDriveMemberPermission = nil
}

// DeleteDriveMemberPermissionReq ...
type DeleteDriveMemberPermissionReq struct {
	Token      string `path:"token" json:"-"`        // 文件的 token, 获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6), 示例值: "doccnBKgoMyY5OMbUG6FioTXuBe"
	MemberID   string `path:"member_id" json:"-"`    // 权限成员的ID, 与`member_type`相对应, 示例值: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Type       string `query:"type" json:"-"`        // 文件类型, 放于query参数中, 如: `?type=doc`, 示例值: "doc", 可选值有: `doc`: 文档, `sheet`: 电子表格, `file`: 云空间文件, `wiki`: 知识库节点, `bitable`: 多维表格, `docx`: 新版文档, `folder`: 文件夹（未来支持）
	MemberType string `query:"member_type" json:"-"` // 权限成员类型, 放于query参数中, 如: `?member_type=openid`, 示例值: "openid", 可选值有: `email`: 邮箱地址, `openid`: [开放平台ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get), `openchat`: [开放平台群组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), `opendepartmentid`: [开放平台部门ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), `userid`: [用户自定义ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get)
}

// DeleteDriveMemberPermissionResp ...
type DeleteDriveMemberPermissionResp struct {
}

// deleteDriveMemberPermissionResp ...
type deleteDriveMemberPermissionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *DeleteDriveMemberPermissionResp `json:"data,omitempty"`
}
