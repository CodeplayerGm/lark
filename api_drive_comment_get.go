// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetDriveComment 获取云文档中的某条评论。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/get
func (r *DriveService) GetDriveComment(ctx context.Context, request *GetDriveCommentReq, options ...MethodOptionFunc) (*GetDriveCommentResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveComment mock enable")
		return r.cli.mock.mockDriveGetDriveComment(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Drive#GetDriveComment call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveComment request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/drive/v1/files/:file_token/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,

		NeedUserAccessToken: true,
	}
	resp := new(getDriveCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Drive#GetDriveComment GET https://open.feishu.cn/open-apis/drive/v1/files/:file_token/comments/:comment_id failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Drive#GetDriveComment GET https://open.feishu.cn/open-apis/drive/v1/files/:file_token/comments/:comment_id failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Drive", "GetDriveComment", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveComment success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockDriveGetDriveComment(f func(ctx context.Context, request *GetDriveCommentReq, options ...MethodOptionFunc) (*GetDriveCommentResp, *Response, error)) {
	r.mockDriveGetDriveComment = f
}

func (r *Mock) UnMockDriveGetDriveComment() {
	r.mockDriveGetDriveComment = nil
}

type GetDriveCommentReq struct {
	FileType   FileType `query:"file_type" json:"-"`    // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件
	UserIDType *IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 userid
	FileToken  string   `path:"file_token" json:"-"`    // 文档token, 示例值："doccnHh7U87HOFpii5u5G*****"
	CommentID  string   `path:"comment_id" json:"-"`    // 评论ID, 示例值："6916106822734578184"
}

type getDriveCommentResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveCommentResp `json:"data,omitempty"` //
}

type GetDriveCommentResp struct {
	CommentID    string                        `json:"comment_id,omitempty"`     // 评论ID
	UserID       string                        `json:"user_id,omitempty"`        // 用户ID
	CreateTime   int64                         `json:"create_time,omitempty"`    // 创建时间
	UpdateTime   int64                         `json:"update_time,omitempty"`    // 更新时间
	IsSolved     bool                          `json:"is_solved,omitempty"`      // 是否已解决
	SolvedTime   int64                         `json:"solved_time,omitempty"`    // 解决评论时间
	SolverUserID string                        `json:"solver_user_id,omitempty"` // 解决评论者的用户ID
	ReplyList    *GetDriveCommentRespReplyList `json:"reply_list,omitempty"`     // 评论里的回复列表
}

type GetDriveCommentRespReplyList struct {
	Replies []*GetDriveCommentRespReplyListReplie `json:"replies,omitempty"` // 回复列表
}

type GetDriveCommentRespReplyListReplie struct {
	ReplyID    string                                     `json:"reply_id,omitempty"`    // 回复ID
	UserID     string                                     `json:"user_id,omitempty"`     // 用户ID
	CreateTime int64                                      `json:"create_time,omitempty"` // 创建时间
	UpdateTime int64                                      `json:"update_time,omitempty"` // 更新时间
	Content    *GetDriveCommentRespReplyListReplieContent `json:"content,omitempty"`     // 回复内容
}

type GetDriveCommentRespReplyListReplieContent struct {
	Elements []*GetDriveCommentRespReplyListReplieContentElement `json:"elements,omitempty"` // 回复的内容
}

type GetDriveCommentRespReplyListReplieContentElement struct {
	Type     string                                                    `json:"type,omitempty"`      // 回复的内容元素, 可选值有: `text_run`：普通文本, `docs_link`：at 云文档链接, `person`：at 联系人
	TextRun  *GetDriveCommentRespReplyListReplieContentElementTextRun  `json:"text_run,omitempty"`  // 文本内容
	DocsLink *GetDriveCommentRespReplyListReplieContentElementDocsLink `json:"docs_link,omitempty"` // 文本内容
	Person   *GetDriveCommentRespReplyListReplieContentElementPerson   `json:"person,omitempty"`    // 文本内容
}

type GetDriveCommentRespReplyListReplieContentElementTextRun struct {
	Text string `json:"text,omitempty"` // 回复 普通文本
}

type GetDriveCommentRespReplyListReplieContentElementDocsLink struct {
	URL string `json:"url,omitempty"` // 回复 at云文档
}

type GetDriveCommentRespReplyListReplieContentElementPerson struct {
	UserID string `json:"user_id,omitempty"` // 回复 at联系人
}
