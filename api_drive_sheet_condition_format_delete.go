// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteSheetConditionFormat 该接口用于删除已有的条件格式，单次最多支持删除10个条件格式，每个条件格式的删除会返回成功或者失败，失败的情况包括各种参数的校验。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-delete
func (r *DriveService) DeleteSheetConditionFormat(ctx context.Context, request *DeleteSheetConditionFormatReq, options ...MethodOptionFunc) (*DeleteSheetConditionFormatResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetConditionFormat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetConditionFormat mock enable")
		return r.cli.mock.mockDriveDeleteSheetConditionFormat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetConditionFormat",
		Method:                "DELETE",
		URL:                   "https://open.feishu.cn/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetConditionFormatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockDriveDeleteSheetConditionFormat(f func(ctx context.Context, request *DeleteSheetConditionFormatReq, options ...MethodOptionFunc) (*DeleteSheetConditionFormatResp, *Response, error)) {
	r.mockDriveDeleteSheetConditionFormat = f
}

func (r *Mock) UnMockDriveDeleteSheetConditionFormat() {
	r.mockDriveDeleteSheetConditionFormat = nil
}

type DeleteSheetConditionFormatReq struct {
	SpreadSheetToken string                                   `path:"spreadsheetToken" json:"-"` // sheet 的 token，获取方式见 [在线表格开发指南](/ssl:ttdoc/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	SheetCfIDs       *DeleteSheetConditionFormatReqSheetCfIDs `json:"sheet_cf_ids,omitempty"`    // 表格条件格式id
}

type DeleteSheetConditionFormatReqSheetCfIDs struct {
	SheetID string `json:"sheet_id,omitempty"` // sheet的id
	CfID    string `json:"cf_id,omitempty"`    // 条件格式id
}

type deleteSheetConditionFormatResp struct {
	Code int64                           `json:"code,omitempty"`
	Msg  string                          `json:"msg,omitempty"`
	Data *DeleteSheetConditionFormatResp `json:"data,omitempty"`
}

type DeleteSheetConditionFormatResp struct {
	Responses []*DeleteSheetConditionFormatRespResponse `json:"responses,omitempty"` // 响应
}

type DeleteSheetConditionFormatRespResponse struct {
	SheetID string `json:"sheet_id,omitempty"` // sheet的Id
	CfID    string `json:"cf_id,omitempty"`    // 条件格式id
	ResCode int64  `json:"res_code,omitempty"` // 条件格式删除状态码，0表示成功，非0表示失败
	ResMsg  string `json:"res_msg,omitempty"`  // 条件格式删除返回的状态信息，空表示成功，非空表示失败原因
}
