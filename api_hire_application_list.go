// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetHireApplicationList 根据限定条件获取投递列表信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list
func (r *HireService) GetHireApplicationList(ctx context.Context, request *GetHireApplicationListReq, options ...MethodOptionFunc) (*GetHireApplicationListResp, *Response, error) {
	if r.cli.mock.mockHireGetHireApplicationList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireApplicationList mock enable")
		return r.cli.mock.mockHireGetHireApplicationList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireApplicationList",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/hire/v1/applications",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireApplicationListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireApplicationList(f func(ctx context.Context, request *GetHireApplicationListReq, options ...MethodOptionFunc) (*GetHireApplicationListResp, *Response, error)) {
	r.mockHireGetHireApplicationList = f
}

func (r *Mock) UnMockHireGetHireApplicationList() {
	r.mockHireGetHireApplicationList = nil
}

type GetHireApplicationListReq struct {
	ProcessID    *string `query:"process_id" json:"-"`    // 按流程过滤, 示例值："212121"
	StageID      *string `query:"stage_id" json:"-"`      // 按阶段过滤, 示例值："212121"
	TalentID     *string `query:"talent_id" json:"-"`     // 按人才过滤, 示例值："123321"
	ActiveStatus *string `query:"active_status" json:"-"` // 按活跃状态筛选 1=活跃投递, 2=非活跃投递, 3=全部,, 示例值："1"
	PageToken    *string `query:"page_token" json:"-"`    // 查询游标, 由上一页结果返回, 第一页不传, 示例值："1"
	PageSize     *int64  `query:"page_size" json:"-"`     // 每页限制, 每页最大不超过100, 示例值：100
}

type getHireApplicationListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetHireApplicationListResp `json:"data,omitempty"`
}

type GetHireApplicationListResp struct {
	Items     []string `json:"items,omitempty"`      // 投递数据列表
	PageToken string   `json:"page_token,omitempty"` // 游标, 翻下一页数据时使用
	HasMore   bool     `json:"has_more,omitempty"`   // 是否还有下一页数据
}
