// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// TerminateHireApplication 根据投递 ID 修改投递状态为「已终止」
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/terminate
func (r *HireService) TerminateHireApplication(ctx context.Context, request *TerminateHireApplicationReq, options ...MethodOptionFunc) (*TerminateHireApplicationResp, *Response, error) {
	if r.cli.mock.mockHireTerminateHireApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#TerminateHireApplication mock enable")
		return r.cli.mock.mockHireTerminateHireApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "TerminateHireApplication",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications/:application_id/terminate",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(terminateHireApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireTerminateHireApplication(f func(ctx context.Context, request *TerminateHireApplicationReq, options ...MethodOptionFunc) (*TerminateHireApplicationResp, *Response, error)) {
	r.mockHireTerminateHireApplication = f
}

func (r *Mock) UnMockHireTerminateHireApplication() {
	r.mockHireTerminateHireApplication = nil
}

type TerminateHireApplicationReq struct {
	ApplicationID         string   `path:"application_id" json:"-"`           // 投递ID, 示例值："12312312312"
	TerminationType       int64    `json:"termination_type,omitempty"`        // 终止原因的类型, 示例值：1, 可选值有: `1`：我们拒绝了候选人, `22`：候选人拒绝了我们, `27`：其他
	TerminationReasonList []string `json:"termination_reason_list,omitempty"` // 终止的具体原因的id列表
	TerminationReasonNote *string  `json:"termination_reason_note,omitempty"` // 终止备注, 示例值："不符合期望"
}

type terminateHireApplicationResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *TerminateHireApplicationResp `json:"data,omitempty"`
}

type TerminateHireApplicationResp struct{}
