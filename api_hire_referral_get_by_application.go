// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetHireReferralByApplication 根据投递 ID 获取内推信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral/get_by_application
func (r *HireService) GetHireReferralByApplication(ctx context.Context, request *GetHireReferralByApplicationReq, options ...MethodOptionFunc) (*GetHireReferralByApplicationResp, *Response, error) {
	if r.cli.mock.mockHireGetHireReferralByApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireReferralByApplication mock enable")
		return r.cli.mock.mockHireGetHireReferralByApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireReferralByApplication",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/hire/v1/referrals/get_by_application",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireReferralByApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireReferralByApplication(f func(ctx context.Context, request *GetHireReferralByApplicationReq, options ...MethodOptionFunc) (*GetHireReferralByApplicationResp, *Response, error)) {
	r.mockHireGetHireReferralByApplication = f
}

func (r *Mock) UnMockHireGetHireReferralByApplication() {
	r.mockHireGetHireReferralByApplication = nil
}

type GetHireReferralByApplicationReq struct {
	ApplicationID string  `query:"application_id" json:"-"` // 投递的id, 示例值："6134134355464633"
	UserIDType    *IDType `query:"user_id_type" json:"-"`   // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 userid
}

type getHireReferralByApplicationResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetHireReferralByApplicationResp `json:"data,omitempty"`
}

type GetHireReferralByApplicationResp struct {
	Referral *GetHireReferralByApplicationRespReferral `json:"referral,omitempty"` // 内推信息
}

type GetHireReferralByApplicationRespReferral struct {
	ApplicationID  string `json:"application_id,omitempty"`   // 投递id
	CreateTime     int64  `json:"create_time,omitempty"`      // 创建时间（ms）
	ID             string `json:"id,omitempty"`               // 内推的id
	ReferralUserID string `json:"referral_user_id,omitempty"` // 内推人的id
}
