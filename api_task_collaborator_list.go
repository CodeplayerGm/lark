// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetTaskCollaboratorList 该接口用于查询任务执行者列表, 支持分页, 最大值为50
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/list
func (r *TaskService) GetTaskCollaboratorList(ctx context.Context, request *GetTaskCollaboratorListReq, options ...MethodOptionFunc) (*GetTaskCollaboratorListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskCollaboratorList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTaskCollaboratorList mock enable")
		return r.cli.mock.mockTaskGetTaskCollaboratorList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskCollaboratorList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/collaborators",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getTaskCollaboratorListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTaskCollaboratorList mock TaskGetTaskCollaboratorList method
func (r *Mock) MockTaskGetTaskCollaboratorList(f func(ctx context.Context, request *GetTaskCollaboratorListReq, options ...MethodOptionFunc) (*GetTaskCollaboratorListResp, *Response, error)) {
	r.mockTaskGetTaskCollaboratorList = f
}

// UnMockTaskGetTaskCollaboratorList un-mock TaskGetTaskCollaboratorList method
func (r *Mock) UnMockTaskGetTaskCollaboratorList() {
	r.mockTaskGetTaskCollaboratorList = nil
}

// GetTaskCollaboratorListReq ...
type GetTaskCollaboratorListReq struct {
	TaskID     string  `path:"task_id" json:"-"`       // 任务 ID, 示例值: "0d38e26e-190a-49e9-93a2-35067763ed1f"
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值: 50, 最大值: `50`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: "「上次返回的page_token」"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: "open_id", 可选值有: `open_id`: 用户的 open id, `union_id`: 用户的 union id, `user_id`: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// GetTaskCollaboratorListResp ...
type GetTaskCollaboratorListResp struct {
	Items     []*GetTaskCollaboratorListRespItem `json:"items,omitempty"`      // 返回的执行者ID列表
	PageToken string                             `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                               `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetTaskCollaboratorListRespItem ...
type GetTaskCollaboratorListRespItem struct {
	ID string `json:"id,omitempty"` // 任务执行者的 ID
}

// getTaskCollaboratorListResp ...
type getTaskCollaboratorListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskCollaboratorListResp `json:"data,omitempty"`
}
