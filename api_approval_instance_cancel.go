// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// CancelApprovalInstance
//
// 对于单个审批实例进行撤销操作。撤销后审批流程结束。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYDNyUjL2QjM14iN0ITN
func (r *ApprovalService) CancelApprovalInstance(ctx context.Context, request *CancelApprovalInstanceReq, options ...MethodOptionFunc) (*CancelApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalCancelApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#CancelApprovalInstance mock enable")
		return r.cli.mock.mockApprovalCancelApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "CancelApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/cancel",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(cancelApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockApprovalCancelApprovalInstance(f func(ctx context.Context, request *CancelApprovalInstanceReq, options ...MethodOptionFunc) (*CancelApprovalInstanceResp, *Response, error)) {
	r.mockApprovalCancelApprovalInstance = f
}

func (r *Mock) UnMockApprovalCancelApprovalInstance() {
	r.mockApprovalCancelApprovalInstance = nil
}

type CancelApprovalInstanceReq struct {
	ApprovalCode  string  `json:"approval_code,omitempty"` // 审批定义Code
	InstanceCode  string  `json:"instance_code,omitempty"` // 审批实例Code
	UserID        string  `json:"user_id,omitempty"`       // 操作用户
	Comment       *string `json:"comment,omitempty"`       // 撤回的实例的时候可以添加评论
	OpenID        string  `json:"open_id,omitempty"`       // 某个应用下用户的唯一标识，根据userID、openID、TenantId获得Lark用户。
	NotifyStarter *string `json:"notifyStarter,omitempty"` // 如果为true，撤回实例的时候会收到一条消息提醒。
}

type cancelApprovalInstanceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *CancelApprovalInstanceResp `json:"data,omitempty"`
}

type CancelApprovalInstanceResp struct{}
