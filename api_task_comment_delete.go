// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteTaskComment 该接口用于通过评论ID删除评论
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/delete
func (r *TaskService) DeleteTaskComment(ctx context.Context, request *DeleteTaskCommentReq, options ...MethodOptionFunc) (*DeleteTaskCommentResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTaskComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTaskComment mock enable")
		return r.cli.mock.mockTaskDeleteTaskComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTaskComment",
		Method:                "DELETE",
		URL:                   "https://open.feishu.cn/open-apis/task/v1/tasks/:task_id/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskDeleteTaskComment(f func(ctx context.Context, request *DeleteTaskCommentReq, options ...MethodOptionFunc) (*DeleteTaskCommentResp, *Response, error)) {
	r.mockTaskDeleteTaskComment = f
}

func (r *Mock) UnMockTaskDeleteTaskComment() {
	r.mockTaskDeleteTaskComment = nil
}

type DeleteTaskCommentReq struct {
	TaskID    string `path:"task_id" json:"-"`    // 任务ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	CommentID string `path:"comment_id" json:"-"` // 评论ID, 示例值："6937231762296684564"
}

type deleteTaskCommentResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskCommentResp `json:"data,omitempty"`
}

type DeleteTaskCommentResp struct{}
