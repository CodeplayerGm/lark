// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// AddBotToChat
//
// 拉机器人进群<br>
// **权限说明** ：需要启用机器人能力；机器人的owner需要已经在群里
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYDO04iN4QjL2gDN
func (r *BotService) AddBotToChat(ctx context.Context, request *AddBotToChatReq, options ...MethodOptionFunc) (*AddBotToChatResp, *Response, error) {
	if r.cli.mock.mockBotAddBotToChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bot#AddBotToChat mock enable")
		return r.cli.mock.mockBotAddBotToChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bot",
		API:                   "AddBotToChat",
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/bot/v4/add",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(addBotToChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockBotAddBotToChat(f func(ctx context.Context, request *AddBotToChatReq, options ...MethodOptionFunc) (*AddBotToChatResp, *Response, error)) {
	r.mockBotAddBotToChat = f
}

func (r *Mock) UnMockBotAddBotToChat() {
	r.mockBotAddBotToChat = nil
}

type AddBotToChatReq struct {
	ChatID string `json:"chat_id,omitempty"` // 群的id
}

type addBotToChatResp struct {
	Code int64             `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 返回码描述
	Data *AddBotToChatResp `json:"data,omitempty"`
}

type AddBotToChatResp struct{}
