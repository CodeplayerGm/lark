// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateACSUser 飞书智能门禁在人脸识别成功后会有韦根信号输出, 输出用户的卡号。
//
// 对于使用韦根协议的门禁系统, 企业可使用该接口录入用户卡号。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/patch
func (r *ACSService) UpdateACSUser(ctx context.Context, request *UpdateACSUserReq, options ...MethodOptionFunc) (*UpdateACSUserResp, *Response, error) {
	if r.cli.mock.mockACSUpdateACSUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#UpdateACSUser mock enable")
		return r.cli.mock.mockACSUpdateACSUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "UpdateACSUser",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateACSUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSUpdateACSUser mock ACSUpdateACSUser method
func (r *Mock) MockACSUpdateACSUser(f func(ctx context.Context, request *UpdateACSUserReq, options ...MethodOptionFunc) (*UpdateACSUserResp, *Response, error)) {
	r.mockACSUpdateACSUser = f
}

// UnMockACSUpdateACSUser un-mock ACSUpdateACSUser method
func (r *Mock) UnMockACSUpdateACSUser() {
	r.mockACSUpdateACSUser = nil
}

// UpdateACSUserReq ...
type UpdateACSUserReq struct {
	UserID     string                   `path:"user_id" json:"-"`       // 用户 ID, 示例值: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
	UserIDType *IDType                  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: "open_id", 可选值有: open_id: 用户的 open id, union_id: 用户的 union id, user_id: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Feature    *UpdateACSUserReqFeature `json:"feature,omitempty"`      // 用户特征
}

// UpdateACSUserReqFeature ...
type UpdateACSUserReqFeature struct {
	Card *int64 `json:"card,omitempty"` // 卡号, 示例值: 123456
}

// UpdateACSUserResp ...
type UpdateACSUserResp struct {
}

// updateACSUserResp ...
type updateACSUserResp struct {
	Code int64              `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *UpdateACSUserResp `json:"data,omitempty"`
}
