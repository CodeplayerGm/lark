// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetACSUser 该接口用于获取智能门禁中单个用户的信息。
//
// 只能获取已加入智能门禁权限组的用户
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/get
func (r *ACSService) GetACSUser(ctx context.Context, request *GetACSUserReq, options ...MethodOptionFunc) (*GetACSUserResp, *Response, error) {
	if r.cli.mock.mockACSGetACSUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSUser mock enable")
		return r.cli.mock.mockACSGetACSUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSUser",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/acs/v1/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockACSGetACSUser(f func(ctx context.Context, request *GetACSUserReq, options ...MethodOptionFunc) (*GetACSUserResp, *Response, error)) {
	r.mockACSGetACSUser = f
}

func (r *Mock) UnMockACSGetACSUser() {
	r.mockACSGetACSUser = nil
}

type GetACSUserReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 userid
	UserID     string  `path:"user_id" json:"-"`       // 用户 ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
}

type getACSUserResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *GetACSUserResp `json:"data,omitempty"`
}

type GetACSUserResp struct {
	User *GetACSUserRespUser `json:"user,omitempty"` // 门禁用户信息
}

type GetACSUserRespUser struct {
	Feature *GetACSUserRespUserFeature `json:"feature,omitempty"` // 用户特征
	UserID  string                     `json:"user_id,omitempty"` // 用户 ID
}

type GetACSUserRespUserFeature struct {
	Card         int64 `json:"card,omitempty"`          // 卡号
	FaceUploaded bool  `json:"face_uploaded,omitempty"` // 是否已上传人脸图片
}
