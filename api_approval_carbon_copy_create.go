// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// CreateApprovalCarbonCopy
//
// 通过接口可以将当前审批实例抄送给其他人。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uADOzYjLwgzM24CM4MjN
func (r *ApprovalService) CreateApprovalCarbonCopy(ctx context.Context, request *CreateApprovalCarbonCopyReq, options ...MethodOptionFunc) (*CreateApprovalCarbonCopyResp, *Response, error) {
	if r.cli.mock.mockApprovalCreateApprovalCarbonCopy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#CreateApprovalCarbonCopy mock enable")
		return r.cli.mock.mockApprovalCreateApprovalCarbonCopy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "CreateApprovalCarbonCopy",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/cc",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createApprovalCarbonCopyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockApprovalCreateApprovalCarbonCopy(f func(ctx context.Context, request *CreateApprovalCarbonCopyReq, options ...MethodOptionFunc) (*CreateApprovalCarbonCopyResp, *Response, error)) {
	r.mockApprovalCreateApprovalCarbonCopy = f
}

func (r *Mock) UnMockApprovalCreateApprovalCarbonCopy() {
	r.mockApprovalCreateApprovalCarbonCopy = nil
}

type CreateApprovalCarbonCopyReq struct {
	ApprovalCode string   `json:"approval_code,omitempty"` // 审批定义 code
	InstanceCode string   `json:"instance_code,omitempty"` // 审批实例 code
	UserID       *string  `json:"user_id,omitempty"`       // 发起抄送的人的 user_id
	OpenID       *string  `json:"open_id,omitempty"`       // 发起抄送的人的 open_id，如果传了 user_id 则优先使用 user_id，二者不能同时为空
	CcUserIDs    []string `json:"cc_user_ids,omitempty"`   // 被抄送人的 user_id 列表
	CcOpenIDs    []string `json:"cc_open_ids,omitempty"`   // 被抄送人的 open_id 列表，与 cc_user_ids 不可同时为空
	Comment      *string  `json:"comment,omitempty"`       // 抄送留言
}

type createApprovalCarbonCopyResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                        `json:"msg,omitempty"`  // 返回码的描述
	Data *CreateApprovalCarbonCopyResp `json:"data,omitempty"`
}

type CreateApprovalCarbonCopyResp struct{}
