// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateApprovalCarbonCopy 通过接口可以将当前审批实例抄送给其他人。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/cc
func (r *ApprovalService) CreateApprovalCarbonCopy(ctx context.Context, request *CreateApprovalCarbonCopyReq, options ...MethodOptionFunc) (*CreateApprovalCarbonCopyResp, *Response, error) {
	if r.cli.mock.mockApprovalCreateApprovalCarbonCopy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#CreateApprovalCarbonCopy mock enable")
		return r.cli.mock.mockApprovalCreateApprovalCarbonCopy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "CreateApprovalCarbonCopy",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/instances/cc",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createApprovalCarbonCopyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalCreateApprovalCarbonCopy mock ApprovalCreateApprovalCarbonCopy method
func (r *Mock) MockApprovalCreateApprovalCarbonCopy(f func(ctx context.Context, request *CreateApprovalCarbonCopyReq, options ...MethodOptionFunc) (*CreateApprovalCarbonCopyResp, *Response, error)) {
	r.mockApprovalCreateApprovalCarbonCopy = f
}

// UnMockApprovalCreateApprovalCarbonCopy un-mock ApprovalCreateApprovalCarbonCopy method
func (r *Mock) UnMockApprovalCreateApprovalCarbonCopy() {
	r.mockApprovalCreateApprovalCarbonCopy = nil
}

// CreateApprovalCarbonCopyReq ...
type CreateApprovalCarbonCopyReq struct {
	UserIDType   *IDType  `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值: "open_id", 可选值有: <md-enum>, <md-enum-item key="open_id" >用户的 open id</md-enum-item>, <md-enum-item key="union_id" >用户的 union id</md-enum-item>, <md-enum-item key="user_id" >用户的 user id</md-enum-item>, </md-enum>, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ApprovalCode string   `json:"approval_code,omitempty"` // 审批定义 code, 示例值: "7C468A54-8745-2245-9675-08B7C63E7A85"
	InstanceCode string   `json:"instance_code,omitempty"` // 审批实例 code, 示例值: "7C468A54-8745-2245-9675-08B7C63E7A85"
	UserID       string   `json:"user_id,omitempty"`       // 根据user_id_type填写发起抄送的人的用户id, 示例值: "f7cb567e"
	CcUserIDs    []string `json:"cc_user_ids,omitempty"`   // 根据user_id_type填写被抄送人的 用户id 列表, 示例值: f7cb567e
	Comment      *string  `json:"comment,omitempty"`       // 抄送留言, 示例值: "ok"
}

// CreateApprovalCarbonCopyResp ...
type CreateApprovalCarbonCopyResp struct {
}

// createApprovalCarbonCopyResp ...
type createApprovalCarbonCopyResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *CreateApprovalCarbonCopyResp `json:"data,omitempty"`
}
