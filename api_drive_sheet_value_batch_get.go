// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// BatchGetSheetValue
//
// 该接口用于根据 spreadsheetToken 和 ranges 读取表格多个范围的值，返回数据限制为10M。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukTMzUjL5EzM14SOxMTN
func (r *DriveService) BatchGetSheetValue(ctx context.Context, request *BatchGetSheetValueReq, options ...MethodOptionFunc) (*BatchGetSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveBatchGetSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchGetSheetValue mock enable")
		return r.cli.mock.mockDriveBatchGetSheetValue(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Drive#BatchGetSheetValue call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchGetSheetValue request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,

		NeedUserAccessToken: true,
	}
	resp := new(batchGetSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Drive#BatchGetSheetValue GET https://open.feishu.cn/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_batch_get failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Drive#BatchGetSheetValue GET https://open.feishu.cn/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_batch_get failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Drive", "BatchGetSheetValue", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchGetSheetValue success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockDriveBatchGetSheetValue(f func(ctx context.Context, request *BatchGetSheetValueReq, options ...MethodOptionFunc) (*BatchGetSheetValueResp, *Response, error)) {
	r.mockDriveBatchGetSheetValue = f
}

func (r *Mock) UnMockDriveBatchGetSheetValue() {
	r.mockDriveBatchGetSheetValue = nil
}

type BatchGetSheetValueReq struct {
	Ranges               string  `query:"ranges" json:"-"`               // 多个查询范围 如 url?ranges=range1,range2 ，⁣其中 range 包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见 ⁣[对接前说明](/ssl:ttdoc/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)  的第 5 项
	ValueRenderOption    *string `query:"valueRenderOption" json:"-"`    // valueRenderOption=ToString 可返回 toString 后的值；valueRenderOption=FormattedValue可返回格式化后的字符串；
	DateTimeRenderOption *string `query:"dateTimeRenderOption" json:"-"` // dateTimeRenderOption=FormattedString 会将时间日期按照其格式进行格式化，但不会对数字进行格式化，返回格式化后的字符串。
	SpreadsheetToken     string  `path:"spreadsheetToken" json:"-"`      // spreadsheet 的 token，获取方式见[ 对接前说明](/ssl:ttdoc/ukTMukTMukTM/uczNzUjL3czM14yN3MTN) 的第 4 项
}

type batchGetSheetValueResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *BatchGetSheetValueResp `json:"data,omitempty"`
}

type BatchGetSheetValueResp struct {
	Range    string        `json:"range,omitempty"`    // 查询范围
	Values   []interface{} `json:"values,omitempty"`   // 查询获得的值
	Revision int64         `json:"revision,omitempty"` // sheet 的版本号
}
