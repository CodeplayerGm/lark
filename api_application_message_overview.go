// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetApplicationMessageOverview
//
// 查询应用在指定时间段内机器人消息概览信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQTN0YjL0UDN24CN1QjN
func (r *ApplicationService) GetApplicationMessageOverview(ctx context.Context, request *GetApplicationMessageOverviewReq, options ...MethodOptionFunc) (*GetApplicationMessageOverviewResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationMessageOverview != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationMessageOverview mock enable")
		return r.cli.mock.mockApplicationGetApplicationMessageOverview(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationMessageOverview",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v1/app_message_overview",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationMessageOverviewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockApplicationGetApplicationMessageOverview(f func(ctx context.Context, request *GetApplicationMessageOverviewReq, options ...MethodOptionFunc) (*GetApplicationMessageOverviewResp, *Response, error)) {
	r.mockApplicationGetApplicationMessageOverview = f
}

func (r *Mock) UnMockApplicationGetApplicationMessageOverview() {
	r.mockApplicationGetApplicationMessageOverview = nil
}

type GetApplicationMessageOverviewReq struct {
	AppID       string    `json:"app_id,omitempty"`       // 目标应用的 ID
	TimeStart   int64     `json:"time_start,omitempty"`   // 起始时间戳（秒），时间跨度最长支持180天
	TimeEnd     int64     `json:"time_end,omitempty"`     // 截止时间戳（秒），时间跨度最长支持180天
	ChatType    *ChatType `json:"chat_type,omitempty"`    // 聊天类型，大小写不敏感，p2p：私聊；group：群聊
	MessageType *MsgType  `json:"message_type,omitempty"` // 消息类型，大小写不敏感，text：文本消息；image：图片消息；card：卡片消息；post：富文本消息；share_chat：群名片
}

type getApplicationMessageOverviewResp struct {
	Code int64                              `json:"code,omitempty"` // 返回码，非0表示失败
	Msg  string                             `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationMessageOverviewResp `json:"data,omitempty"` // 返回的业务信息，仅code = 0时有效
}

type GetApplicationMessageOverviewResp struct {
	P2pSent       *GetApplicationMessageOverviewRespP2pSent       `json:"p2p_sent,omitempty"`       // 单聊发送
	P2pReceived   *GetApplicationMessageOverviewRespP2pReceived   `json:"p2p_received,omitempty"`   // 单聊接收
	P2pRead       *GetApplicationMessageOverviewRespP2pRead       `json:"p2p_read,omitempty"`       // 单聊已读
	GroupSent     *GetApplicationMessageOverviewRespGroupSent     `json:"group_sent,omitempty"`     // 群聊发送
	GroupReceived *GetApplicationMessageOverviewRespGroupReceived `json:"group_received,omitempty"` // 群聊接收
	GroupRead     *GetApplicationMessageOverviewRespGroupRead     `json:"group_read,omitempty"`     // 群聊已读
}

type GetApplicationMessageOverviewRespP2pSent struct {
	Pv *GetApplicationMessageOverviewRespP2pSentPv `json:"pv,omitempty"` // 消息接收用户数量
}

type GetApplicationMessageOverviewRespP2pSentPv struct {
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收用户数量
}

type GetApplicationMessageOverviewRespP2pReceived struct {
	Pv *GetApplicationMessageOverviewRespP2pReceivedPv `json:"pv,omitempty"` // 消息接收用户数量
}

type GetApplicationMessageOverviewRespP2pReceivedPv struct {
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收用户数量
}

type GetApplicationMessageOverviewRespP2pRead struct {
	Pv *GetApplicationMessageOverviewRespP2pReadPv `json:"pv,omitempty"` // 消息已读用户数量
}

type GetApplicationMessageOverviewRespP2pReadPv struct {
	Uv int64 `json:"uv,omitempty"` // 去重的消息已读用户数量
}

type GetApplicationMessageOverviewRespGroupSent struct {
	Pv *GetApplicationMessageOverviewRespGroupSentPv `json:"pv,omitempty"` // 消息接收群聊数量
}

type GetApplicationMessageOverviewRespGroupSentPv struct {
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收群聊数量
}

type GetApplicationMessageOverviewRespGroupReceived struct {
	Pv *GetApplicationMessageOverviewRespGroupReceivedPv `json:"pv,omitempty"` // 消息接收群聊数量
}

type GetApplicationMessageOverviewRespGroupReceivedPv struct {
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收群聊数量
}

type GetApplicationMessageOverviewRespGroupRead struct {
	Pv *GetApplicationMessageOverviewRespGroupReadPv `json:"pv,omitempty"` // 消息已读用户数量
}

type GetApplicationMessageOverviewRespGroupReadPv struct {
	Uv int64 `json:"uv,omitempty"` // 去重的消息已读用户数量
}
