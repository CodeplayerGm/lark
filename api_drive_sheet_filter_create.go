// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// CreateSheetFilter
//
// ::: note
// 参数值可参考[筛选指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/filter-user-guide)
// :::
// 在子表内创建筛选。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/create
func (r *DriveService) CreateSheetFilter(ctx context.Context, request *CreateSheetFilterReq, options ...MethodOptionFunc) (*CreateSheetFilterResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetFilter != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetFilter mock enable")
		return r.cli.mock.mockDriveCreateSheetFilter(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetFilter",
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetFilterResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockDriveCreateSheetFilter(f func(ctx context.Context, request *CreateSheetFilterReq, options ...MethodOptionFunc) (*CreateSheetFilterResp, *Response, error)) {
	r.mockDriveCreateSheetFilter = f
}

func (r *Mock) UnMockDriveCreateSheetFilter() {
	r.mockDriveCreateSheetFilter = nil
}

type CreateSheetFilterReq struct {
	SpreadSheetToken string                         `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA\*****yGehy8"
	SheetID          string                         `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b\**12"
	Range            string                         `json:"range,omitempty"`            // 筛选应用范围, 示例值："xxxxxx!C1:H14"
	Col              string                         `json:"col,omitempty"`              // 设置筛选条件的列, 示例值："E"
	Condition        *CreateSheetFilterReqCondition `json:"condition,omitempty"`        // 筛选的条件
}

type CreateSheetFilterReqCondition struct {
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型, 示例值："number"
	CompareType *string  `json:"compare_type,omitempty"` // 比较类型, 示例值："less"
	Expected    []string `json:"expected,omitempty"`     // 筛选参数, 示例值：6
}

type createSheetFilterResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateSheetFilterResp `json:"data,omitempty"`
}

type CreateSheetFilterResp struct{}
