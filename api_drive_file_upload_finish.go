// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// FinishUploadDriveFile 触发完成上传。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_finish
func (r *DriveService) FinishUploadDriveFile(ctx context.Context, request *FinishUploadDriveFileReq, options ...MethodOptionFunc) (*FinishUploadDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveFinishUploadDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#FinishUploadDriveFile mock enable")
		return r.cli.mock.mockDriveFinishUploadDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "FinishUploadDriveFile",
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/drive/v1/files/upload_finish",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(finishUploadDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockDriveFinishUploadDriveFile(f func(ctx context.Context, request *FinishUploadDriveFileReq, options ...MethodOptionFunc) (*FinishUploadDriveFileResp, *Response, error)) {
	r.mockDriveFinishUploadDriveFile = f
}

func (r *Mock) UnMockDriveFinishUploadDriveFile() {
	r.mockDriveFinishUploadDriveFile = nil
}

type FinishUploadDriveFileReq struct {
	UploadID string `json:"upload_id,omitempty"` // 分片上传事务ID, 示例值："123456"
	BlockNum int64  `json:"block_num,omitempty"` // 分片数量, 示例值：1
}

type finishUploadDriveFileResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *FinishUploadDriveFileResp `json:"data,omitempty"`
}

type FinishUploadDriveFileResp struct {
	FileToken string `json:"file_token,omitempty"` // 新创建的文件token
}
