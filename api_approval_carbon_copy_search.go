// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// SearchApprovalCarbonCopy 为了更好地提升接口文档的的易理解性, 我们对文档进行了升级, 请尽快迁移至[新版本>>](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/search_cc)
//
// 该接口通过不同条件查询审批系统中符合条件的审批抄送列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUjMxYjL1ITM24SNyEjN
func (r *ApprovalService) SearchApprovalCarbonCopy(ctx context.Context, request *SearchApprovalCarbonCopyReq, options ...MethodOptionFunc) (*SearchApprovalCarbonCopyResp, *Response, error) {
	if r.cli.mock.mockApprovalSearchApprovalCarbonCopy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#SearchApprovalCarbonCopy mock enable")
		return r.cli.mock.mockApprovalSearchApprovalCarbonCopy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "SearchApprovalCarbonCopy",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/cc/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchApprovalCarbonCopyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalSearchApprovalCarbonCopy mock ApprovalSearchApprovalCarbonCopy method
func (r *Mock) MockApprovalSearchApprovalCarbonCopy(f func(ctx context.Context, request *SearchApprovalCarbonCopyReq, options ...MethodOptionFunc) (*SearchApprovalCarbonCopyResp, *Response, error)) {
	r.mockApprovalSearchApprovalCarbonCopy = f
}

// UnMockApprovalSearchApprovalCarbonCopy un-mock ApprovalSearchApprovalCarbonCopy method
func (r *Mock) UnMockApprovalSearchApprovalCarbonCopy() {
	r.mockApprovalSearchApprovalCarbonCopy = nil
}

// SearchApprovalCarbonCopyReq ...
type SearchApprovalCarbonCopyReq struct {
	UserID             string  `json:"user_id,omitempty"`              // 用户 id
	ApprovalCode       *string `json:"approval_code,omitempty"`        // 审批定义 code
	InstanceCode       *string `json:"instance_code,omitempty"`        // 审批实例 code
	InstanceExternalID *string `json:"instance_external_id,omitempty"` // 审批实例第三方 id 注: 和 approval_code 取并集
	GroupExternalID    *string `json:"group_external_id,omitempty"`    // 审批定义分组第三方 id 注: 和 instance_code 取并集
	CcTitle            *string `json:"cc_title,omitempty"`             // 审批抄送标题（只有第三方审批有）
	ReadStatus         *string `json:"read_status,omitempty"`          // 审批抄送状态 READ: 已读 UNREAD: 未读 注: 若不设置, 查询全部状态 若不在集合中, 报错
	CcCreateTimeFrom   *int64  `json:"CcCreateTimeFrom,omitempty"`     // 抄送查询开始时间 (unix毫秒时间戳)
	CcCreateTimeTo     *int64  `json:"CcCreateTimeTo,omitempty"`       // 抄送查询结束时间 (unix毫秒时间戳)
	Locale             *string `json:"locale,omitempty"`               // 地区 （zh-CN、en-US、ja-JP）
	Offset             *int64  `json:"offset,omitempty"`               // 查询偏移量 注: 不得超过10000
	Limit              *int64  `json:"limit,omitempty"`                // 查询限制量 注: 不得超过200 不设置默认查询10条数据
}

// SearchApprovalCarbonCopyResp ...
type SearchApprovalCarbonCopyResp struct {
	Data     map[string]interface{}                `json:"data,omitempty"`     // 是
	Count    int64                                 `json:"count,omitempty"`    // 查询返回条数
	CcList   []*SearchApprovalCarbonCopyRespCc     `json:"cc_list,omitempty"`  // 审批实例列表
	Approval *SearchApprovalCarbonCopyRespApproval `json:"approval,omitempty"` // 审批定义
	Group    *SearchApprovalCarbonCopyRespGroup    `json:"group,omitempty"`    // 审批定义分组
	Instance *SearchApprovalCarbonCopyRespInstance `json:"instance,omitempty"` // 审批实例信息
	Cc       *SearchApprovalCarbonCopyRespCc       `json:"cc,omitempty"`       // 审批抄送
}

// SearchApprovalCarbonCopyRespApproval ...
type SearchApprovalCarbonCopyRespApproval struct {
	Code       string                                        `json:"code,omitempty"`        // 审批定义 code
	Name       string                                        `json:"name,omitempty"`        // 审批定义名称
	IsExternal bool                                          `json:"is_external,omitempty"` // 是否为第三方审批
	External   *SearchApprovalCarbonCopyRespApprovalExternal `json:"external,omitempty"`    // 第三方审批信息
}

// SearchApprovalCarbonCopyRespApprovalExternal ...
type SearchApprovalCarbonCopyRespApprovalExternal struct {
	BatchCcRead bool `json:"batch_cc_read,omitempty"` // 是否支持批量读
}

// SearchApprovalCarbonCopyRespCc ...
type SearchApprovalCarbonCopyRespCc struct {
	UserID     string                              `json:"user_id,omitempty"`     // 审批抄送发起人 id
	CreateTime int64                               `json:"create_time,omitempty"` // 审批抄送开始时间
	ReadStatus string                              `json:"read_status,omitempty"` // 审批抄送状态
	Title      string                              `json:"title,omitempty"`       // 审批抄送名称
	Extra      string                              `json:"extra,omitempty"`       // 审批抄送扩展字段
	Link       *SearchApprovalCarbonCopyRespCcLink `json:"link,omitempty"`        // 审批抄送链接
}

// SearchApprovalCarbonCopyRespCcLink ...
type SearchApprovalCarbonCopyRespCcLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批抄送 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批抄送移动端链接
}

// SearchApprovalCarbonCopyRespGroup ...
type SearchApprovalCarbonCopyRespGroup struct {
	ExternalID string `json:"external_id,omitempty"` // 审批定义分组外部 id
	Name       string `json:"name,omitempty"`        // 审批定义分组名称
}

// SearchApprovalCarbonCopyRespInstance ...
type SearchApprovalCarbonCopyRespInstance struct {
	Code       string                                    `json:"code,omitempty"`        // 审批实例 code
	ExternalID string                                    `json:"external_id,omitempty"` // 审批实例外部 id
	UserID     string                                    `json:"user_id,omitempty"`     // 审批实例发起人 id
	StartTime  int64                                     `json:"start_time,omitempty"`  // 审批实例开始时间
	EndTime    int64                                     `json:"end_time,omitempty"`    // 审批实例结束时间
	Status     string                                    `json:"status,omitempty"`      // 审批实例状态
	Title      string                                    `json:"title,omitempty"`       // 审批实例名称（只有第三方审批有）
	Extra      string                                    `json:"extra,omitempty"`       // 审批实例扩展字段
	SerialID   string                                    `json:"serial_id,omitempty"`   // 审批流水号
	Link       *SearchApprovalCarbonCopyRespInstanceLink `json:"link,omitempty"`        // 审批实例链接（只有第三方审批有）
}

// SearchApprovalCarbonCopyRespInstanceLink ...
type SearchApprovalCarbonCopyRespInstanceLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批实例 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批实例移动端链接
}

// searchApprovalCarbonCopyResp ...
type searchApprovalCarbonCopyResp struct {
	Code int64                         `json:"code,omitempty"` // 是
	Msg  string                        `json:"msg,omitempty"`  // 是
	Data *SearchApprovalCarbonCopyResp `json:"data,omitempty"` // 返回业务信息
}
