// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// QueryAttendanceUserSettings
//
// 批量查询授权内员工的用户设置信息，包括人脸照片文件 ID、人脸照片更新时间。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//rule/batch-query-user-settings
func (r *AttendanceService) QueryAttendanceUserSettings(ctx context.Context, request *QueryAttendanceUserSettingsReq, options ...MethodOptionFunc) (*QueryAttendanceUserSettingsResp, *Response, error) {
	if r.cli.mock.mockAttendanceQueryAttendanceUserSettings != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#QueryAttendanceUserSettings mock enable")
		return r.cli.mock.mockAttendanceQueryAttendanceUserSettings(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "QueryAttendanceUserSettings",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/attendance/v1/user_settings/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(queryAttendanceUserSettingsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceQueryAttendanceUserSettings(f func(ctx context.Context, request *QueryAttendanceUserSettingsReq, options ...MethodOptionFunc) (*QueryAttendanceUserSettingsResp, *Response, error)) {
	r.mockAttendanceQueryAttendanceUserSettings = f
}

func (r *Mock) UnMockAttendanceQueryAttendanceUserSettings() {
	r.mockAttendanceQueryAttendanceUserSettings = nil
}

type QueryAttendanceUserSettingsReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体中的 user_ids 的员工工号类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值：“employee_id”
	UserIDs      []string     `json:"user_ids,omitempty"`      // employee_no 或 employee_id 列表，长度不超过 100
}

type queryAttendanceUserSettingsResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *QueryAttendanceUserSettingsResp `json:"data,omitempty"` // -
}

type QueryAttendanceUserSettingsResp struct {
	UserSettings []*QueryAttendanceUserSettingsRespUserSetting `json:"user_settings,omitempty"` // 用户设置信息列表
}

type QueryAttendanceUserSettingsRespUserSetting struct {
	UserID            string `json:"user_id,omitempty"`              // 员工工号
	FaceKey           string `json:"face_key,omitempty"`             // 人脸照片文件 ID
	FaceKeyUpdateTime string `json:"face_key_update_time,omitempty"` // 人脸照片更新时间，精确到秒的时间戳
}
