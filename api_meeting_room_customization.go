// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetMeetingRoomCustomization 该接口用于获取会议室个性化配置。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIjM5UjLyITO14iMykTN/query-meeting-room-customization-setting
func (r *MeetingRoomService) GetMeetingRoomCustomization(ctx context.Context, request *GetMeetingRoomCustomizationReq, options ...MethodOptionFunc) (*GetMeetingRoomCustomizationResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomCustomization != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomCustomization mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomCustomization(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomCustomization",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/customization",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomCustomizationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomCustomization mock MeetingRoomGetMeetingRoomCustomization method
func (r *Mock) MockMeetingRoomGetMeetingRoomCustomization(f func(ctx context.Context, request *GetMeetingRoomCustomizationReq, options ...MethodOptionFunc) (*GetMeetingRoomCustomizationResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomCustomization = f
}

// UnMockMeetingRoomGetMeetingRoomCustomization un-mock MeetingRoomGetMeetingRoomCustomization method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomCustomization() {
	r.mockMeetingRoomGetMeetingRoomCustomization = nil
}

// GetMeetingRoomCustomizationReq ...
type GetMeetingRoomCustomizationReq struct {
	RoomIDs []string `json:"room_ids,omitempty"` // 要获取的会议室ID列表
}

// GetMeetingRoomCustomizationResp ...
type GetMeetingRoomCustomizationResp struct {
	ErrorRoomIDs          []*GetMeetingRoomCustomizationRespErrorRoomID         `json:"error_room_ids,omitempty"`           // 返回错误的入参
	RoomIDToCustomization *GetMeetingRoomCustomizationRespRoomIDToCustomization `json:"room_id_to_customization,omitempty"` // 会议室ID-个性化配置的映射
}

// GetMeetingRoomCustomizationRespErrorRoomID ...
type GetMeetingRoomCustomizationRespErrorRoomID struct {
	BuildingID string `json:"building_id,omitempty"` // 建筑id
	RoomID     string `json:"room_id,omitempty"`     // 会议室id
	ErrorMsg   string `json:"error_msg,omitempty"`   // 错误信息
}

// GetMeetingRoomCustomizationRespRoomIDToCustomization ...
type GetMeetingRoomCustomizationRespRoomIDToCustomization struct {
	RoomID *GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomID `json:"room_id,omitempty"` // 会议室ID
}

// GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomID ...
type GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomID struct {
	ContactIDs        []int64                                                                      `json:"contact_ids,omitempty"`        // 准备会议室个性化的相关配置的人员ID列表
	CustomizationData *GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationData `json:"customization_data,omitempty"` // 个性化配置数据
	PreparationTime   int64                                                                        `json:"preparation_time,omitempty"`   // 准备时间
}

// GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationData ...
type GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationData struct {
	Conditions        *GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataConditions `json:"conditions,omitempty"`         // 问卷的显示条件, 当条件满足时, 该问卷才会出现让用户进行选择
	CustomizationType int64                                                                                  `json:"customization_type,omitempty"` // 问卷的类型, 1表示单选, 2表示多选, 3表示填空
	IndexKey          string                                                                                 `json:"index_key,omitempty"`          // 每个问卷的独立id
	InputContent      string                                                                                 `json:"input_content,omitempty"`      // 当type类型为填空时, 该参数需要填入
	IsRequired        bool                                                                                   `json:"is_required,omitempty"`        // 当type类型为填空时, 该参数需要填入
	Label             string                                                                                 `json:"label,omitempty"`              // 每个问卷的问题
	Options           *GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataOptions    `json:"options,omitempty"`            // 每个问卷的选项
	PlaceHolder       string                                                                                 `json:"place_holder,omitempty"`       // 填空题在未填写时的填充文案
}

// GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataConditions ...
type GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataConditions struct {
	CustomKey  string   `json:"custom_key,omitempty"`  // 该custom_key对应的index_key选中后, 问卷才会显示
	OptionKeys []string `json:"option_keys,omitempty"` // 所有的option都被选中后, 问卷才会显示
}

// GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataOptions ...
type GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataOptions struct {
	IsOthers       bool   `json:"is_others,omitempty"`        // 是否是其他选项
	IsSelected     bool   `json:"is_selected,omitempty"`      // 该选项是否勾选
	OptionImageURL string `json:"option_image_url,omitempty"` // 选项的图片
	OptionKey      string `json:"option_key,omitempty"`       // 每个选项的唯一id
	OptionLabel    string `json:"option_label,omitempty"`     // 每个问卷的选项
	OthersContent  string `json:"others_content,omitempty"`   // 其他选项的输入内容
}

// getMeetingRoomCustomizationResp ...
type getMeetingRoomCustomizationResp struct {
	Code int64                            `json:"code,omitempty"`
	Msg  string                           `json:"msg,omitempty"`
	Data *GetMeetingRoomCustomizationResp `json:"data,omitempty"`
}
