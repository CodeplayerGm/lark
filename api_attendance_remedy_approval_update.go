// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// UpdateAttendanceRemedyApproval
//
// 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口更新写入飞书考勤系统中的三方系统审批状态，例如请假、加班、外出、出差、补卡等审批，状态包括通过、不通过、撤销等。
// 发起状态的审批才可以被更新为通过、不通过，已经通过的审批才可以被更新为撤销。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/notify-approval-status-update
func (r *AttendanceService) UpdateAttendanceRemedyApproval(ctx context.Context, request *UpdateAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*UpdateAttendanceRemedyApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceUpdateAttendanceRemedyApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UpdateAttendanceRemedyApproval mock enable")
		return r.cli.mock.mockAttendanceUpdateAttendanceRemedyApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UpdateAttendanceRemedyApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/approval_infos/process",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateAttendanceRemedyApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceUpdateAttendanceRemedyApproval(f func(ctx context.Context, request *UpdateAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*UpdateAttendanceRemedyApprovalResp, *Response, error)) {
	r.mockAttendanceUpdateAttendanceRemedyApproval = f
}

func (r *Mock) UnMockAttendanceUpdateAttendanceRemedyApproval() {
	r.mockAttendanceUpdateAttendanceRemedyApproval = nil
}

type UpdateAttendanceRemedyApprovalReq struct {
	ApprovalID   string `json:"approval_id,omitempty"`   // 审批实例 ID
	ApprovalType string `json:"approval_type,omitempty"` // 审批类型，leave：请假，out：外出，overtime：加班，trip：出差，remedy：补卡
	Status       int64  `json:"status,omitempty"`        // 审批状态，1：不通过，2：通过，4：撤销
}

type updateAttendanceRemedyApprovalResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *UpdateAttendanceRemedyApprovalResp `json:"data,omitempty"` // -
}

type UpdateAttendanceRemedyApprovalResp struct {
	ApprovalInfo *UpdateAttendanceRemedyApprovalRespApprovalInfo `json:"approval_info,omitempty"`
}

type UpdateAttendanceRemedyApprovalRespApprovalInfo struct {
	ApprovalID   string `json:"approval_id,omitempty"`   // 审批实例 ID
	ApprovalType string `json:"approval_type,omitempty"` // 审批类型，leave：请假，out：外出，overtime：加班，trip：出差，remedy：补卡
	Status       int64  `json:"status,omitempty"`        // 审批状态，1：不通过，2：通过，4：已撤销
}
