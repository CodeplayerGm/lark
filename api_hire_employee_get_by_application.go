// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetHireEmployeeByApplication 通过投递 ID 获取入职信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/get_by_application
func (r *HireService) GetHireEmployeeByApplication(ctx context.Context, request *GetHireEmployeeByApplicationReq, options ...MethodOptionFunc) (*GetHireEmployeeByApplicationResp, *Response, error) {
	if r.cli.mock.mockHireGetHireEmployeeByApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireEmployeeByApplication mock enable")
		return r.cli.mock.mockHireGetHireEmployeeByApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireEmployeeByApplication",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/employees/get_by_application",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireEmployeeByApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireEmployeeByApplication(f func(ctx context.Context, request *GetHireEmployeeByApplicationReq, options ...MethodOptionFunc) (*GetHireEmployeeByApplicationResp, *Response, error)) {
	r.mockHireGetHireEmployeeByApplication = f
}

func (r *Mock) UnMockHireGetHireEmployeeByApplication() {
	r.mockHireGetHireEmployeeByApplication = nil
}

type GetHireEmployeeByApplicationReq struct {
	ApplicationID string `query:"application_id" json:"-"` // 投递ID, 示例值："123"
}

type getHireEmployeeByApplicationResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetHireEmployeeByApplicationResp `json:"data,omitempty"`
}

type GetHireEmployeeByApplicationResp struct {
	Employee *GetHireEmployeeByApplicationRespEmployee `json:"employee,omitempty"` // 员工信息
}

type GetHireEmployeeByApplicationRespEmployee struct {
	ID                     string `json:"id,omitempty"`                       // 员工ID
	ApplicationID          string `json:"application_id,omitempty"`           // 投递ID
	OnboardStatus          int64  `json:"onboard_status,omitempty"`           // 入职状态, 可选值有: `1`：已入职, `2`：已离职
	ConversionStatus       int64  `json:"conversion_status,omitempty"`        // 转正状态, 可选值有: `1`：未转正, `2`：已转正
	OnboardTime            int64  `json:"onboard_time,omitempty"`             // 实际入职时间
	ExpectedConversionTime int64  `json:"expected_conversion_time,omitempty"` // 预期转正时间
	ActualConversionTime   int64  `json:"actual_conversion_time,omitempty"`   // 实际转正时间
	OverboardTime          int64  `json:"overboard_time,omitempty"`           // 离职时间
	OverboardNote          string `json:"overboard_note,omitempty"`           // 离职原因
}
