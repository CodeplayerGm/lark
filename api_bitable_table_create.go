// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateBitableTable 新增一个数据表
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/create
func (r *BitableService) CreateBitableTable(ctx context.Context, request *CreateBitableTableReq, options ...MethodOptionFunc) (*CreateBitableTableResp, *Response, error) {
	if r.cli.mock.mockBitableCreateBitableTable != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#CreateBitableTable mock enable")
		return r.cli.mock.mockBitableCreateBitableTable(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "CreateBitableTable",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBitableTableResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableCreateBitableTable mock BitableCreateBitableTable method
func (r *Mock) MockBitableCreateBitableTable(f func(ctx context.Context, request *CreateBitableTableReq, options ...MethodOptionFunc) (*CreateBitableTableResp, *Response, error)) {
	r.mockBitableCreateBitableTable = f
}

// UnMockBitableCreateBitableTable un-mock BitableCreateBitableTable method
func (r *Mock) UnMockBitableCreateBitableTable() {
	r.mockBitableCreateBitableTable = nil
}

// CreateBitableTableReq ...
type CreateBitableTableReq struct {
	AppToken   string                      `path:"app_token" json:"-"`     // bitable app token, 示例值: "appbcbWCzen6D8dezhoCH2RpMAh"
	UserIDType *IDType                     `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: "open_id", 可选值有: `open_id`: 用户的 open id, `union_id`: 用户的 union id, `user_id`: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Table      *CreateBitableTableReqTable `json:"table,omitempty"`        // 数据表
}

// CreateBitableTableReqTable ...
type CreateBitableTableReqTable struct {
	Name *string `json:"name,omitempty"` // 数据表 名字, 示例值: "table1"
}

// CreateBitableTableResp ...
type CreateBitableTableResp struct {
	TableID string `json:"table_id,omitempty"` // table id
}

// createBitableTableResp ...
type createBitableTableResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateBitableTableResp `json:"data,omitempty"`
}
