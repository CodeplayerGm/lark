// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteMeetingRoomRoom 该接口用于删除会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUzMxYjL1MTM24SNzEjN
func (r *MeetingRoomService) DeleteMeetingRoomRoom(ctx context.Context, request *DeleteMeetingRoomRoomReq, options ...MethodOptionFunc) (*DeleteMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomDeleteMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#DeleteMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomDeleteMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "DeleteMeetingRoomRoom",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomDeleteMeetingRoomRoom(f func(ctx context.Context, request *DeleteMeetingRoomRoomReq, options ...MethodOptionFunc) (*DeleteMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomDeleteMeetingRoomRoom = f
}

func (r *Mock) UnMockMeetingRoomDeleteMeetingRoomRoom() {
	r.mockMeetingRoomDeleteMeetingRoomRoom = nil
}

type DeleteMeetingRoomRoomReq struct {
	RoomID string `json:"room_id,omitempty"` // 要删除的会议室ID
}

type deleteMeetingRoomRoomResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *DeleteMeetingRoomRoomResp `json:"data,omitempty"`
}

type DeleteMeetingRoomRoomResp struct{}
