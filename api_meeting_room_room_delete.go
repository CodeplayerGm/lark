// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeleteMeetingRoomRoom 该接口用于删除会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUzMxYjL1MTM24SNzEjN
func (r *MeetingRoomService) DeleteMeetingRoomRoom(ctx context.Context, request *DeleteMeetingRoomRoomReq, options ...MethodOptionFunc) (*DeleteMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomDeleteMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#DeleteMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomDeleteMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "DeleteMeetingRoomRoom",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomDeleteMeetingRoomRoom mock MeetingRoomDeleteMeetingRoomRoom method
func (r *Mock) MockMeetingRoomDeleteMeetingRoomRoom(f func(ctx context.Context, request *DeleteMeetingRoomRoomReq, options ...MethodOptionFunc) (*DeleteMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomDeleteMeetingRoomRoom = f
}

// UnMockMeetingRoomDeleteMeetingRoomRoom un-mock MeetingRoomDeleteMeetingRoomRoom method
func (r *Mock) UnMockMeetingRoomDeleteMeetingRoomRoom() {
	r.mockMeetingRoomDeleteMeetingRoomRoom = nil
}

// DeleteMeetingRoomRoomReq ...
type DeleteMeetingRoomRoomReq struct {
	RoomID string `json:"room_id,omitempty"` // 要删除的会议室ID
}

// deleteMeetingRoomRoomResp ...
type deleteMeetingRoomRoomResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *DeleteMeetingRoomRoomResp `json:"data,omitempty"`
}

// DeleteMeetingRoomRoomResp ...
type DeleteMeetingRoomRoomResp struct {
}
