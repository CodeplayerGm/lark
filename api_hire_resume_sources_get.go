// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetHireResumeSource 获取简历来源列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/resume_source/list
func (r *HireService) GetHireResumeSource(ctx context.Context, request *GetHireResumeSourceReq, options ...MethodOptionFunc) (*GetHireResumeSourceResp, *Response, error) {
	if r.cli.mock.mockHireGetHireResumeSource != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireResumeSource mock enable")
		return r.cli.mock.mockHireGetHireResumeSource(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireResumeSource",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/hire/v1/resume_sources",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireResumeSourceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireResumeSource(f func(ctx context.Context, request *GetHireResumeSourceReq, options ...MethodOptionFunc) (*GetHireResumeSourceResp, *Response, error)) {
	r.mockHireGetHireResumeSource = f
}

func (r *Mock) UnMockHireGetHireResumeSource() {
	r.mockHireGetHireResumeSource = nil
}

type GetHireResumeSourceReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："1"
}

type getHireResumeSourceResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetHireResumeSourceResp `json:"data,omitempty"` //
}

type GetHireResumeSourceResp struct {
	Items     []*GetHireResumeSourceRespItem `json:"items,omitempty"`      // 数据
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
}

type GetHireResumeSourceRespItem struct {
	ID               string `json:"id,omitempty"`                 // 简历来源id
	ZhName           string `json:"zh_name,omitempty"`            // 中文名
	EnName           string `json:"en_name,omitempty"`            // 英文名
	ResumeSourceType int64  `json:"resume_source_type,omitempty"` // 简历源类型, 可选值有: `10000`：内推, `10001`：猎头, `10002`：内部来源, `10003`：第三方招聘网站, `10004`：社交媒体, `10005`：线下来源, `10006`：其他
}
