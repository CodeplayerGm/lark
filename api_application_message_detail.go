// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetApplicationMessageDetail
//
// 查询应用在指定时间段内机器人消息详细信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYTN0YjL2UDN24iN1QjN
func (r *ApplicationService) GetApplicationMessageDetail(ctx context.Context, request *GetApplicationMessageDetailReq, options ...MethodOptionFunc) (*GetApplicationMessageDetailResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationMessageDetail != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationMessageDetail mock enable")
		return r.cli.mock.mockApplicationGetApplicationMessageDetail(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationMessageDetail",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v1/app_message_detail",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationMessageDetailResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockApplicationGetApplicationMessageDetail(f func(ctx context.Context, request *GetApplicationMessageDetailReq, options ...MethodOptionFunc) (*GetApplicationMessageDetailResp, *Response, error)) {
	r.mockApplicationGetApplicationMessageDetail = f
}

func (r *Mock) UnMockApplicationGetApplicationMessageDetail() {
	r.mockApplicationGetApplicationMessageDetail = nil
}

type GetApplicationMessageDetailReq struct {
	AppID     string  `query:"app_id" json:"-"`     // 目标应用的 ID
	MessageID string  `query:"message_id" json:"-"` // open_message_id
	TimeStart int64   `query:"time_start" json:"-"` // 起始时间戳（秒），时间跨度最长支持180天
	TimeEnd   int64   `query:"time_end" json:"-"`   // 截止时间戳（秒），时间跨度最长支持180天
	PageToken *string `query:"page_token" json:"-"` // 分页标记，首次传空，非首次使用返回中的page_token
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小，默认为512，取值区间[1,1000]
}

type getApplicationMessageDetailResp struct {
	Code int64                            `json:"code,omitempty"` // 返回码，非0表示失败
	Msg  string                           `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationMessageDetailResp `json:"data,omitempty"` // 返回的业务信息，仅code = 0时有效
}

type GetApplicationMessageDetailResp struct {
	MessageID   string                                    `json:"message_id,omitempty"`   // open_message_id
	ChatType    ChatType                                  `json:"chat_type,omitempty"`    // 聊天类型
	MessageType MsgType                                   `json:"message_type,omitempty"` // 消息类型
	Nsent       int64                                     `json:"nsent,omitempty"`        // 总发送数
	Target      *GetApplicationMessageDetailRespTarget    `json:"target,omitempty"`       // 发送目标用户列表，群聊为空
	Nread       int64                                     `json:"nread,omitempty"`        // 总阅读数
	UsersRead   *GetApplicationMessageDetailRespUsersRead `json:"users_read,omitempty"`   // 已读用户列表
	HasMore     bool                                      `json:"has_more,omitempty"`     // 是否还有更多分页，当 has_more 为 true 时，会同时返回新的 page_token
	PageToken   string                                    `json:"page_token,omitempty"`   // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

type GetApplicationMessageDetailRespTarget struct {
	OpenID string `json:"open_id,omitempty"` // open_id
}

type GetApplicationMessageDetailRespUsersRead struct {
	OpenID string `json:"open_id,omitempty"` // open_id
}
