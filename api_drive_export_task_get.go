// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetDriveExportTask 根据创建导出任务的ticket查询导出任务的结果
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get
func (r *DriveService) GetDriveExportTask(ctx context.Context, request *GetDriveExportTaskReq, options ...MethodOptionFunc) (*GetDriveExportTaskResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveExportTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveExportTask mock enable")
		return r.cli.mock.mockDriveGetDriveExportTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveExportTask",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/export_tasks/:ticket",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveExportTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveExportTask mock DriveGetDriveExportTask method
func (r *Mock) MockDriveGetDriveExportTask(f func(ctx context.Context, request *GetDriveExportTaskReq, options ...MethodOptionFunc) (*GetDriveExportTaskResp, *Response, error)) {
	r.mockDriveGetDriveExportTask = f
}

// UnMockDriveGetDriveExportTask un-mock DriveGetDriveExportTask method
func (r *Mock) UnMockDriveGetDriveExportTask() {
	r.mockDriveGetDriveExportTask = nil
}

// GetDriveExportTaskReq ...
type GetDriveExportTaskReq struct {
	Ticket string `path:"ticket" json:"-"` // 导出任务ID, 示例值: "6933093124755423251"
	Token  string `query:"token" json:"-"` // 导出文档的 token, 示例值: "doccnZVxxxxxxxxxxxxGiyBgYqe"
}

// GetDriveExportTaskResp ...
type GetDriveExportTaskResp struct {
	Result *GetDriveExportTaskRespResult `json:"result,omitempty"` // 导出任务结果
}

// GetDriveExportTaskRespResult ...
type GetDriveExportTaskRespResult struct {
	FileExtension string `json:"file_extension,omitempty"` // 导出文件扩展名, 可选值有: docx: Microsoft Word (DOCX) 格式, pdf: pdf 格式, xlsx: Microsoft Excel (XLSX) 格式
	Type          string `json:"type,omitempty"`           // 导出文档类型, 可选值有: doc: 旧版飞书云文档类型, sheet: 飞书电子表格类型, bitable: 飞书多维表格类型, docx: 新版飞书云文档类型
	FileName      string `json:"file_name,omitempty"`      // 导出文件名
	FileToken     string `json:"file_token,omitempty"`     // 导出文件 drive token
	FileSize      int64  `json:"file_size,omitempty"`      // 导出文件大小
	JobErrorMsg   string `json:"job_error_msg,omitempty"`  // 任务失败原因
	JobStatus     int64  `json:"job_status,omitempty"`     // 任务状态, 可选值有: 0: 成功, 1: 初始化, 2: 处理中, 3: 内部错误, 107: 导出文档过大, 108: 处理超时, 109: 内部错误, 110: 无权限, 111: 导出文档已删除, 122: 创建副本中禁止导出, 123: 导出文档不存在, 6000: 导出文档图片过多
}

// getDriveExportTaskResp ...
type getDriveExportTaskResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveExportTaskResp `json:"data,omitempty"`
}
