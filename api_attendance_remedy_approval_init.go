// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// InitAttendanceRemedyApproval
//
// 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口，将在三方审批系统中发起的补卡审批数据，写入到飞书的考勤系统中。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/notify-remedy-approval-initiation
func (r *AttendanceService) InitAttendanceRemedyApproval(ctx context.Context, request *InitAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*InitAttendanceRemedyApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceInitAttendanceRemedyApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#InitAttendanceRemedyApproval mock enable")
		return r.cli.mock.mockAttendanceInitAttendanceRemedyApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "InitAttendanceRemedyApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(initAttendanceRemedyApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceInitAttendanceRemedyApproval(f func(ctx context.Context, request *InitAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*InitAttendanceRemedyApprovalResp, *Response, error)) {
	r.mockAttendanceInitAttendanceRemedyApproval = f
}

func (r *Mock) UnMockAttendanceInitAttendanceRemedyApproval() {
	r.mockAttendanceInitAttendanceRemedyApproval = nil
}

type InitAttendanceRemedyApprovalReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体中的 user_id 的员工工号类型，必选字段，可用值：【employee_id（员工employeeId），employee_no（员工工号）】，示例值："employee_id"
	UserID       string       `json:"user_id,omitempty"`       // 用户 ID
	RemedyDate   int64        `json:"remedy_date,omitempty"`   // 补卡日期
	PunchNo      int64        `json:"punch_no,omitempty"`      // 第几次上下班，可用值【0（第 1 次上下班），1（第 2 次上下班），2（第 3 次上下班）】，自由班次时填 0
	WorkType     int64        `json:"work_type,omitempty"`     // 上班/下班，1：上班，2：下班，自由班次时填 0
	RemedyTime   string       `json:"remedy_time,omitempty"`   // 补卡时间，时间格式为 yyyy-MM-dd HH:mm
	Reason       string       `json:"reason,omitempty"`        // 补卡原因
}

type initAttendanceRemedyApprovalResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *InitAttendanceRemedyApprovalResp `json:"data,omitempty"` // -
}

type InitAttendanceRemedyApprovalResp struct {
	UserRemedy *InitAttendanceRemedyApprovalRespUserRemedy `json:"user_remedy,omitempty"`
}

type InitAttendanceRemedyApprovalRespUserRemedy struct {
	UserID     string `json:"user_id,omitempty"`     // 用户 ID
	ApprovalID string `json:"approval_id,omitempty"` // 审批实例 ID，可用于通知审批状态更新
	RemedyDate int64  `json:"remedy_date,omitempty"` // 补卡日期
	PunchNo    int64  `json:"punch_no,omitempty"`    // 第几次上下班，可用值【0（第 1 次上下班），1（第2次上下班），2（第3次上下班）】，自由班次时填 0
	WorkType   int64  `json:"work_type,omitempty"`   // 上班/下班，1：上班，2：下班
	RemedyTime string `json:"remedy_time,omitempty"` // 补卡时间，时间格式为 yyyy-MM-dd HH:mm
	Reason     string `json:"reason,omitempty"`      // 补卡原因
}
