// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package test

import (
	"context"
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/chyroc/lark"
)

func Test_MDM_Sample_Failed(t *testing.T) {
	as := assert.New(t)

	t.Run("request failed", func(t *testing.T) {
		cli := AppAllPermission.Ins()
		cli.Mock().MockGetTenantAccessToken(mockGetTenantAccessTokenFailed)
		cli.Mock().MockGetAppAccessToken(mockGetTenantAccessTokenFailed)
		moduleCli := cli.MDM

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMVendorList(ctx, &lark.GetMDMVendorListReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMVendor(ctx, &lark.GetMDMVendorReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMVendorListAll(ctx, &lark.GetMDMVendorListAllReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMLegalEntityList(ctx, &lark.GetMDMLegalEntityListReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMLegalEntity(ctx, &lark.GetMDMLegalEntityReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMLegalEntityListAll(ctx, &lark.GetMDMLegalEntityListAllReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMInternalOrder(ctx, &lark.CreateMDMInternalOrderReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMInternalOrder(ctx, &lark.UpdateMDMInternalOrderReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMInternalOrder(ctx, &lark.DeleteMDMInternalOrderReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMInternalOrder(ctx, &lark.GetMDMInternalOrderReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMInternalOrder(ctx, &lark.SearchMDMInternalOrderReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMCostCenter(ctx, &lark.CreateMDMCostCenterReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMCostCenter(ctx, &lark.UpdateMDMCostCenterReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMCostCenter(ctx, &lark.DeleteMDMCostCenterReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMCostCenter(ctx, &lark.GetMDMCostCenterReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMCostCenter(ctx, &lark.SearchMDMCostCenterReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMDepartmentCostCenterRelationship(ctx, &lark.CreateMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMDepartmentCostCenterRelationship(ctx, &lark.UpdateMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMDepartmentCostCenterRelationship(ctx, &lark.DeleteMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepartmentCostCenterRelationship(ctx, &lark.GetMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMDepartmentCostCenterRelationship(ctx, &lark.SearchMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMGlAccount(ctx, &lark.CreateMDMGlAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMGlAccount(ctx, &lark.UpdateMDMGlAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMGlAccount(ctx, &lark.DeleteMDMGlAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepGlAccount(ctx, &lark.GetMDMDepGlAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMGlAccount(ctx, &lark.SearchMDMGlAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMCompany(ctx, &lark.CreateMDMCompanyReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMCompany(ctx, &lark.UpdateMDMCompanyReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMCompany(ctx, &lark.DeleteMDMCompanyReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepCompany(ctx, &lark.GetMDMDepCompanyReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMCompany(ctx, &lark.SearchMDMCompanyReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMGlAccountCompanyRelationship(ctx, &lark.CreateMDMGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMGlAccountCompanyRelationship(ctx, &lark.UpdateMDMGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMGlAccountCompanyRelationship(ctx, &lark.DeleteMDMGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepGlAccountCompanyRelationship(ctx, &lark.GetMDMDepGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMGlAccountCompanyRelationship(ctx, &lark.SearchMDMGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMCompanyBankAccount(ctx, &lark.CreateMDMCompanyBankAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMCompanyBankAccount(ctx, &lark.UpdateMDMCompanyBankAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMCompanyBankAccount(ctx, &lark.DeleteMDMCompanyBankAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepCompanyBankAccount(ctx, &lark.GetMDMDepCompanyBankAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMCompanyBankAccount(ctx, &lark.SearchMDMCompanyBankAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMCompanyAsset(ctx, &lark.CreateMDMCompanyAssetReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMCompanyAsset(ctx, &lark.UpdateMDMCompanyAssetReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMCompanyAsset(ctx, &lark.DeleteMDMCompanyAssetReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepCompanyAsset(ctx, &lark.GetMDMDepCompanyAssetReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMCompanyAsset(ctx, &lark.SearchMDMCompanyAssetReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMConfigList(ctx, &lark.GetMDMConfigListReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "failed")
		})

	})

	t.Run("request mock failed", func(t *testing.T) {
		cli := AppAllPermission.Ins()
		moduleCli := cli.MDM

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMVendorList(func(ctx context.Context, request *lark.GetMDMVendorListReq, options ...lark.MethodOptionFunc) (*lark.GetMDMVendorListResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMVendorList()

			_, _, err := moduleCli.GetMDMVendorList(ctx, &lark.GetMDMVendorListReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMVendor(func(ctx context.Context, request *lark.GetMDMVendorReq, options ...lark.MethodOptionFunc) (*lark.GetMDMVendorResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMVendor()

			_, _, err := moduleCli.GetMDMVendor(ctx, &lark.GetMDMVendorReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMVendorListAll(func(ctx context.Context, request *lark.GetMDMVendorListAllReq, options ...lark.MethodOptionFunc) (*lark.GetMDMVendorListAllResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMVendorListAll()

			_, _, err := moduleCli.GetMDMVendorListAll(ctx, &lark.GetMDMVendorListAllReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMLegalEntityList(func(ctx context.Context, request *lark.GetMDMLegalEntityListReq, options ...lark.MethodOptionFunc) (*lark.GetMDMLegalEntityListResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMLegalEntityList()

			_, _, err := moduleCli.GetMDMLegalEntityList(ctx, &lark.GetMDMLegalEntityListReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMLegalEntity(func(ctx context.Context, request *lark.GetMDMLegalEntityReq, options ...lark.MethodOptionFunc) (*lark.GetMDMLegalEntityResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMLegalEntity()

			_, _, err := moduleCli.GetMDMLegalEntity(ctx, &lark.GetMDMLegalEntityReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMLegalEntityListAll(func(ctx context.Context, request *lark.GetMDMLegalEntityListAllReq, options ...lark.MethodOptionFunc) (*lark.GetMDMLegalEntityListAllResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMLegalEntityListAll()

			_, _, err := moduleCli.GetMDMLegalEntityListAll(ctx, &lark.GetMDMLegalEntityListAllReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMCreateMDMInternalOrder(func(ctx context.Context, request *lark.CreateMDMInternalOrderReq, options ...lark.MethodOptionFunc) (*lark.CreateMDMInternalOrderResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMCreateMDMInternalOrder()

			_, _, err := moduleCli.CreateMDMInternalOrder(ctx, &lark.CreateMDMInternalOrderReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMUpdateMDMInternalOrder(func(ctx context.Context, request *lark.UpdateMDMInternalOrderReq, options ...lark.MethodOptionFunc) (*lark.UpdateMDMInternalOrderResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMUpdateMDMInternalOrder()

			_, _, err := moduleCli.UpdateMDMInternalOrder(ctx, &lark.UpdateMDMInternalOrderReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMDeleteMDMInternalOrder(func(ctx context.Context, request *lark.DeleteMDMInternalOrderReq, options ...lark.MethodOptionFunc) (*lark.DeleteMDMInternalOrderResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMDeleteMDMInternalOrder()

			_, _, err := moduleCli.DeleteMDMInternalOrder(ctx, &lark.DeleteMDMInternalOrderReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMInternalOrder(func(ctx context.Context, request *lark.GetMDMInternalOrderReq, options ...lark.MethodOptionFunc) (*lark.GetMDMInternalOrderResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMInternalOrder()

			_, _, err := moduleCli.GetMDMInternalOrder(ctx, &lark.GetMDMInternalOrderReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMSearchMDMInternalOrder(func(ctx context.Context, request *lark.SearchMDMInternalOrderReq, options ...lark.MethodOptionFunc) (*lark.SearchMDMInternalOrderResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMSearchMDMInternalOrder()

			_, _, err := moduleCli.SearchMDMInternalOrder(ctx, &lark.SearchMDMInternalOrderReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMCreateMDMCostCenter(func(ctx context.Context, request *lark.CreateMDMCostCenterReq, options ...lark.MethodOptionFunc) (*lark.CreateMDMCostCenterResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMCreateMDMCostCenter()

			_, _, err := moduleCli.CreateMDMCostCenter(ctx, &lark.CreateMDMCostCenterReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMUpdateMDMCostCenter(func(ctx context.Context, request *lark.UpdateMDMCostCenterReq, options ...lark.MethodOptionFunc) (*lark.UpdateMDMCostCenterResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMUpdateMDMCostCenter()

			_, _, err := moduleCli.UpdateMDMCostCenter(ctx, &lark.UpdateMDMCostCenterReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMDeleteMDMCostCenter(func(ctx context.Context, request *lark.DeleteMDMCostCenterReq, options ...lark.MethodOptionFunc) (*lark.DeleteMDMCostCenterResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMDeleteMDMCostCenter()

			_, _, err := moduleCli.DeleteMDMCostCenter(ctx, &lark.DeleteMDMCostCenterReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMCostCenter(func(ctx context.Context, request *lark.GetMDMCostCenterReq, options ...lark.MethodOptionFunc) (*lark.GetMDMCostCenterResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMCostCenter()

			_, _, err := moduleCli.GetMDMCostCenter(ctx, &lark.GetMDMCostCenterReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMSearchMDMCostCenter(func(ctx context.Context, request *lark.SearchMDMCostCenterReq, options ...lark.MethodOptionFunc) (*lark.SearchMDMCostCenterResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMSearchMDMCostCenter()

			_, _, err := moduleCli.SearchMDMCostCenter(ctx, &lark.SearchMDMCostCenterReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMCreateMDMDepartmentCostCenterRelationship(func(ctx context.Context, request *lark.CreateMDMDepartmentCostCenterRelationshipReq, options ...lark.MethodOptionFunc) (*lark.CreateMDMDepartmentCostCenterRelationshipResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMCreateMDMDepartmentCostCenterRelationship()

			_, _, err := moduleCli.CreateMDMDepartmentCostCenterRelationship(ctx, &lark.CreateMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMUpdateMDMDepartmentCostCenterRelationship(func(ctx context.Context, request *lark.UpdateMDMDepartmentCostCenterRelationshipReq, options ...lark.MethodOptionFunc) (*lark.UpdateMDMDepartmentCostCenterRelationshipResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMUpdateMDMDepartmentCostCenterRelationship()

			_, _, err := moduleCli.UpdateMDMDepartmentCostCenterRelationship(ctx, &lark.UpdateMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMDeleteMDMDepartmentCostCenterRelationship(func(ctx context.Context, request *lark.DeleteMDMDepartmentCostCenterRelationshipReq, options ...lark.MethodOptionFunc) (*lark.DeleteMDMDepartmentCostCenterRelationshipResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMDeleteMDMDepartmentCostCenterRelationship()

			_, _, err := moduleCli.DeleteMDMDepartmentCostCenterRelationship(ctx, &lark.DeleteMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMDepartmentCostCenterRelationship(func(ctx context.Context, request *lark.GetMDMDepartmentCostCenterRelationshipReq, options ...lark.MethodOptionFunc) (*lark.GetMDMDepartmentCostCenterRelationshipResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMDepartmentCostCenterRelationship()

			_, _, err := moduleCli.GetMDMDepartmentCostCenterRelationship(ctx, &lark.GetMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMSearchMDMDepartmentCostCenterRelationship(func(ctx context.Context, request *lark.SearchMDMDepartmentCostCenterRelationshipReq, options ...lark.MethodOptionFunc) (*lark.SearchMDMDepartmentCostCenterRelationshipResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMSearchMDMDepartmentCostCenterRelationship()

			_, _, err := moduleCli.SearchMDMDepartmentCostCenterRelationship(ctx, &lark.SearchMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMCreateMDMGlAccount(func(ctx context.Context, request *lark.CreateMDMGlAccountReq, options ...lark.MethodOptionFunc) (*lark.CreateMDMGlAccountResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMCreateMDMGlAccount()

			_, _, err := moduleCli.CreateMDMGlAccount(ctx, &lark.CreateMDMGlAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMUpdateMDMGlAccount(func(ctx context.Context, request *lark.UpdateMDMGlAccountReq, options ...lark.MethodOptionFunc) (*lark.UpdateMDMGlAccountResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMUpdateMDMGlAccount()

			_, _, err := moduleCli.UpdateMDMGlAccount(ctx, &lark.UpdateMDMGlAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMDeleteMDMGlAccount(func(ctx context.Context, request *lark.DeleteMDMGlAccountReq, options ...lark.MethodOptionFunc) (*lark.DeleteMDMGlAccountResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMDeleteMDMGlAccount()

			_, _, err := moduleCli.DeleteMDMGlAccount(ctx, &lark.DeleteMDMGlAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMDepGlAccount(func(ctx context.Context, request *lark.GetMDMDepGlAccountReq, options ...lark.MethodOptionFunc) (*lark.GetMDMDepGlAccountResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMDepGlAccount()

			_, _, err := moduleCli.GetMDMDepGlAccount(ctx, &lark.GetMDMDepGlAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMSearchMDMGlAccount(func(ctx context.Context, request *lark.SearchMDMGlAccountReq, options ...lark.MethodOptionFunc) (*lark.SearchMDMGlAccountResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMSearchMDMGlAccount()

			_, _, err := moduleCli.SearchMDMGlAccount(ctx, &lark.SearchMDMGlAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMCreateMDMCompany(func(ctx context.Context, request *lark.CreateMDMCompanyReq, options ...lark.MethodOptionFunc) (*lark.CreateMDMCompanyResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMCreateMDMCompany()

			_, _, err := moduleCli.CreateMDMCompany(ctx, &lark.CreateMDMCompanyReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMUpdateMDMCompany(func(ctx context.Context, request *lark.UpdateMDMCompanyReq, options ...lark.MethodOptionFunc) (*lark.UpdateMDMCompanyResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMUpdateMDMCompany()

			_, _, err := moduleCli.UpdateMDMCompany(ctx, &lark.UpdateMDMCompanyReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMDeleteMDMCompany(func(ctx context.Context, request *lark.DeleteMDMCompanyReq, options ...lark.MethodOptionFunc) (*lark.DeleteMDMCompanyResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMDeleteMDMCompany()

			_, _, err := moduleCli.DeleteMDMCompany(ctx, &lark.DeleteMDMCompanyReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMDepCompany(func(ctx context.Context, request *lark.GetMDMDepCompanyReq, options ...lark.MethodOptionFunc) (*lark.GetMDMDepCompanyResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMDepCompany()

			_, _, err := moduleCli.GetMDMDepCompany(ctx, &lark.GetMDMDepCompanyReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMSearchMDMCompany(func(ctx context.Context, request *lark.SearchMDMCompanyReq, options ...lark.MethodOptionFunc) (*lark.SearchMDMCompanyResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMSearchMDMCompany()

			_, _, err := moduleCli.SearchMDMCompany(ctx, &lark.SearchMDMCompanyReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMCreateMDMGlAccountCompanyRelationship(func(ctx context.Context, request *lark.CreateMDMGlAccountCompanyRelationshipReq, options ...lark.MethodOptionFunc) (*lark.CreateMDMGlAccountCompanyRelationshipResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMCreateMDMGlAccountCompanyRelationship()

			_, _, err := moduleCli.CreateMDMGlAccountCompanyRelationship(ctx, &lark.CreateMDMGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMUpdateMDMGlAccountCompanyRelationship(func(ctx context.Context, request *lark.UpdateMDMGlAccountCompanyRelationshipReq, options ...lark.MethodOptionFunc) (*lark.UpdateMDMGlAccountCompanyRelationshipResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMUpdateMDMGlAccountCompanyRelationship()

			_, _, err := moduleCli.UpdateMDMGlAccountCompanyRelationship(ctx, &lark.UpdateMDMGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMDeleteMDMGlAccountCompanyRelationship(func(ctx context.Context, request *lark.DeleteMDMGlAccountCompanyRelationshipReq, options ...lark.MethodOptionFunc) (*lark.DeleteMDMGlAccountCompanyRelationshipResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMDeleteMDMGlAccountCompanyRelationship()

			_, _, err := moduleCli.DeleteMDMGlAccountCompanyRelationship(ctx, &lark.DeleteMDMGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMDepGlAccountCompanyRelationship(func(ctx context.Context, request *lark.GetMDMDepGlAccountCompanyRelationshipReq, options ...lark.MethodOptionFunc) (*lark.GetMDMDepGlAccountCompanyRelationshipResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMDepGlAccountCompanyRelationship()

			_, _, err := moduleCli.GetMDMDepGlAccountCompanyRelationship(ctx, &lark.GetMDMDepGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMSearchMDMGlAccountCompanyRelationship(func(ctx context.Context, request *lark.SearchMDMGlAccountCompanyRelationshipReq, options ...lark.MethodOptionFunc) (*lark.SearchMDMGlAccountCompanyRelationshipResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMSearchMDMGlAccountCompanyRelationship()

			_, _, err := moduleCli.SearchMDMGlAccountCompanyRelationship(ctx, &lark.SearchMDMGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMCreateMDMCompanyBankAccount(func(ctx context.Context, request *lark.CreateMDMCompanyBankAccountReq, options ...lark.MethodOptionFunc) (*lark.CreateMDMCompanyBankAccountResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMCreateMDMCompanyBankAccount()

			_, _, err := moduleCli.CreateMDMCompanyBankAccount(ctx, &lark.CreateMDMCompanyBankAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMUpdateMDMCompanyBankAccount(func(ctx context.Context, request *lark.UpdateMDMCompanyBankAccountReq, options ...lark.MethodOptionFunc) (*lark.UpdateMDMCompanyBankAccountResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMUpdateMDMCompanyBankAccount()

			_, _, err := moduleCli.UpdateMDMCompanyBankAccount(ctx, &lark.UpdateMDMCompanyBankAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMDeleteMDMCompanyBankAccount(func(ctx context.Context, request *lark.DeleteMDMCompanyBankAccountReq, options ...lark.MethodOptionFunc) (*lark.DeleteMDMCompanyBankAccountResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMDeleteMDMCompanyBankAccount()

			_, _, err := moduleCli.DeleteMDMCompanyBankAccount(ctx, &lark.DeleteMDMCompanyBankAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMDepCompanyBankAccount(func(ctx context.Context, request *lark.GetMDMDepCompanyBankAccountReq, options ...lark.MethodOptionFunc) (*lark.GetMDMDepCompanyBankAccountResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMDepCompanyBankAccount()

			_, _, err := moduleCli.GetMDMDepCompanyBankAccount(ctx, &lark.GetMDMDepCompanyBankAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMSearchMDMCompanyBankAccount(func(ctx context.Context, request *lark.SearchMDMCompanyBankAccountReq, options ...lark.MethodOptionFunc) (*lark.SearchMDMCompanyBankAccountResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMSearchMDMCompanyBankAccount()

			_, _, err := moduleCli.SearchMDMCompanyBankAccount(ctx, &lark.SearchMDMCompanyBankAccountReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMCreateMDMCompanyAsset(func(ctx context.Context, request *lark.CreateMDMCompanyAssetReq, options ...lark.MethodOptionFunc) (*lark.CreateMDMCompanyAssetResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMCreateMDMCompanyAsset()

			_, _, err := moduleCli.CreateMDMCompanyAsset(ctx, &lark.CreateMDMCompanyAssetReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMUpdateMDMCompanyAsset(func(ctx context.Context, request *lark.UpdateMDMCompanyAssetReq, options ...lark.MethodOptionFunc) (*lark.UpdateMDMCompanyAssetResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMUpdateMDMCompanyAsset()

			_, _, err := moduleCli.UpdateMDMCompanyAsset(ctx, &lark.UpdateMDMCompanyAssetReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMDeleteMDMCompanyAsset(func(ctx context.Context, request *lark.DeleteMDMCompanyAssetReq, options ...lark.MethodOptionFunc) (*lark.DeleteMDMCompanyAssetResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMDeleteMDMCompanyAsset()

			_, _, err := moduleCli.DeleteMDMCompanyAsset(ctx, &lark.DeleteMDMCompanyAssetReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMDepCompanyAsset(func(ctx context.Context, request *lark.GetMDMDepCompanyAssetReq, options ...lark.MethodOptionFunc) (*lark.GetMDMDepCompanyAssetResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMDepCompanyAsset()

			_, _, err := moduleCli.GetMDMDepCompanyAsset(ctx, &lark.GetMDMDepCompanyAssetReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMSearchMDMCompanyAsset(func(ctx context.Context, request *lark.SearchMDMCompanyAssetReq, options ...lark.MethodOptionFunc) (*lark.SearchMDMCompanyAssetResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMSearchMDMCompanyAsset()

			_, _, err := moduleCli.SearchMDMCompanyAsset(ctx, &lark.SearchMDMCompanyAssetReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

		t.Run("", func(t *testing.T) {

			cli.Mock().MockMDMGetMDMConfigList(func(ctx context.Context, request *lark.GetMDMConfigListReq, options ...lark.MethodOptionFunc) (*lark.GetMDMConfigListResp, *lark.Response, error) {
				return nil, nil, fmt.Errorf("mock-failed")
			})
			defer cli.Mock().UnMockMDMGetMDMConfigList()

			_, _, err := moduleCli.GetMDMConfigList(ctx, &lark.GetMDMConfigListReq{})
			as.NotNil(err)
			as.Equal(err.Error(), "mock-failed")
		})

	})

	t.Run("response is failed", func(t *testing.T) {
		cli := AppNoPermission.Ins()
		moduleCli := cli.MDM

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMVendorList(ctx, &lark.GetMDMVendorListReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMVendor(ctx, &lark.GetMDMVendorReq{
				VendorID: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMVendorListAll(ctx, &lark.GetMDMVendorListAllReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMLegalEntityList(ctx, &lark.GetMDMLegalEntityListReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMLegalEntity(ctx, &lark.GetMDMLegalEntityReq{
				LegalEntityID: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMLegalEntityListAll(ctx, &lark.GetMDMLegalEntityListAllReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMInternalOrder(ctx, &lark.CreateMDMInternalOrderReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMInternalOrder(ctx, &lark.UpdateMDMInternalOrderReq{
				InternalOrderUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMInternalOrder(ctx, &lark.DeleteMDMInternalOrderReq{
				InternalOrderUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMInternalOrder(ctx, &lark.GetMDMInternalOrderReq{
				InternalOrderUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMInternalOrder(ctx, &lark.SearchMDMInternalOrderReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMCostCenter(ctx, &lark.CreateMDMCostCenterReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMCostCenter(ctx, &lark.UpdateMDMCostCenterReq{
				CostCenterUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMCostCenter(ctx, &lark.DeleteMDMCostCenterReq{
				CostCenterUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMCostCenter(ctx, &lark.GetMDMCostCenterReq{
				CostCenterUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMCostCenter(ctx, &lark.SearchMDMCostCenterReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMDepartmentCostCenterRelationship(ctx, &lark.CreateMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMDepartmentCostCenterRelationship(ctx, &lark.UpdateMDMDepartmentCostCenterRelationshipReq{
				DepartmentCostCenterRelationshipUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMDepartmentCostCenterRelationship(ctx, &lark.DeleteMDMDepartmentCostCenterRelationshipReq{
				DepartmentCostCenterRelationshipUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepartmentCostCenterRelationship(ctx, &lark.GetMDMDepartmentCostCenterRelationshipReq{
				DepartmentCostCenterRelationshipUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMDepartmentCostCenterRelationship(ctx, &lark.SearchMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMGlAccount(ctx, &lark.CreateMDMGlAccountReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMGlAccount(ctx, &lark.UpdateMDMGlAccountReq{
				GlAccountUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMGlAccount(ctx, &lark.DeleteMDMGlAccountReq{
				GlAccountUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepGlAccount(ctx, &lark.GetMDMDepGlAccountReq{
				GlAccountUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMGlAccount(ctx, &lark.SearchMDMGlAccountReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMCompany(ctx, &lark.CreateMDMCompanyReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMCompany(ctx, &lark.UpdateMDMCompanyReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMCompany(ctx, &lark.DeleteMDMCompanyReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepCompany(ctx, &lark.GetMDMDepCompanyReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMCompany(ctx, &lark.SearchMDMCompanyReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMGlAccountCompanyRelationship(ctx, &lark.CreateMDMGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMGlAccountCompanyRelationship(ctx, &lark.UpdateMDMGlAccountCompanyRelationshipReq{
				GlAccountCompanyRelationshipUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMGlAccountCompanyRelationship(ctx, &lark.DeleteMDMGlAccountCompanyRelationshipReq{
				GlAccountCompanyRelationshipUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepGlAccountCompanyRelationship(ctx, &lark.GetMDMDepGlAccountCompanyRelationshipReq{
				GlAccountCompanyRelationshipUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMGlAccountCompanyRelationship(ctx, &lark.SearchMDMGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMCompanyBankAccount(ctx, &lark.CreateMDMCompanyBankAccountReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMCompanyBankAccount(ctx, &lark.UpdateMDMCompanyBankAccountReq{
				CompanyUid:            "x",
				CompanyBankAccountUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMCompanyBankAccount(ctx, &lark.DeleteMDMCompanyBankAccountReq{
				CompanyUid:            "x",
				CompanyBankAccountUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepCompanyBankAccount(ctx, &lark.GetMDMDepCompanyBankAccountReq{
				CompanyUid:            "x",
				CompanyBankAccountUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMCompanyBankAccount(ctx, &lark.SearchMDMCompanyBankAccountReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMCompanyAsset(ctx, &lark.CreateMDMCompanyAssetReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMCompanyAsset(ctx, &lark.UpdateMDMCompanyAssetReq{
				CompanyUid: "x",
				AssetUid:   "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMCompanyAsset(ctx, &lark.DeleteMDMCompanyAssetReq{
				CompanyUid: "x",
				AssetUid:   "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepCompanyAsset(ctx, &lark.GetMDMDepCompanyAssetReq{
				CompanyUid: "x",
				AssetUid:   "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMCompanyAsset(ctx, &lark.SearchMDMCompanyAssetReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMConfigList(ctx, &lark.GetMDMConfigListReq{})
			as.NotNil(err)
			as.True(lark.GetErrorCode(err) > 0, fmt.Sprintf("need get lark err, but get %s", err))
		})

	})

	t.Run("fake request is failed", func(t *testing.T) {
		cli := AppAllPermission.Ins()
		moduleCli := cli.MDM
		cli.Mock().MockRawRequest(func(ctx context.Context, req *lark.RawRequestReq, resp interface{}) (response *lark.Response, err error) {
			return nil, fmt.Errorf("fake raw request")
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMVendorList(ctx, &lark.GetMDMVendorListReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMVendor(ctx, &lark.GetMDMVendorReq{
				VendorID: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMVendorListAll(ctx, &lark.GetMDMVendorListAllReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMLegalEntityList(ctx, &lark.GetMDMLegalEntityListReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMLegalEntity(ctx, &lark.GetMDMLegalEntityReq{
				LegalEntityID: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMLegalEntityListAll(ctx, &lark.GetMDMLegalEntityListAllReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMInternalOrder(ctx, &lark.CreateMDMInternalOrderReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMInternalOrder(ctx, &lark.UpdateMDMInternalOrderReq{
				InternalOrderUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMInternalOrder(ctx, &lark.DeleteMDMInternalOrderReq{
				InternalOrderUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMInternalOrder(ctx, &lark.GetMDMInternalOrderReq{
				InternalOrderUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMInternalOrder(ctx, &lark.SearchMDMInternalOrderReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMCostCenter(ctx, &lark.CreateMDMCostCenterReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMCostCenter(ctx, &lark.UpdateMDMCostCenterReq{
				CostCenterUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMCostCenter(ctx, &lark.DeleteMDMCostCenterReq{
				CostCenterUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMCostCenter(ctx, &lark.GetMDMCostCenterReq{
				CostCenterUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMCostCenter(ctx, &lark.SearchMDMCostCenterReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMDepartmentCostCenterRelationship(ctx, &lark.CreateMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMDepartmentCostCenterRelationship(ctx, &lark.UpdateMDMDepartmentCostCenterRelationshipReq{
				DepartmentCostCenterRelationshipUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMDepartmentCostCenterRelationship(ctx, &lark.DeleteMDMDepartmentCostCenterRelationshipReq{
				DepartmentCostCenterRelationshipUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepartmentCostCenterRelationship(ctx, &lark.GetMDMDepartmentCostCenterRelationshipReq{
				DepartmentCostCenterRelationshipUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMDepartmentCostCenterRelationship(ctx, &lark.SearchMDMDepartmentCostCenterRelationshipReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMGlAccount(ctx, &lark.CreateMDMGlAccountReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMGlAccount(ctx, &lark.UpdateMDMGlAccountReq{
				GlAccountUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMGlAccount(ctx, &lark.DeleteMDMGlAccountReq{
				GlAccountUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepGlAccount(ctx, &lark.GetMDMDepGlAccountReq{
				GlAccountUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMGlAccount(ctx, &lark.SearchMDMGlAccountReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMCompany(ctx, &lark.CreateMDMCompanyReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMCompany(ctx, &lark.UpdateMDMCompanyReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMCompany(ctx, &lark.DeleteMDMCompanyReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepCompany(ctx, &lark.GetMDMDepCompanyReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMCompany(ctx, &lark.SearchMDMCompanyReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMGlAccountCompanyRelationship(ctx, &lark.CreateMDMGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMGlAccountCompanyRelationship(ctx, &lark.UpdateMDMGlAccountCompanyRelationshipReq{
				GlAccountCompanyRelationshipUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMGlAccountCompanyRelationship(ctx, &lark.DeleteMDMGlAccountCompanyRelationshipReq{
				GlAccountCompanyRelationshipUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepGlAccountCompanyRelationship(ctx, &lark.GetMDMDepGlAccountCompanyRelationshipReq{
				GlAccountCompanyRelationshipUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMGlAccountCompanyRelationship(ctx, &lark.SearchMDMGlAccountCompanyRelationshipReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMCompanyBankAccount(ctx, &lark.CreateMDMCompanyBankAccountReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMCompanyBankAccount(ctx, &lark.UpdateMDMCompanyBankAccountReq{
				CompanyUid:            "x",
				CompanyBankAccountUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMCompanyBankAccount(ctx, &lark.DeleteMDMCompanyBankAccountReq{
				CompanyUid:            "x",
				CompanyBankAccountUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepCompanyBankAccount(ctx, &lark.GetMDMDepCompanyBankAccountReq{
				CompanyUid:            "x",
				CompanyBankAccountUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMCompanyBankAccount(ctx, &lark.SearchMDMCompanyBankAccountReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.CreateMDMCompanyAsset(ctx, &lark.CreateMDMCompanyAssetReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.UpdateMDMCompanyAsset(ctx, &lark.UpdateMDMCompanyAssetReq{
				CompanyUid: "x",
				AssetUid:   "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.DeleteMDMCompanyAsset(ctx, &lark.DeleteMDMCompanyAssetReq{
				CompanyUid: "x",
				AssetUid:   "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMDepCompanyAsset(ctx, &lark.GetMDMDepCompanyAssetReq{
				CompanyUid: "x",
				AssetUid:   "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.SearchMDMCompanyAsset(ctx, &lark.SearchMDMCompanyAssetReq{
				CompanyUid: "x",
			})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

		t.Run("", func(t *testing.T) {

			_, _, err := moduleCli.GetMDMConfigList(ctx, &lark.GetMDMConfigListReq{})
			as.NotNil(err)
			as.Equal("fake raw request", err.Error())
		})

	})
}
