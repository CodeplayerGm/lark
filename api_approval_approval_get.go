// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetApproval
//
// 根据 Approval Code 获取某个审批定义的详情, 用于构造创建审批实例的请求。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uADNyUjLwQjM14CM0ITN
func (r *ApprovalService) GetApproval(ctx context.Context, request *GetApprovalReq, options ...MethodOptionFunc) (*GetApprovalResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApproval mock enable")
		return r.cli.mock.mockApprovalGetApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApproval",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/approval/get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApproval mock ApprovalGetApproval method
func (r *Mock) MockApprovalGetApproval(f func(ctx context.Context, request *GetApprovalReq, options ...MethodOptionFunc) (*GetApprovalResp, *Response, error)) {
	r.mockApprovalGetApproval = f
}

// UnMockApprovalGetApproval un-mock ApprovalGetApproval method
func (r *Mock) UnMockApprovalGetApproval() {
	r.mockApprovalGetApproval = nil
}

// GetApprovalReq ...
type GetApprovalReq struct {
	ApprovalCode string  `json:"approval_code,omitempty"` // 审批定义 Code
	Locale       *string `json:"locale,omitempty"`        // zh-CN - 中文en-US - 英文  ja-JP - 日文
}

// GetApprovalResp ...
type GetApprovalResp struct {
	ApprovalName string                   `json:"approval_name,omitempty"` // 审批名称
	Status       string                   `json:"status,omitempty"`        // 审批定义状态ACTIVE -已启用INACTIVE -已停用DELETED -已删除UNKNOWN -未知
	Form         ApprovalWidgetList       `json:"form,omitempty"`          // json 数组, 控件信息
	NodeList     []*GetApprovalRespNode   `json:"node_list,omitempty"`     // 节点信息
	Viewers      []*GetApprovalRespViewer `json:"viewers,omitempty"`       // 可见人列表
}

// GetApprovalRespNode ...
type GetApprovalRespNode struct {
	Name         string  `json:"name,omitempty"`           // 节点名称
	NeedApprover bool    `json:"need_approver,omitempty"`  // 是否发起人自选节点true - 发起审批时需要提交审批人
	NodeID       string  `json:"node_id,omitempty"`        // 节点 ID
	CustomNodeID *string `json:"custom_node_id,omitempty"` // 节点自定义 ID, 如果没有设置则不返回
	NodeType     string  `json:"node_type,omitempty"`      // 审批方式AND -会签OR - 或签SEQUENTIAL -依次审批CC_NODE -抄送节点
}

// GetApprovalRespViewer ...
type GetApprovalRespViewer struct {
	Type   string  `json:"type,omitempty"`    // 可见人类型, 分别有: TENANT: 租户内可见DEPARTMENT: 指定部门 USER: 指定用户 ROLE: 指定角色 USER_GROUP: 指定用户组NONE: 任何人都不可见
	OpenID *string `json:"open_id,omitempty"` // 在可见人类型为DEPARTMENT时, open_id为部门的open_id在可见人类型为USER时, open_id为用户的open_id在可见人类型为ROLE时, open_id为角色的open_id在可见人类型为USER_GROUP时, open_id为用户组的open_id
	UserID *string `json:"user_id,omitempty"` // 在可见人类型为USER时, 表示可见人用户id
}

// getApprovalResp ...
type getApprovalResp struct {
	Code int64            `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApprovalResp `json:"data,omitempty"` // 返回业务信息
}
