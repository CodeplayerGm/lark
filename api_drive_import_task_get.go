// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetDriveImportTask 根据创建导入任务返回的 ticket 查询导入结果。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/get
func (r *DriveService) GetDriveImportTask(ctx context.Context, request *GetDriveImportTaskReq, options ...MethodOptionFunc) (*GetDriveImportTaskResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveImportTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveImportTask mock enable")
		return r.cli.mock.mockDriveGetDriveImportTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveImportTask",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/drive/v1/import_tasks/:ticket",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveImportTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockDriveGetDriveImportTask(f func(ctx context.Context, request *GetDriveImportTaskReq, options ...MethodOptionFunc) (*GetDriveImportTaskResp, *Response, error)) {
	r.mockDriveGetDriveImportTask = f
}

func (r *Mock) UnMockDriveGetDriveImportTask() {
	r.mockDriveGetDriveImportTask = nil
}

type GetDriveImportTaskReq struct {
	Ticket string `path:"ticket" json:"-"` // 导入任务ID, 示例值："6990281865xxxxxxxx7843"
}

type getDriveImportTaskResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveImportTaskResp `json:"data,omitempty"`
}

type GetDriveImportTaskResp struct {
	Result *GetDriveImportTaskRespResult `json:"result,omitempty"` // 导入结果
}

type GetDriveImportTaskRespResult struct {
	Ticket      string   `json:"ticket,omitempty"`        // 任务ID
	Type        string   `json:"type,omitempty"`          // 导入目标云文档格式
	JobStatus   int64    `json:"job_status,omitempty"`    // 任务状态
	JobErrorMsg string   `json:"job_error_msg,omitempty"` // 任务失败原因
	Token       string   `json:"token,omitempty"`         // 导入云文档Token
	URL         string   `json:"url,omitempty"`           // 导入云文档URL
	Extra       []string `json:"extra,omitempty"`         // 任务成功后的提示信息
}
