// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetAttendanceGroup
//
// 通过考勤组 ID 获取考勤组详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//group
func (r *AttendanceService) GetAttendanceGroup(ctx context.Context, request *GetAttendanceGroupReq, options ...MethodOptionFunc) (*GetAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceGroup",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/attendance/v1/groups/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceGroup(f func(ctx context.Context, request *GetAttendanceGroupReq, options ...MethodOptionFunc) (*GetAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceGetAttendanceGroup = f
}

func (r *Mock) UnMockAttendanceGetAttendanceGroup() {
	r.mockAttendanceGetAttendanceGroup = nil
}

type GetAttendanceGroupReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 用户 ID 的类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】
	DeptType     string       `query:"dept_type" json:"-"`     // 部门 ID 的类型，可用值：【open_id（暂时只支持部门的 openid）】，示例值：“od-fcb45c28a45311afd441b8869541ece8”
	GroupID      string       `path:"group_id" json:"-"`       // 考勤组的 ID，需要从获取打卡结果的接口中获取 group_id，示例值："6919358128597097404"
}

type getAttendanceGroupResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceGroupResp `json:"data,omitempty"` // -
}

type GetAttendanceGroupResp struct {
	GroupID *GetAttendanceGroupRespGroupID `json:"group_id,omitempty"` // 考勤组的 ID，需要从获取用户打卡结果的接口中获取 groupId
}

type GetAttendanceGroupRespGroupID struct {
	GroupName              string                                                `json:"group_name,omitempty"`                 // 考勤组名称
	TimeZone               string                                                `json:"time_zone,omitempty"`                  // 时区
	BindDeptIDs            []string                                              `json:"bind_dept_ids,omitempty"`              // 绑定的部门 ID
	ExceptDeptIDs          []string                                              `json:"except_dept_ids,omitempty"`            // 排除的部门 ID
	BindUserIDs            []string                                              `json:"bind_user_ids,omitempty"`              // 绑定的用户 ID
	ExceptUserIDs          []string                                              `json:"except_user_ids,omitempty"`            // 排除的用户 ID
	GroupLeaderIDs         []string                                              `json:"group_leader_ids,omitempty"`           // 考勤负责人 ID 列表，必选字段
	AllowOutPunch          bool                                                  `json:"allow_out_punch,omitempty"`            // 是否允许外勤打卡
	AllowPcPunch           bool                                                  `json:"allow_pc_punch,omitempty"`             // 是否允许 PC 端打卡
	AllowRemedy            bool                                                  `json:"allow_remedy,omitempty"`               // 是否允许补卡
	RemedyLimit            bool                                                  `json:"remedy_limit,omitempty"`               // 是否限制补卡次数
	RemedyLimitCount       int64                                                 `json:"remedy_limit_count,omitempty"`         // 补卡次数
	RemedyPeriodType       int64                                                 `json:"remedy_period_type,omitempty"`         // 补卡次数周期类型，0：自然月，1：自定义周期
	RemedyPeriodCustomDate int64                                                 `json:"remedy_period_custom_date,omitempty"`  // 补卡自定义周期每月起始日
	RemedyDateLimit        bool                                                  `json:"remedy_date_limit,omitempty"`          // 是否限制补卡时间
	RemedyDateNum          int64                                                 `json:"remedy_date_num,omitempty"`            // 补卡时间
	ShowCumulativeTime     bool                                                  `json:"show_cumulative_time,omitempty"`       // 是否展示上班累计时长
	ShowOverTime           bool                                                  `json:"show_over_time,omitempty"`             // 是否展示加班累计时长
	HideStaffPunchTime     bool                                                  `json:"hide_staff_punch_time,omitempty"`      // 是否隐藏员工打卡具体时间
	FacePunch              bool                                                  `json:"face_punch,omitempty"`                 // 是否开启人脸识别打卡
	FacePunchCfg           int64                                                 `json:"face_punch_cfg,omitempty"`             // 人脸识别打卡规则，1：每次打卡均需人脸识别，2：疑似作弊打卡时需要人脸识别
	FaceDowngrade          bool                                                  `json:"face_downgrade,omitempty"`             // 人脸识别失败时是否允许普通拍照打卡
	ReplaceBasicPic        bool                                                  `json:"replace_basic_pic,omitempty"`          // 人脸识别失败时是否允许替换基准图片
	Machines               []*GetAttendanceGroupRespGroupIDMachine               `json:"machines,omitempty"`                   // 考勤机列表
	GpsRange               int64                                                 `json:"gps_range,omitempty"`                  // GPS 打卡的有效范围（不建议使用）
	Locations              []*GetAttendanceGroupRespGroupIDLocation              `json:"locations,omitempty"`                  // 地址列表
	GroupType              int64                                                 `json:"group_type,omitempty"`                 // 考勤类型，0：固定班制，2：排班制，3：自由班制
	PunchDayShiftIDs       []string                                              `json:"punch_day_shift_ids,omitempty"`        // 固定班制必须填
	FreePunchCfg           *GetAttendanceGroupRespGroupIDFreePunchCfg            `json:"free_punch_cfg,omitempty"`             // 配置自由班制
	CalendarID             int64                                                 `json:"calendar_id,omitempty"`                // 国家法定节假日历 ID，0：不根据国家法定节假日历排休，1：中国，2：美国，3：日本，4：印度，5：新加坡，默认为 1
	NeedPunchSpecialDays   []*GetAttendanceGroupRespGroupIDNeedPunchSpecialDay   `json:"need_punch_special_days,omitempty"`    // 必须打卡的特殊日期
	NoNeedPunchSpecialDays []*GetAttendanceGroupRespGroupIDNoNeedPunchSpecialDay `json:"no_need_punch_special_days,omitempty"` // 无需打卡的特殊日期
	WorkDayNoPunchAsLack   bool                                                  `json:"work_day_no_punch_as_lack,omitempty"`  // 自由班制下，工作日不打卡是否记为缺卡
}

type GetAttendanceGroupRespGroupIDMachine struct {
	MachineSn   string `json:"machine_sn,omitempty"`   // 考勤机序列号
	MachineName string `json:"machine_name,omitempty"` // 考勤机名称
}

type GetAttendanceGroupRespGroupIDLocation struct {
	LocationID   string  `json:"location_id,omitempty"`   // 地址 ID
	LocationName string  `json:"location_name,omitempty"` // 地址名称
	LocationType int64   `json:"location_type,omitempty"` // 地址类型，1：GPS，2：Wifi，8：IP
	Latitude     float64 `json:"latitude,omitempty"`      // 地址纬度
	Longitude    float64 `json:"longitude,omitempty"`     // 地址经度
	Ssid         string  `json:"ssid,omitempty"`          // Wi-Fi 名称
	Bssid        string  `json:"bssid,omitempty"`         // Wi-Fi 的 MAC 地址
	MapType      int64   `json:"map_type,omitempty"`      // 地图类型，1：高德，2：谷歌
	Address      string  `json:"address,omitempty"`       // 地址名称
	Ip           string  `json:"ip,omitempty"`            // IP 地址
	Feature      string  `json:"feature,omitempty"`       // 额外信息，例如运营商信息
	GpsRange     int64   `json:"gps_range,omitempty"`     // GPS 打卡的有效范围
}

type GetAttendanceGroupRespGroupIDFreePunchCfg struct {
	FreeStartTime        string `json:"free_start_time,omitempty"`           // 自由班制的打卡开始时间
	FreeEndTime          string `json:"free_end_time,omitempty"`             // 自由班制的打卡结束时间
	PunchDay             int64  `json:"punch_day,omitempty"`                 // 打卡时间，格式 1111100
	WorkDayNoPunchAsLack bool   `json:"work_day_no_punch_as_lack,omitempty"` // 工作日不打卡是否记为缺卡
}

type GetAttendanceGroupRespGroupIDNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期，格式 20190101
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

type GetAttendanceGroupRespGroupIDNoNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期，格式 20190101
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}
