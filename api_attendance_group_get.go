// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetAttendanceGroup 通过考勤组 ID 获取考勤组详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/get
func (r *AttendanceService) GetAttendanceGroup(ctx context.Context, request *GetAttendanceGroupReq, options ...MethodOptionFunc) (*GetAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceGroup",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceGroup mock AttendanceGetAttendanceGroup method
func (r *Mock) MockAttendanceGetAttendanceGroup(f func(ctx context.Context, request *GetAttendanceGroupReq, options ...MethodOptionFunc) (*GetAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceGetAttendanceGroup = f
}

// UnMockAttendanceGetAttendanceGroup un-mock AttendanceGetAttendanceGroup method
func (r *Mock) UnMockAttendanceGetAttendanceGroup() {
	r.mockAttendanceGetAttendanceGroup = nil
}

// GetAttendanceGroupReq ...
type GetAttendanceGroupReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 用户 ID 的类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employeeId, `employee_no`：员工工号
	DeptType     string       `query:"dept_type" json:"-"`     // 部门 ID 的类型, 示例值："od-fcb45c28a45311afd441b8869541ece8", 可选值有: `open_id`：暂时只支持部门的 openid
	GroupID      string       `path:"group_id" json:"-"`       // 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query), 示例值："6919358128597097404"
}

// getAttendanceGroupResp ...
type getAttendanceGroupResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceGroupResp `json:"data,omitempty"`
}

// GetAttendanceGroupResp ...
type GetAttendanceGroupResp struct {
	GroupID                string                                         `json:"group_id,omitempty"`                   // 考勤组 ID（仅修改时提供）, 需要从“获取打卡结果”的接口中获取 groupId
	GroupName              string                                         `json:"group_name,omitempty"`                 // 考勤组名称
	TimeZone               string                                         `json:"time_zone,omitempty"`                  // 时区
	BindDeptIDs            []string                                       `json:"bind_dept_ids,omitempty"`              // 绑定的部门 ID
	ExceptDeptIDs          []string                                       `json:"except_dept_ids,omitempty"`            // 排除的部门 ID
	BindUserIDs            []string                                       `json:"bind_user_ids,omitempty"`              // 绑定的用户 ID
	ExceptUserIDs          []string                                       `json:"except_user_ids,omitempty"`            // 排除的用户 ID
	GroupLeaderIDs         []string                                       `json:"group_leader_ids,omitempty"`           // 考勤负责人 ID 列表，必选字段
	AllowOutPunch          bool                                           `json:"allow_out_punch,omitempty"`            // 是否允许外勤打卡
	AllowPcPunch           bool                                           `json:"allow_pc_punch,omitempty"`             // 是否允许 PC 端打卡
	AllowRemedy            bool                                           `json:"allow_remedy,omitempty"`               // 是否限制补卡
	RemedyLimit            bool                                           `json:"remedy_limit,omitempty"`               // 是否限制补卡次数
	RemedyLimitCount       int64                                          `json:"remedy_limit_count,omitempty"`         // 补卡次数
	RemedyDateLimit        bool                                           `json:"remedy_date_limit,omitempty"`          // 是否限制补卡时间
	RemedyDateNum          int64                                          `json:"remedy_date_num,omitempty"`            // 补卡时间，几天内补卡
	ShowCumulativeTime     bool                                           `json:"show_cumulative_time,omitempty"`       // 是否展示累计时长
	ShowOverTime           bool                                           `json:"show_over_time,omitempty"`             // 是否展示加班时长
	HideStaffPunchTime     bool                                           `json:"hide_staff_punch_time,omitempty"`      // 是否隐藏员工打卡详情
	FacePunch              bool                                           `json:"face_punch,omitempty"`                 // 是否开启人脸识别打卡
	FacePunchCfg           int64                                          `json:"face_punch_cfg,omitempty"`             // 人脸识别打卡规则，1：每次打卡均需人脸识别，2：疑似作弊打卡时需要人脸识别
	FaceDowngrade          bool                                           `json:"face_downgrade,omitempty"`             // 人脸识别失败时是否允许普通拍照打卡
	ReplaceBasicPic        bool                                           `json:"replace_basic_pic,omitempty"`          // 人脸识别失败时是否允许替换基准图片
	Machines               []*GetAttendanceGroupRespMachine               `json:"machines,omitempty"`                   // 考勤机列表
	GpsRange               int64                                          `json:"gps_range,omitempty"`                  // GPS 打卡的有效范围（不建议使用）
	Locations              []*GetAttendanceGroupRespLocation              `json:"locations,omitempty"`                  // 地址列表
	GroupType              int64                                          `json:"group_type,omitempty"`                 // 考勤类型，0：固定班制，2：排班制, 3：自由班制
	PunchDayShiftIDs       []string                                       `json:"punch_day_shift_ids,omitempty"`        // 固定班制必须填
	FreePunchCfg           *GetAttendanceGroupRespFreePunchCfg            `json:"free_punch_cfg,omitempty"`             // 配置自由班制
	CalendarID             int64                                          `json:"calendar_id,omitempty"`                // 国家日历  ID，0：不根据国家日历排休，1：中国大陆，2：美国，3：日本，4：印度，5：新加坡，默认 1
	NeedPunchSpecialDays   []*GetAttendanceGroupRespNeedPunchSpecialDay   `json:"need_punch_special_days,omitempty"`    // 必须打卡的特殊日期
	NoNeedPunchSpecialDays []*GetAttendanceGroupRespNoNeedPunchSpecialDay `json:"no_need_punch_special_days,omitempty"` // 无需打卡的特殊日期
	WorkDayNoPunchAsLack   bool                                           `json:"work_day_no_punch_as_lack,omitempty"`  // 自由班制下工作日不打卡是否记为缺卡
	EffectNow              bool                                           `json:"effect_now,omitempty"`                 // 是否立即生效，默认 false
	RemedyPeriodType       int64                                          `json:"remedy_period_type,omitempty"`         // 补卡周期类型
	RemedyPeriodCustomDate int64                                          `json:"remedy_period_custom_date,omitempty"`  // 补卡自定义周期起始日期
	PunchType              int64                                          `json:"punch_type,omitempty"`                 // 打卡类型，位运算。1：GPS 打卡，2：Wi-Fi 打卡，4：考勤机打卡，8：IP 打卡
}

// GetAttendanceGroupRespMachine ...
type GetAttendanceGroupRespMachine struct {
	MachineSn   string `json:"machine_sn,omitempty"`   // 考勤机序列号
	MachineName string `json:"machine_name,omitempty"` // 考勤机名称
}

// GetAttendanceGroupRespLocation ...
type GetAttendanceGroupRespLocation struct {
	LocationID   string  `json:"location_id,omitempty"`   // 地址 ID
	LocationName string  `json:"location_name,omitempty"` // 地址名称
	LocationType int64   `json:"location_type,omitempty"` // 地址类型，1：GPS，2：Wi-Fi，8：IP
	Latitude     float64 `json:"latitude,omitempty"`      // 地址纬度
	Longitude    float64 `json:"longitude,omitempty"`     // 地址经度
	Ssid         string  `json:"ssid,omitempty"`          // Wi-Fi 名称
	Bssid        string  `json:"bssid,omitempty"`         // Wi-Fi 的 MAC 地址
	MapType      int64   `json:"map_type,omitempty"`      // 地图类型，1：高德, 2：谷歌
	Address      string  `json:"address,omitempty"`       // 地址名称
	Ip           string  `json:"ip,omitempty"`            // IP 地址
	Feature      string  `json:"feature,omitempty"`       // 额外信息，例如：运营商信息
	GpsRange     int64   `json:"gps_range,omitempty"`     // GPS 打卡的有效范围
}

// GetAttendanceGroupRespFreePunchCfg ...
type GetAttendanceGroupRespFreePunchCfg struct {
	FreeStartTime        string `json:"free_start_time,omitempty"`           // 自由班制打卡开始时间
	FreeEndTime          string `json:"free_end_time,omitempty"`             // 自由班制打卡结束时间
	PunchDay             int64  `json:"punch_day,omitempty"`                 // 打卡的时间，为 7 位数字，每一位依次代表周一到周日，0 为不上班，1 为上班
	WorkDayNoPunchAsLack bool   `json:"work_day_no_punch_as_lack,omitempty"` // 工作日不打卡是否记为缺卡
}

// GetAttendanceGroupRespNeedPunchSpecialDay ...
type GetAttendanceGroupRespNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

// GetAttendanceGroupRespNoNeedPunchSpecialDay ...
type GetAttendanceGroupRespNoNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}
