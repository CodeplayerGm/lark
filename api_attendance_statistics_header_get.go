// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetAttendanceStatisticsHeader
//
// 查询日度统计或月度统计的统计表头。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/query-statistics-header
func (r *AttendanceService) GetAttendanceStatisticsHeader(ctx context.Context, request *GetAttendanceStatisticsHeaderReq, options ...MethodOptionFunc) (*GetAttendanceStatisticsHeaderResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceStatisticsHeader != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceStatisticsHeader mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceStatisticsHeader(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceStatisticsHeader",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_fields/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceStatisticsHeaderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceStatisticsHeader(f func(ctx context.Context, request *GetAttendanceStatisticsHeaderReq, options ...MethodOptionFunc) (*GetAttendanceStatisticsHeaderResp, *Response, error)) {
	r.mockAttendanceGetAttendanceStatisticsHeader = f
}

func (r *Mock) UnMockAttendanceGetAttendanceStatisticsHeader() {
	r.mockAttendanceGetAttendanceStatisticsHeader = nil
}

type GetAttendanceStatisticsHeaderReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 用户 ID 类型, 可选值有: `employee_id`, `employee_no`
	Locale       string       `json:"locale,omitempty"`        // 语言类型, 可选值有: `en`：英文, `ja`：日文, `zh`：中文
	StatsType    string       `json:"stats_type,omitempty"`    // 统计类型,      , **可选值有**：     , `daily`：日度统计, `month`：月度统计
	StartDate    int64        `json:"start_date,omitempty"`    // 开始时间, 示例值：20210316,      ,      （时间间隔不超过 40 天）
	EndDate      int64        `json:"end_date,omitempty"`      // 结束时间, 示例值：20210323
}

type getAttendanceStatisticsHeaderResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceStatisticsHeaderResp `json:"data,omitempty"`
}

type GetAttendanceStatisticsHeaderResp struct {
	UserStatsField *GetAttendanceStatisticsHeaderRespUserStatsField `json:"user_stats_field,omitempty"` // 统计数据表头
}

type GetAttendanceStatisticsHeaderRespUserStatsField struct {
	StatsType string                                                  `json:"stats_type,omitempty"` // 统计类型,    , 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                                  `json:"user_id,omitempty"`    // 用户 ID
	Fields    []*GetAttendanceStatisticsHeaderRespUserStatsFieldField `json:"fields,omitempty"`     // 字段列表
}

type GetAttendanceStatisticsHeaderRespUserStatsFieldField struct {
	Code        string                                                            `json:"code,omitempty"`         // 字段编号
	Title       string                                                            `json:"title,omitempty"`        // 字段标题
	ChildFields []*GetAttendanceStatisticsHeaderRespUserStatsFieldFieldChildField `json:"child_fields,omitempty"` // 子字段列表
}

type GetAttendanceStatisticsHeaderRespUserStatsFieldFieldChildField struct {
	Code     string `json:"code,omitempty"`      // 字段编号
	Title    string `json:"title,omitempty"`     // 字段名称
	TimeUnit string `json:"time_unit,omitempty"` // 时间类型
}
