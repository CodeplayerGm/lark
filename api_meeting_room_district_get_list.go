// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetMeetingRoomDistrictList 新建建筑时需要选择所处国家/地区, 该接口用于获得系统预先提供的可供选择的城市列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUTNwYjL1UDM24SN1AjN
func (r *MeetingRoomService) GetMeetingRoomDistrictList(ctx context.Context, request *GetMeetingRoomDistrictListReq, options ...MethodOptionFunc) (*GetMeetingRoomDistrictListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomDistrictList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomDistrictList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomDistrictList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomDistrictList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/district/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomDistrictListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomDistrictList mock MeetingRoomGetMeetingRoomDistrictList method
func (r *Mock) MockMeetingRoomGetMeetingRoomDistrictList(f func(ctx context.Context, request *GetMeetingRoomDistrictListReq, options ...MethodOptionFunc) (*GetMeetingRoomDistrictListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomDistrictList = f
}

// UnMockMeetingRoomGetMeetingRoomDistrictList un-mock MeetingRoomGetMeetingRoomDistrictList method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomDistrictList() {
	r.mockMeetingRoomGetMeetingRoomDistrictList = nil
}

// GetMeetingRoomDistrictListReq ...
type GetMeetingRoomDistrictListReq struct {
	CountryID int64 `query:"country_id" json:"-"` // 国家地区ID
}

// GetMeetingRoomDistrictListResp ...
type GetMeetingRoomDistrictListResp struct {
	Districts []*GetMeetingRoomDistrictListRespDistrict `json:"districts,omitempty"` // 城市列表
}

// GetMeetingRoomDistrictListRespDistrict ...
type GetMeetingRoomDistrictListRespDistrict struct {
	DistrictID string `json:"district_id,omitempty"` // 城市ID
	Name       string `json:"name,omitempty"`        // 城市名称
}

// getMeetingRoomDistrictListResp ...
type getMeetingRoomDistrictListResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码, 非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述, "success" 表示成功, 其他为错误提示信息
	Data *GetMeetingRoomDistrictListResp `json:"data,omitempty"` // 返回业务信息
}
