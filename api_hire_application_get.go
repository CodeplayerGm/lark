// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetHireApplication 根据投递 ID 获取单个投递信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get
func (r *HireService) GetHireApplication(ctx context.Context, request *GetHireApplicationReq, options ...MethodOptionFunc) (*GetHireApplicationResp, *Response, error) {
	if r.cli.mock.mockHireGetHireApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireApplication mock enable")
		return r.cli.mock.mockHireGetHireApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireApplication",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/hire/v1/applications/:application_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireApplication(f func(ctx context.Context, request *GetHireApplicationReq, options ...MethodOptionFunc) (*GetHireApplicationResp, *Response, error)) {
	r.mockHireGetHireApplication = f
}

func (r *Mock) UnMockHireGetHireApplication() {
	r.mockHireGetHireApplication = nil
}

type GetHireApplicationReq struct {
	ApplicationID string `path:"application_id" json:"-"` // 投递ID, 示例值："212121"
}

type getHireApplicationResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetHireApplicationResp `json:"data,omitempty"`
}

type GetHireApplicationResp struct {
	Application *GetHireApplicationRespApplication `json:"application,omitempty"` // 投递数据
}

type GetHireApplicationRespApplication struct {
	ID               string                                  `json:"id,omitempty"`                 // 投递id
	JobID            string                                  `json:"job_id,omitempty"`             // 投递的职位id
	TalentID         string                                  `json:"talent_id,omitempty"`          // 候选人id
	ResumeResourceID string                                  `json:"resume_resource_id,omitempty"` // 简历来源id
	Stage            *GetHireApplicationRespApplicationStage `json:"stage,omitempty"`              // 投递处于的阶段
	ActiveStatus     int64                                   `json:"active_status,omitempty"`      // 活跃状态, 可选值有: `1`：活跃, `2`：非活跃, `3`：全部
}

type GetHireApplicationRespApplicationStage struct {
	ID     string `json:"id,omitempty"`      // 阶段id
	ZhName string `json:"zh_name,omitempty"` // 阶段中文名字
	EnName string `json:"en_name,omitempty"` // 英文名
	Type   int64  `json:"type,omitempty"`    // 阶段类型, 可选值有: `1`：筛选型, `2`：评估型, `3`：笔试型, `4`：面试型, `5`：Offer型, `6`：待入职, `7`：已入职, `8`：其它类型, `255`：系统默认
}
