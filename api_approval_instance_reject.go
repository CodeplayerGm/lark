// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// RejectApprovalInstance 对于单个审批任务进行拒绝操作。拒绝后审批流程结束。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQDNyUjL0QjM14CN0ITN
func (r *ApprovalService) RejectApprovalInstance(ctx context.Context, request *RejectApprovalInstanceReq, options ...MethodOptionFunc) (*RejectApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalRejectApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#RejectApprovalInstance mock enable")
		return r.cli.mock.mockApprovalRejectApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "RejectApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/reject",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(rejectApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalRejectApprovalInstance mock ApprovalRejectApprovalInstance method
func (r *Mock) MockApprovalRejectApprovalInstance(f func(ctx context.Context, request *RejectApprovalInstanceReq, options ...MethodOptionFunc) (*RejectApprovalInstanceResp, *Response, error)) {
	r.mockApprovalRejectApprovalInstance = f
}

// UnMockApprovalRejectApprovalInstance un-mock ApprovalRejectApprovalInstance method
func (r *Mock) UnMockApprovalRejectApprovalInstance() {
	r.mockApprovalRejectApprovalInstance = nil
}

// RejectApprovalInstanceReq ...
type RejectApprovalInstanceReq struct {
	ApprovalCode string  `json:"approval_code,omitempty"` // 审批定义 Code
	InstanceCode string  `json:"instance_code,omitempty"` // 审批实例 Code
	OpenID       string  `json:"open_id,omitempty"`       // 用户open_id, 如果没有user_id, 必须要有open_id
	UserID       string  `json:"user_id,omitempty"`       // 操作用户
	TaskID       string  `json:"task_id,omitempty"`       // 任务 ID 审批实例详情task_list中id, 详情请参考[](https://open.feishu.cn/document/ukTMukTMukTM/uEDNyUjLxQjM14SM0ITN)
	Comment      *string `json:"comment,omitempty"`       // 意见
}

// RejectApprovalInstanceResp ...
type RejectApprovalInstanceResp struct {
}

// rejectApprovalInstanceResp ...
type rejectApprovalInstanceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码, 非0表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *RejectApprovalInstanceResp `json:"data,omitempty"`
}
