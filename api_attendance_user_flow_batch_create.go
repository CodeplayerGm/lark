// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// BatchCreateAttendanceUserFlow
//
// 导入授权内员工的打卡流水记录。导入后，会根据员工所在的考勤组班次规则，计算最终的打卡状态与结果。
// 适用于考勤机数据导入等场景。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//ImportAttendanceFlowRecords
func (r *AttendanceService) BatchCreateAttendanceUserFlow(ctx context.Context, request *BatchCreateAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchCreateAttendanceUserFlowResp, *Response, error) {
	if r.cli.mock.mockAttendanceBatchCreateAttendanceUserFlow != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#BatchCreateAttendanceUserFlow mock enable")
		return r.cli.mock.mockAttendanceBatchCreateAttendanceUserFlow(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "BatchCreateAttendanceUserFlow",
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/attendance/v1/user_flows/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchCreateAttendanceUserFlowResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceBatchCreateAttendanceUserFlow(f func(ctx context.Context, request *BatchCreateAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchCreateAttendanceUserFlowResp, *Response, error)) {
	r.mockAttendanceBatchCreateAttendanceUserFlow = f
}

func (r *Mock) UnMockAttendanceBatchCreateAttendanceUserFlow() {
	r.mockAttendanceBatchCreateAttendanceUserFlow = nil
}

type BatchCreateAttendanceUserFlowReq struct {
	EmployeeType EmployeeType                                  `query:"employee_type" json:"-"` // 请求体中的 user_id 和 creator_id 的员工工号类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值："employee_id"
	FlowRecords  []*BatchCreateAttendanceUserFlowReqFlowRecord `json:"flow_records,omitempty"`  // 打卡流水记录列表
}

type BatchCreateAttendanceUserFlowReqFlowRecord struct {
	UserID       string `json:"user_id,omitempty"`       // 员工工号
	CreatorID    string `json:"creator_id,omitempty"`    // 打卡记录创建者的工号
	LocationName string `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string `json:"comment,omitempty"`       // 打卡备注
}

type batchCreateAttendanceUserFlowResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *BatchCreateAttendanceUserFlowResp `json:"data,omitempty"` // -
}

type BatchCreateAttendanceUserFlowResp struct {
	FlowRecords []*BatchCreateAttendanceUserFlowRespFlowRecord `json:"flow_records,omitempty"` // 打卡流水记录列表
}

type BatchCreateAttendanceUserFlowRespFlowRecord struct {
	UserID       string `json:"user_id,omitempty"`       // 员工工号
	CreatorID    string `json:"creator_id,omitempty"`    // 打卡记录创建者的 employee_no
	LocationName string `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string `json:"comment,omitempty"`       // 打卡备注
}
