// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateCoreHrContract 创建合同。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/create
// new doc: https://open.feishu.cn/document/server-docs/corehr-v1/contract/create
func (r *CoreHrService) CreateCoreHrContract(ctx context.Context, request *CreateCoreHrContractReq, options ...MethodOptionFunc) (*CreateCoreHrContractResp, *Response, error) {
	if r.cli.mock.mockCoreHrCreateCoreHrContract != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] CoreHr#CreateCoreHrContract mock enable")
		return r.cli.mock.mockCoreHrCreateCoreHrContract(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "CoreHr",
		API:                   "CreateCoreHrContract",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/corehr/v1/contracts",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createCoreHrContractResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCoreHrCreateCoreHrContract mock CoreHrCreateCoreHrContract method
func (r *Mock) MockCoreHrCreateCoreHrContract(f func(ctx context.Context, request *CreateCoreHrContractReq, options ...MethodOptionFunc) (*CreateCoreHrContractResp, *Response, error)) {
	r.mockCoreHrCreateCoreHrContract = f
}

// UnMockCoreHrCreateCoreHrContract un-mock CoreHrCreateCoreHrContract method
func (r *Mock) UnMockCoreHrCreateCoreHrContract() {
	r.mockCoreHrCreateCoreHrContract = nil
}

// CreateCoreHrContractReq ...
type CreateCoreHrContractReq struct {
	ClientToken         *string                               `query:"client_token" json:"-"`           // 根据client_token是否一致来判断是否为同一请求, 示例值: 12454646
	EffectiveTime       string                                `json:"effective_time,omitempty"`         // 合同开始日期, 示例值: "2050-01-01 00:00:00"
	ExpirationTime      *string                               `json:"expiration_time,omitempty"`        // 实际结束日期, 示例值: "9999-12-31 23:59:59"
	EmploymentID        string                                `json:"employment_id,omitempty"`          // 雇佣 ID, 详细信息可通过[【搜索员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/search)接口查询获得, 示例值: "6893013238632416776"
	ContractType        *CreateCoreHrContractReqContractType  `json:"contract_type,omitempty"`          // 合同类型, 枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询, 查询参数如下: object_api_name = "contract", custom_api_name = "contract_type"
	FirstPartyCompanyID string                                `json:"first_party_company_id,omitempty"` // 甲方, 引用Company的ID, 详细信息可通过[【查询单个公司】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/get)接口查询获得, 示例值: "6892686614112241165"
	PersonID            *string                               `json:"person_id,omitempty"`              // Person ID, 详细信息可通过[【查询单个个人信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/get)接口查询获得, 示例值: "151515151"
	CustomFields        []*CreateCoreHrContractReqCustomField `json:"custom_fields,omitempty"`          // 自定义字段
	DurationType        *CreateCoreHrContractReqDurationType  `json:"duration_type,omitempty"`          // 期限类型, 枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询, 查询参数如下: object_api_name = "contract", custom_api_name = "duration_type", 示例值: fixed_term
	ContractEndDate     *string                               `json:"contract_end_date,omitempty"`      // 合同结束日期, 示例值: "2006-01-02"
	ContractNumber      *string                               `json:"contract_number,omitempty"`        // 合同编号, 示例值: "6919737965274990093"
	SigningType         *CreateCoreHrContractReqSigningType   `json:"signing_type,omitempty"`           // 签订类型, 枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询, 查询参数如下: object_api_name = "contract", custom_api_name = "signing_type"
}

// CreateCoreHrContractReqContractType ...
type CreateCoreHrContractReqContractType struct {
	EnumName string `json:"enum_name,omitempty"` // 枚举值, 示例值: "type_1"
}

// CreateCoreHrContractReqCustomField ...
type CreateCoreHrContractReqCustomField struct {
	FieldName string `json:"field_name,omitempty"` // 字段名, 示例值: "name"
	Value     string `json:"value,omitempty"`      // 字段值, 是json转义后的字符串, 根据元数据定义不同, 字段格式不同(如123, 123.23, "true", [\"id1\", \"id2\"], "2006-01-02 15:04:05"), 示例值: "\"Sandy\""
}

// CreateCoreHrContractReqDurationType ...
type CreateCoreHrContractReqDurationType struct {
	EnumName string `json:"enum_name,omitempty"` // 枚举值, 示例值: "type_1"
}

// CreateCoreHrContractReqSigningType ...
type CreateCoreHrContractReqSigningType struct {
	EnumName string `json:"enum_name,omitempty"` // 枚举值, 示例值: "type_1"
}

// CreateCoreHrContractResp ...
type CreateCoreHrContractResp struct {
	Contract *CreateCoreHrContractRespContract `json:"contract,omitempty"` // 创建成功的合同信息
}

// CreateCoreHrContractRespContract ...
type CreateCoreHrContractRespContract struct {
	ID                  string                                         `json:"id,omitempty"`                     // 合同ID
	EffectiveTime       string                                         `json:"effective_time,omitempty"`         // 合同开始日期
	ExpirationTime      string                                         `json:"expiration_time,omitempty"`        // 实际结束日期
	EmploymentID        string                                         `json:"employment_id,omitempty"`          // 雇佣 ID, 详细信息可通过[【搜索员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/search)接口查询获得
	ContractType        *CreateCoreHrContractRespContractContractType  `json:"contract_type,omitempty"`          // 合同类型, 枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询, 查询参数如下: object_api_name = "contract", custom_api_name = "contract_type"
	FirstPartyCompanyID string                                         `json:"first_party_company_id,omitempty"` // 甲方, 引用Company的ID, 详细信息可通过[【查询单个公司】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/get)接口查询获得
	PersonID            string                                         `json:"person_id,omitempty"`              // Person ID, 详细信息可通过[【查询单个个人信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/get)接口查询获得
	CustomFields        []*CreateCoreHrContractRespContractCustomField `json:"custom_fields,omitempty"`          // 自定义字段
	DurationType        *CreateCoreHrContractRespContractDurationType  `json:"duration_type,omitempty"`          // 期限类型, 枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询, 查询参数如下: object_api_name = "contract", custom_api_name = "duration_type"
	ContractEndDate     string                                         `json:"contract_end_date,omitempty"`      // 合同结束日期
	ContractNumber      string                                         `json:"contract_number,omitempty"`        // 合同编号
	SigningType         *CreateCoreHrContractRespContractSigningType   `json:"signing_type,omitempty"`           // 签订类型, 枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询, 查询参数如下: object_api_name = "contract", custom_api_name = "signing_type"
}

// CreateCoreHrContractRespContractContractType ...
type CreateCoreHrContractRespContractContractType struct {
	EnumName string                                                 `json:"enum_name,omitempty"` // 枚举值
	Display  []*CreateCoreHrContractRespContractContractTypeDisplay `json:"display,omitempty"`   // 枚举多语展示
}

// CreateCoreHrContractRespContractContractTypeDisplay ...
type CreateCoreHrContractRespContractContractTypeDisplay struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言
	Value string `json:"value,omitempty"` // 名称信息的内容
}

// CreateCoreHrContractRespContractCustomField ...
type CreateCoreHrContractRespContractCustomField struct {
	FieldName string `json:"field_name,omitempty"` // 字段名
	Value     string `json:"value,omitempty"`      // 字段值, 是json转义后的字符串, 根据元数据定义不同, 字段格式不同(如123, 123.23, "true", [\"id1\", \"id2\"], "2006-01-02 15:04:05")
}

// CreateCoreHrContractRespContractDurationType ...
type CreateCoreHrContractRespContractDurationType struct {
	EnumName string                                                 `json:"enum_name,omitempty"` // 枚举值
	Display  []*CreateCoreHrContractRespContractDurationTypeDisplay `json:"display,omitempty"`   // 枚举多语展示
}

// CreateCoreHrContractRespContractDurationTypeDisplay ...
type CreateCoreHrContractRespContractDurationTypeDisplay struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言
	Value string `json:"value,omitempty"` // 名称信息的内容
}

// CreateCoreHrContractRespContractSigningType ...
type CreateCoreHrContractRespContractSigningType struct {
	EnumName string                                                `json:"enum_name,omitempty"` // 枚举值
	Display  []*CreateCoreHrContractRespContractSigningTypeDisplay `json:"display,omitempty"`   // 枚举多语展示
}

// CreateCoreHrContractRespContractSigningTypeDisplay ...
type CreateCoreHrContractRespContractSigningTypeDisplay struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言
	Value string `json:"value,omitempty"` // 名称信息的内容
}

// createCoreHrContractResp ...
type createCoreHrContractResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *CreateCoreHrContractResp `json:"data,omitempty"`
}
