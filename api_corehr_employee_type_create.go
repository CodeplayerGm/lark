// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateCoreHrEmployeeType 创建人员类型。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/create
// new doc: https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/employee_type/create
func (r *CoreHrService) CreateCoreHrEmployeeType(ctx context.Context, request *CreateCoreHrEmployeeTypeReq, options ...MethodOptionFunc) (*CreateCoreHrEmployeeTypeResp, *Response, error) {
	if r.cli.mock.mockCoreHrCreateCoreHrEmployeeType != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] CoreHr#CreateCoreHrEmployeeType mock enable")
		return r.cli.mock.mockCoreHrCreateCoreHrEmployeeType(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "CoreHr",
		API:                   "CreateCoreHrEmployeeType",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/corehr/v1/employee_types",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createCoreHrEmployeeTypeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCoreHrCreateCoreHrEmployeeType mock CoreHrCreateCoreHrEmployeeType method
func (r *Mock) MockCoreHrCreateCoreHrEmployeeType(f func(ctx context.Context, request *CreateCoreHrEmployeeTypeReq, options ...MethodOptionFunc) (*CreateCoreHrEmployeeTypeResp, *Response, error)) {
	r.mockCoreHrCreateCoreHrEmployeeType = f
}

// UnMockCoreHrCreateCoreHrEmployeeType un-mock CoreHrCreateCoreHrEmployeeType method
func (r *Mock) UnMockCoreHrCreateCoreHrEmployeeType() {
	r.mockCoreHrCreateCoreHrEmployeeType = nil
}

// CreateCoreHrEmployeeTypeReq ...
type CreateCoreHrEmployeeTypeReq struct {
	ClientToken         *string                                   `query:"client_token" json:"-"`          // 根据client_token是否一致来判断是否为同一请求, 示例值: 12454646
	Name                []*CreateCoreHrEmployeeTypeReqName        `json:"name,omitempty"`                  // 名称
	DefaultEmployeeType bool                                      `json:"default_employee_type,omitempty"` // 是否为默认人员类型, 每个租户只能定义一个默认人员类型, 示例值: true
	Active              bool                                      `json:"active,omitempty"`                // 启用, 示例值: true
	Code                *string                                   `json:"code,omitempty"`                  // 编码, 示例值: "1245"
	CustomFields        []*CreateCoreHrEmployeeTypeReqCustomField `json:"custom_fields,omitempty"`         // 自定义字段
}

// CreateCoreHrEmployeeTypeReqCustomField ...
type CreateCoreHrEmployeeTypeReqCustomField struct {
	FieldName string `json:"field_name,omitempty"` // 字段名, 示例值: "name"
	Value     string `json:"value,omitempty"`      // 字段值, 是json转义后的字符串, 根据元数据定义不同, 字段格式不同(如123, 123.23, "true", [\"id1\", \"id2\"], "2006-01-02 15:04:05"), 示例值: "\"Sandy\""
}

// CreateCoreHrEmployeeTypeReqName ...
type CreateCoreHrEmployeeTypeReqName struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言, 示例值: "zh-CN"
	Value string `json:"value,omitempty"` // 名称信息的内容, 示例值: "张三"
}

// CreateCoreHrEmployeeTypeResp ...
type CreateCoreHrEmployeeTypeResp struct {
	EmployeeType *CreateCoreHrEmployeeTypeRespEmployeeType `json:"employee_type,omitempty"` // 创建成功的人员类型信息
}

// CreateCoreHrEmployeeTypeRespEmployeeType ...
type CreateCoreHrEmployeeTypeRespEmployeeType struct {
	ID                  string                                                 `json:"id,omitempty"`                    // 雇员类型ID
	Name                []*CreateCoreHrEmployeeTypeRespEmployeeTypeName        `json:"name,omitempty"`                  // 名称
	DefaultEmployeeType bool                                                   `json:"default_employee_type,omitempty"` // 是否为默认人员类型, 每个租户只能定义一个默认人员类型
	Active              bool                                                   `json:"active,omitempty"`                // 启用
	Code                string                                                 `json:"code,omitempty"`                  // 编码
	CustomFields        []*CreateCoreHrEmployeeTypeRespEmployeeTypeCustomField `json:"custom_fields,omitempty"`         // 自定义字段
}

// CreateCoreHrEmployeeTypeRespEmployeeTypeCustomField ...
type CreateCoreHrEmployeeTypeRespEmployeeTypeCustomField struct {
	FieldName string `json:"field_name,omitempty"` // 字段名
	Value     string `json:"value,omitempty"`      // 字段值, 是json转义后的字符串, 根据元数据定义不同, 字段格式不同(如123, 123.23, "true", [\"id1\", \"id2\"], "2006-01-02 15:04:05")
}

// CreateCoreHrEmployeeTypeRespEmployeeTypeName ...
type CreateCoreHrEmployeeTypeRespEmployeeTypeName struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言
	Value string `json:"value,omitempty"` // 名称信息的内容
}

// createCoreHrEmployeeTypeResp ...
type createCoreHrEmployeeTypeResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *CreateCoreHrEmployeeTypeResp `json:"data,omitempty"`
}
