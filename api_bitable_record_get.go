// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetBitableRecord 该接口用于根据 record_id 的值检索现有记录
//
// 该接口支持调用频率上限为 20 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/get
func (r *BitableService) GetBitableRecord(ctx context.Context, request *GetBitableRecordReq, options ...MethodOptionFunc) (*GetBitableRecordResp, *Response, error) {
	if r.cli.mock.mockBitableGetBitableRecord != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#GetBitableRecord mock enable")
		return r.cli.mock.mockBitableGetBitableRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "GetBitableRecord",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBitableRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableGetBitableRecord mock BitableGetBitableRecord method
func (r *Mock) MockBitableGetBitableRecord(f func(ctx context.Context, request *GetBitableRecordReq, options ...MethodOptionFunc) (*GetBitableRecordResp, *Response, error)) {
	r.mockBitableGetBitableRecord = f
}

// UnMockBitableGetBitableRecord un-mock BitableGetBitableRecord method
func (r *Mock) UnMockBitableGetBitableRecord() {
	r.mockBitableGetBitableRecord = nil
}

// GetBitableRecordReq ...
type GetBitableRecordReq struct {
	AppToken          string  `path:"app_token" json:"-"`            // bitable app token, 示例值: "bascnCMII2ORej2RItqpZZUNMIe"
	TableID           string  `path:"table_id" json:"-"`             // table id, 示例值: "tblxI2tWaxP5dG7p"
	RecordID          string  `path:"record_id" json:"-"`            // 单条记录的 id, 示例值: "recn0hoyXL"
	TextFieldAsArray  *bool   `query:"text_field_as_array" json:"-"` // 控制多行文本字段数据的返回格式, true 表示以数组形式返回, 示例值: true
	UserIDType        *IDType `query:"user_id_type" json:"-"`        // 用户 ID 类型, 示例值: "open_id", 可选值有: `open_id`: 用户的 open id, `union_id`: 用户的 union id, `user_id`: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DisplayFormulaRef *bool   `query:"display_formula_ref" json:"-"` // 控制公式、查找引用是否显示完整的原样返回结果, 示例值: true
	AutomaticFields   *bool   `query:"automatic_fields" json:"-"`    // 控制是否返回自动计算的字段, 例如 `created_by`/`created_time`/`last_modified_by`/`last_modified_time`, true 表示返回, 示例值: true
}

// GetBitableRecordResp ...
type GetBitableRecordResp struct {
	Record *GetBitableRecordRespRecord `json:"record,omitempty"` // 记录
}

// GetBitableRecordRespRecord ...
type GetBitableRecordRespRecord struct {
	RecordID         string                                    `json:"record_id,omitempty"`          // 记录 id
	CreatedBy        *GetBitableRecordRespRecordCreatedBy      `json:"created_by,omitempty"`         // 创建人
	CreatedTime      int64                                     `json:"created_time,omitempty"`       // 创建时间
	LastModifiedBy   *GetBitableRecordRespRecordLastModifiedBy `json:"last_modified_by,omitempty"`   // 修改人
	LastModifiedTime int64                                     `json:"last_modified_time,omitempty"` // 最近更新时间
	Fields           map[string]interface{}                    `json:"fields,omitempty"`             // 记录字段, 关于支持新增的字段类型, 请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification)
}

// GetBitableRecordRespRecordCreatedBy ...
type GetBitableRecordRespRecordCreatedBy struct {
	ID     string `json:"id,omitempty"`      // 人员Id
	Name   string `json:"name,omitempty"`    // 中文姓名
	EnName string `json:"en_name,omitempty"` // 英文姓名
	Email  string `json:"email,omitempty"`   // 邮箱
}

// GetBitableRecordRespRecordLastModifiedBy ...
type GetBitableRecordRespRecordLastModifiedBy struct {
	ID     string `json:"id,omitempty"`      // 人员Id
	Name   string `json:"name,omitempty"`    // 中文姓名
	EnName string `json:"en_name,omitempty"` // 英文姓名
	Email  string `json:"email,omitempty"`   // 邮箱
}

// getBitableRecordResp ...
type getBitableRecordResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetBitableRecordResp `json:"data,omitempty"`
}
