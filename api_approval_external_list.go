// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetApprovalExternalList 为了更好地提升接口文档的的易理解性, 我们对文档进行了升级, 请尽快迁移至[新版本>>](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_task/list)
//
// 该接口用于获取三方审批的状态。用户传入查询条件, 接口返回满足条件的审批实例的状态。
// 该接口支持多种参数的组合, 包括如下组合:
// 1. 通过 instance_ids 获取指定实例的任务状态
// 2. 通过 user_ids 获取指定用户的任务状态
// 3. 通过 status 获取指定状态的所有任务
// 4. 获取下一批数据
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukjNyYjL5YjM24SO2IjN/external_status
func (r *ApprovalService) GetApprovalExternalList(ctx context.Context, request *GetApprovalExternalListReq, options ...MethodOptionFunc) (*GetApprovalExternalListResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApprovalExternalList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApprovalExternalList mock enable")
		return r.cli.mock.mockApprovalGetApprovalExternalList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApprovalExternalList",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/external/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApprovalExternalListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApprovalExternalList mock ApprovalGetApprovalExternalList method
func (r *Mock) MockApprovalGetApprovalExternalList(f func(ctx context.Context, request *GetApprovalExternalListReq, options ...MethodOptionFunc) (*GetApprovalExternalListResp, *Response, error)) {
	r.mockApprovalGetApprovalExternalList = f
}

// UnMockApprovalGetApprovalExternalList un-mock ApprovalGetApprovalExternalList method
func (r *Mock) UnMockApprovalGetApprovalExternalList() {
	r.mockApprovalGetApprovalExternalList = nil
}

// GetApprovalExternalListReq ...
type GetApprovalExternalListReq struct {
	ApprovalCodes []string `json:"approval_codes,omitempty"` // 审批定义 Code, 用于指定只获取这些定义下的数据
	InstanceIDs   []string `json:"instance_ids,omitempty"`   // 审批实例 ID, 用于指定只获取这些实例下的数据, 最多支持 20 个
	UserIDs       []string `json:"user_ids,omitempty"`       // 审批人 user_id, 用于指定只获取这些用户的数据
	Status        *string  `json:"status,omitempty"`         // 审批任务状态, 用于指定获取该状态下的数据, 状态值参照 [三方审批任务状态枚举](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/create)
	ScrollID      *string  `json:"scroll_id,omitempty"`      // 通过 status 获取所有任务的请求, 数据是分批返回的, 使用 scroll_id 获取下一批数据
}

// GetApprovalExternalListResp ...
type GetApprovalExternalListResp struct {
	Data     []*GetApprovalExternalListRespData `json:"data,omitempty"`
	ScrollID *string                            `json:"scroll_id,omitempty"` // 通过 status 获取所有任务的请求, 数据是分批返回的, scroll_id 用于获取下一批数据, 直至 scroll_id 为空
}

// GetApprovalExternalListRespData ...
type GetApprovalExternalListRespData struct {
	InstanceID   string                                 `json:"instance_id,omitempty"`   // 审批实例 ID
	ApprovalCode string                                 `json:"approval_code,omitempty"` // 审批对应的 approval_code
	ApprovalID   string                                 `json:"approval_id,omitempty"`   // 审批的id
	Status       string                                 `json:"status,omitempty"`        // 审批实例当前的状态, 参考[三方审批实例状态枚举](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/create)
	UpdateTime   int64                                  `json:"update_time,omitempty"`   // 审批实例最后更新时间, 单位 毫秒
	Tasks        []*GetApprovalExternalListRespDataTask `json:"tasks,omitempty"`         // 审批实例下的审批任务
}

// GetApprovalExternalListRespDataTask ...
type GetApprovalExternalListRespDataTask struct {
	ID         string `json:"id,omitempty"`          // 审批任务 ID
	Status     string `json:"status,omitempty"`      // 审批任务状态, 状态值参照 [三方审批任务状态枚举](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/create)
	UpdateTime int64  `json:"update_time,omitempty"` // 审批任务最后更新时间, 单位 毫秒
}

// getApprovalExternalListResp ...
type getApprovalExternalListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  *string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApprovalExternalListResp `json:"data,omitempty"`
}
