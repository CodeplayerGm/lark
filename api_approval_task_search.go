// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// SearchApprovalTask
//
// 该接口通过不同条件查询审批系统中符合条件的审批任务列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYjMxYjL2ITM24iNyEjN
func (r *ApprovalService) SearchApprovalTask(ctx context.Context, request *SearchApprovalTaskReq, options ...MethodOptionFunc) (*SearchApprovalTaskResp, *Response, error) {
	if r.cli.mock.mockApprovalSearchApprovalTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#SearchApprovalTask mock enable")
		return r.cli.mock.mockApprovalSearchApprovalTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "SearchApprovalTask",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/task/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchApprovalTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockApprovalSearchApprovalTask(f func(ctx context.Context, request *SearchApprovalTaskReq, options ...MethodOptionFunc) (*SearchApprovalTaskResp, *Response, error)) {
	r.mockApprovalSearchApprovalTask = f
}

func (r *Mock) UnMockApprovalSearchApprovalTask() {
	r.mockApprovalSearchApprovalTask = nil
}

type SearchApprovalTaskReq struct {
	UserID             *string `json:"user_id,omitempty"`              // 用户 id
	ApprovalCode       *string `json:"approval_code,omitempty"`        // 审批定义 code
	InstanceCode       *string `json:"instance_code,omitempty"`        // 审批实例 code
	InstanceExternalID *string `json:"instance_external_id,omitempty"` // 审批实例第三方 id<br>注：和 approval_code 取并集
	GroupExternalID    *string `json:"group_external_id,omitempty"`    // 审批定义分组第三方 id<br>注：和 instance_code 取并集
	TaskTitle          *string `json:"task_title,omitempty"`           // 审批任务标题（只有第三方审批有）
	TaskStatus         *string `json:"task_status,omitempty"`          // 审批任务状态<br>PENDING:   审批中<br>APPROVED:   通过<br>REJECTED:   拒绝<br>TRANSFERRED:转交<br> DONE:      已完成<br>RM_REPEAT:  去重<br> PROCESSED:  已处理<br>注：若不设置，查询全部状态<br>若不在集合中，报错
	TaskStartTimeFrom  *int64  `json:"task_start_time_from,omitempty"` // 任务查询开始时间 (unix毫秒时间戳)
	TaskStartTimeTo    *int64  `json:"task_start_time_to,omitempty"`   // 任务查询结束时间 (unix毫秒时间戳)
	Locale             *string `json:"locale,omitempty"`               // 地区（zh-CN、en-US、ja-JP）
	Offset             *int64  `json:"offset,omitempty"`               // 查询偏移量<br>注：不得超过10000
	Limit              *int64  `json:"limit,omitempty"`                // 查询限制量<br>注：不得超过200<br>不设置默认查询10条数据
}

type searchApprovalTaskResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                  `json:"msg,omitempty"`  // 返回码的描述
	Data *SearchApprovalTaskResp `json:"data,omitempty"` // 返回业务信息
}

type SearchApprovalTaskResp struct {
	Count    int64                         `json:"count,omitempty"`     // 查询返回条数
	TaskList []*SearchApprovalTaskRespTask `json:"task_list,omitempty"` // 审批任务列表
}

type SearchApprovalTaskRespTask struct {
	Approval *SearchApprovalTaskRespTaskApproval `json:"approval,omitempty"` // 审批定义
	Group    *SearchApprovalTaskRespTaskGroup    `json:"group,omitempty"`    // 审批定义分组
	Instance *SearchApprovalTaskRespTaskInstance `json:"instance,omitempty"` // 审批实例信息
	Task     *SearchApprovalTaskRespTaskTask     `json:"task,omitempty"`     // 审批任务
}

type SearchApprovalTaskRespTaskApproval struct {
	Code       string                                      `json:"code,omitempty"`        // 审批定义 code
	Name       string                                      `json:"name,omitempty"`        // 审批定义名称
	IsExternal bool                                        `json:"is_external,omitempty"` // 是否为第三方审批
	External   *SearchApprovalTaskRespTaskApprovalExternal `json:"external,omitempty"`    // 第三方审批信息
}

type SearchApprovalTaskRespTaskApprovalExternal struct {
	BatchCcRead bool `json:"batch_cc_read,omitempty"` // 是否支持批量读
}

type SearchApprovalTaskRespTaskGroup struct {
	ExternalID string `json:"external_id,omitempty"` // 审批定义分组外部 id
	Name       string `json:"name,omitempty"`        // 审批定义分组名称
}

type SearchApprovalTaskRespTaskInstance struct {
	Code       string                                  `json:"code,omitempty"`        // 审批实例 code
	ExternalID string                                  `json:"external_id,omitempty"` // 审批实例外部 id
	UserID     string                                  `json:"user_id,omitempty"`     // 审批实例发起人 id
	StartTime  int64                                   `json:"start_time,omitempty"`  // 审批实例开始时间
	EndTime    int64                                   `json:"end_time,omitempty"`    // 审批实例结束时间
	Status     string                                  `json:"status,omitempty"`      // 审批实例状态
	Title      string                                  `json:"title,omitempty"`       // 审批实例名称（只有第三方审批有）
	Extra      string                                  `json:"extra,omitempty"`       // 审批实例扩展字段
	SerialID   string                                  `json:"serial_id,omitempty"`   // 审批流水号
	Link       *SearchApprovalTaskRespTaskInstanceLink `json:"link,omitempty"`        // 审批实例链接（只有第三方审批有）
}

type SearchApprovalTaskRespTaskInstanceLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批实例 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批实例移动端链接
}

type SearchApprovalTaskRespTaskTask struct {
	StartTime int64                               `json:"start_time,omitempty"` // 审批任务开始时间
	UserID    string                              `json:"user_id,omitempty"`    // 审批任务发起人 id
	EndTime   int64                               `json:"end_time,omitempty"`   // 审批任务结束时间
	Title     string                              `json:"title,omitempty"`      // 审批任务名称
	Status    string                              `json:"status,omitempty"`     // 审批任务状态
	Extra     string                              `json:"extra,omitempty"`      // 审批任务扩展字段
	Link      *SearchApprovalTaskRespTaskTaskLink `json:"link,omitempty"`       // 审批任务链接
}

type SearchApprovalTaskRespTaskTaskLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批任务 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批任务移动端链接
}
