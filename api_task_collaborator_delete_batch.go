// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// BatchDeleteTaskCollaborator 该接口用于批量删除执行者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/batch_delete_collaborator
func (r *TaskService) BatchDeleteTaskCollaborator(ctx context.Context, request *BatchDeleteTaskCollaboratorReq, options ...MethodOptionFunc) (*BatchDeleteTaskCollaboratorResp, *Response, error) {
	if r.cli.mock.mockTaskBatchDeleteTaskCollaborator != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#BatchDeleteTaskCollaborator mock enable")
		return r.cli.mock.mockTaskBatchDeleteTaskCollaborator(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "BatchDeleteTaskCollaborator",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/batch_delete_collaborator",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchDeleteTaskCollaboratorResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskBatchDeleteTaskCollaborator mock TaskBatchDeleteTaskCollaborator method
func (r *Mock) MockTaskBatchDeleteTaskCollaborator(f func(ctx context.Context, request *BatchDeleteTaskCollaboratorReq, options ...MethodOptionFunc) (*BatchDeleteTaskCollaboratorResp, *Response, error)) {
	r.mockTaskBatchDeleteTaskCollaborator = f
}

// UnMockTaskBatchDeleteTaskCollaborator un-mock TaskBatchDeleteTaskCollaborator method
func (r *Mock) UnMockTaskBatchDeleteTaskCollaborator() {
	r.mockTaskBatchDeleteTaskCollaborator = nil
}

// BatchDeleteTaskCollaboratorReq ...
type BatchDeleteTaskCollaboratorReq struct {
	TaskID     string   `path:"task_id" json:"-"`       // 任务ID, 示例值: "83912691-2e43-47fc-94a4-d512e03984fa"
	UserIDType *IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: "open_id", 可选值有: open_id: 用户的 open id, union_id: 用户的 union id, user_id: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	IDList     []string `json:"id_list,omitempty"`      // 执行者的用户ID列表, 示例值: ["ou_550cc75233d8b7b9fcbdad65f34433f4", "ou_d1e9d27cf3235b40ca9a67c67ef088b0"]
}

// BatchDeleteTaskCollaboratorResp ...
type BatchDeleteTaskCollaboratorResp struct {
	Collaborators []string `json:"collaborators,omitempty"` // 实际删除的执行人用户ID列表
}

// batchDeleteTaskCollaboratorResp ...
type batchDeleteTaskCollaboratorResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *BatchDeleteTaskCollaboratorResp `json:"data,omitempty"`
}
