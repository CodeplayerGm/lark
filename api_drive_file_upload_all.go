// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
	"io"
)

// UploadDriveFile 向云空间指定目录下上传一个文件
//
// 使用此方式上传可以快速传输小于等于20MB的文件
// 该接口支持调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_all
func (r *DriveService) UploadDriveFile(ctx context.Context, request *UploadDriveFileReq, options ...MethodOptionFunc) (*UploadDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveUploadDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UploadDriveFile mock enable")
		return r.cli.mock.mockDriveUploadDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UploadDriveFile",
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/drive/v1/files/upload_all",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		IsFile:                true,
	}
	resp := new(uploadDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockDriveUploadDriveFile(f func(ctx context.Context, request *UploadDriveFileReq, options ...MethodOptionFunc) (*UploadDriveFileResp, *Response, error)) {
	r.mockDriveUploadDriveFile = f
}

func (r *Mock) UnMockDriveUploadDriveFile() {
	r.mockDriveUploadDriveFile = nil
}

type UploadDriveFileReq struct {
	FileName   string    `json:"file_name,omitempty"`   // 文件名, 示例值："test.txt", 最大长度：`250` 字符
	ParentType string    `json:"parent_type,omitempty"` // 上传点类型, 示例值："explorer", 可选值有: `explorer`：云空间
	ParentNode string    `json:"parent_node,omitempty"` // 文件夹token, 示例值："fldcn77hdDT5"
	Size       int64     `json:"size,omitempty"`        // 文件大小,全量上传最大20M, 示例值：1024, 最大值：`20971520`
	Checksum   *string   `json:"checksum,omitempty"`    // 文件adler32校验和(可选), 示例值："123423882374238957235"
	File       io.Reader `json:"file,omitempty"`        // 文件数据, 示例值：file binary
}

type uploadDriveFileResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *UploadDriveFileResp `json:"data,omitempty"`
}

type UploadDriveFileResp struct {
	FileToken string `json:"file_token,omitempty"` // 新创建文件的 token
}
