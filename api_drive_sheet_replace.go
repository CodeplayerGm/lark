// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// ReplaceSheet 按照指定的条件查找子表的某个范围内的数据符合条件的单元格并替换值，返回替换成功的单元格位置。一次请求最多允许替换5000个单元格，如果超过请将range缩小范围再操作。请求体中的 range、find、replaccement 字段必填。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/replace
func (r *DriveService) ReplaceSheet(ctx context.Context, request *ReplaceSheetReq, options ...MethodOptionFunc) (*ReplaceSheetResp, *Response, error) {
	if r.cli.mock.mockDriveReplaceSheet != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#ReplaceSheet mock enable")
		return r.cli.mock.mockDriveReplaceSheet(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "ReplaceSheet",
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/replace",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(replaceSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockDriveReplaceSheet(f func(ctx context.Context, request *ReplaceSheetReq, options ...MethodOptionFunc) (*ReplaceSheetResp, *Response, error)) {
	r.mockDriveReplaceSheet = f
}

func (r *Mock) UnMockDriveReplaceSheet() {
	r.mockDriveReplaceSheet = nil
}

type ReplaceSheetReq struct {
	SpreadSheetToken string                        `path:"spreadsheet_token" json:"-"` // Spreadsheet token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string                        `path:"sheet_id" json:"-"`          // Sheet id, 示例值："0b**12"
	FindCondition    *ReplaceSheetReqFindCondition `json:"find_condition,omitempty"`   // 查找条件
	Find             *string                       `json:"find,omitempty"`             // 查找的字符串, 示例值："hello"
	Replacement      *string                       `json:"replacement,omitempty"`      // 替换的字符串, 示例值："world"
}

type ReplaceSheetReqFindCondition struct {
	Range           *string `json:"range,omitempty"`             // 查找范围, 示例值："0b**12!A1:H10"
	MatchCase       *bool   `json:"match_case,omitempty"`        // 是否忽略大小写, 示例值：true
	MatchEntireCell *bool   `json:"match_entire_cell,omitempty"` // 是否匹配整个单元格, 示例值：false
	SearchByRegex   *bool   `json:"search_by_regex,omitempty"`   // 是否为正则匹配, 示例值：false
	IncludeFormulas *bool   `json:"include_formulas,omitempty"`  // 是否搜索公式内容, 示例值：false
}

type replaceSheetResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *ReplaceSheetResp `json:"data,omitempty"`
}

type ReplaceSheetResp struct {
	ReplaceResult *ReplaceSheetRespReplaceResult `json:"replace_result,omitempty"` // 符合查找条件并替换的单元格信息
}

type ReplaceSheetRespReplaceResult struct {
	MatchedCells        []string `json:"matched_cells,omitempty"`         // 符合查找条件的单元格数组，不包含公式，例如["A1", "A2"...]
	MatchedFormulaCells []string `json:"matched_formula_cells,omitempty"` // 符合查找条件的含有公式的单元格数组，例如["B3", "H7"...]
	RowsCount           int64    `json:"rows_count,omitempty"`            // 符合查找条件的总行数
}
