// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetEcosystemBindAwemeUser
//
// 获取绑定信息
// 适用于获取飞书账号是否为“抖音员工号”运营者。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bytedance-open-ecosystem/aweme_ecosystem-v1/aweme_user/get_bind_info
func (r *EcosystemService) GetEcosystemBindAwemeUser(ctx context.Context, request *GetEcosystemBindAwemeUserReq, options ...MethodOptionFunc) (*GetEcosystemBindAwemeUserResp, *Response, error) {
	if r.cli.mock.mockEcosystemGetEcosystemBindAwemeUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Ecosystem#GetEcosystemBindAwemeUser mock enable")
		return r.cli.mock.mockEcosystemGetEcosystemBindAwemeUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Ecosystem",
		API:                   "GetEcosystemBindAwemeUser",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/aweme_ecosystem/v1/aweme_users/get_bind_info",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getEcosystemBindAwemeUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockEcosystemGetEcosystemBindAwemeUser(f func(ctx context.Context, request *GetEcosystemBindAwemeUserReq, options ...MethodOptionFunc) (*GetEcosystemBindAwemeUserResp, *Response, error)) {
	r.mockEcosystemGetEcosystemBindAwemeUser = f
}

func (r *Mock) UnMockEcosystemGetEcosystemBindAwemeUser() {
	r.mockEcosystemGetEcosystemBindAwemeUser = nil
}

type GetEcosystemBindAwemeUserReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	UserID     *string `query:"user_id" json:"-"`      // 飞书用户id，由user_id_type决定类型, 示例值："ou_7d8a6e6df7621556ce0d21922b676706ccs"
}

type getEcosystemBindAwemeUserResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *GetEcosystemBindAwemeUserResp `json:"data,omitempty"`
}

type GetEcosystemBindAwemeUserResp struct {
	AwemeUser *GetEcosystemBindAwemeUserRespAwemeUser `json:"aweme_user,omitempty"` // 用户绑定信息
}

type GetEcosystemBindAwemeUserRespAwemeUser struct {
	AwemeUserID string `json:"aweme_user_id,omitempty"` // 抖音用户id
	UserID      string `json:"user_id,omitempty"`       // 绑定的飞书用户id
	IsBinded    bool   `json:"is_binded,omitempty"`     // 飞书-抖音账号是否绑定
}
