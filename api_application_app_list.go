// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetApplicationAppList
//
// 该接口用于查询企业安装的应用列表，只能被企业自建应用调用。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYDN3UjL2QzN14iN0cTN
func (r *ApplicationService) GetApplicationAppList(ctx context.Context, request *GetApplicationAppListReq, options ...MethodOptionFunc) (*GetApplicationAppListResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationAppList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationAppList mock enable")
		return r.cli.mock.mockApplicationGetApplicationAppList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationAppList",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/application/v3/app/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationAppListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockApplicationGetApplicationAppList(f func(ctx context.Context, request *GetApplicationAppListReq, options ...MethodOptionFunc) (*GetApplicationAppListResp, *Response, error)) {
	r.mockApplicationGetApplicationAppList = f
}

func (r *Mock) UnMockApplicationGetApplicationAppList() {
	r.mockApplicationGetApplicationAppList = nil
}

type GetApplicationAppListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页起始位置标示，不填表示从头开始
	PageSize  *int64  `query:"page_size" json:"-"`  // 单页需求最大个数（最大 100），0 自动最大个数
	Lang      *string `query:"lang" json:"-"`       // 优先展示的应用信息的语言版本（zh_cn：中文，en_us：英文，ja_jp：日文）
	Status    *int64  `query:"status" json:"-"`     // 要返回的应用的状态，0:停用；1:启用；-1:全部，默认为 -1
}

type getApplicationAppListResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationAppListResp `json:"data,omitempty"` // 返回的业务信息，仅 code = 0 时有效
}

type GetApplicationAppListResp struct {
	PageToken  string                            `json:"page_token,omitempty"`  // 下一个请求页应当给的起始位置
	PageSize   int64                             `json:"page_size,omitempty"`   // 本次请求实际返回的页大小
	TotalCount int64                             `json:"total_count,omitempty"` // 可用的应用总数
	HasMore    int64                             `json:"has_more,omitempty"`    // 是否还有更多应用
	Lang       string                            `json:"lang,omitempty"`        // 当前选择的版本语言
	AppList    *GetApplicationAppListRespAppList `json:"app_list,omitempty"`    // 应用列表
}

type GetApplicationAppListRespAppList struct {
	AppID           string `json:"app_id,omitempty"`           // 应用 ID
	PrimaryLanguage string `json:"primary_language,omitempty"` // 应用首选语言
	AppName         string `json:"app_name,omitempty"`         // 应用名称
	Description     string `json:"description,omitempty"`      // 应用描述
	AvatarURL       string `json:"avatar_url,omitempty"`       // 应用 icon
	AppSceneType    int64  `json:"app_scene_type,omitempty"`   // 应用类型，0：企业自建应用；1：应用商店应用
	Status          int64  `json:"status,omitempty"`           // 启停状态，0：停用；1：启用
}
