// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// SearchApprovalInstance
//
// 该接口通过不同条件查询审批系统中符合条件的审批实例列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQjMxYjL0ITM24CNyEjN
func (r *ApprovalService) SearchApprovalInstance(ctx context.Context, request *SearchApprovalInstanceReq, options ...MethodOptionFunc) (*SearchApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalSearchApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#SearchApprovalInstance mock enable")
		return r.cli.mock.mockApprovalSearchApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "SearchApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalSearchApprovalInstance mock ApprovalSearchApprovalInstance method
func (r *Mock) MockApprovalSearchApprovalInstance(f func(ctx context.Context, request *SearchApprovalInstanceReq, options ...MethodOptionFunc) (*SearchApprovalInstanceResp, *Response, error)) {
	r.mockApprovalSearchApprovalInstance = f
}

// UnMockApprovalSearchApprovalInstance un-mock ApprovalSearchApprovalInstance method
func (r *Mock) UnMockApprovalSearchApprovalInstance() {
	r.mockApprovalSearchApprovalInstance = nil
}

// SearchApprovalInstanceReq ...
type SearchApprovalInstanceReq struct {
	UserID                string  `json:"user_id,omitempty"`                  // 用户 id
	ApprovalCode          *string `json:"approval_code,omitempty"`            // 审批定义 code
	InstanceCode          *string `json:"instance_code,omitempty"`            // 审批实例 code
	InstanceExternalID    *string `json:"instance_external_id,omitempty"`     // 审批实例第三方 id <br>注：和 approval_code 取并集
	GroupExternalID       *string `json:"group_external_id,omitempty"`        // 审批定义分组第三方 id <br>注：和 instance_code 取并集
	InstanceTitle         *string `json:"instance_title,omitempty"`           // 审批实例标题（只有第三方审批有）
	InstanceStatus        *string `json:"instance_status,omitempty"`          // 审批实例状态<br>REJECT：拒绝<br>PENDING：审批中<br>RECALL：撤回<br>DELETED： 已删除<br>APPROVED：通过<br>注：若不设置，查询全部状态<br>若不在集合中，报错
	InstanceStartTimeFrom *int64  `json:"instance_start_time_from,omitempty"` // 实例查询开始时间（unix毫秒时间戳）
	InstanceStartTimeTo   *int64  `json:"instance_start_time_to,omitempty"`   // 实例查询结束时间  (unix毫秒时间戳)
	Locale                *string `json:"locale,omitempty"`                   // 地区 （zh-CN、en-US、ja-JP）
	Offset                *int64  `json:"offset,omitempty"`                   // 查询偏移量 <br>注：不得超过10000
	Limit                 *int64  `json:"limit,omitempty"`                    // 查询限制量 <br>注：不得超过200<br>不设置默认查询10条数据
}

// searchApprovalInstanceResp ...
type searchApprovalInstanceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *SearchApprovalInstanceResp `json:"data,omitempty"` // 返回业务信息
}

// SearchApprovalInstanceResp ...
type SearchApprovalInstanceResp struct {
	Count        int64                                 `json:"count,omitempty"`         // 查询返回条数
	InstanceList []*SearchApprovalInstanceRespInstance `json:"instance_list,omitempty"` // 审批实例列表
}

// SearchApprovalInstanceRespInstance ...
type SearchApprovalInstanceRespInstance struct {
	Approval *SearchApprovalInstanceRespInstanceApproval `json:"approval,omitempty"` // 审批定义
	Group    *SearchApprovalInstanceRespInstanceGroup    `json:"group,omitempty"`    // 审批定义分组
	Instance *SearchApprovalInstanceRespInstanceInstance `json:"instance,omitempty"` // 审批实例信息
}

// SearchApprovalInstanceRespInstanceApproval ...
type SearchApprovalInstanceRespInstanceApproval struct {
	Code       string                                              `json:"code,omitempty"`        // 审批定义 code
	Name       string                                              `json:"name,omitempty"`        // 审批定义名称
	IsExternal bool                                                `json:"is_external,omitempty"` // 是否为第三方审批
	External   *SearchApprovalInstanceRespInstanceApprovalExternal `json:"external,omitempty"`    // 第三方审批信息
}

// SearchApprovalInstanceRespInstanceApprovalExternal ...
type SearchApprovalInstanceRespInstanceApprovalExternal struct {
	BatchCcRead bool `json:"batch_cc_read,omitempty"` // 是否支持批量读
}

// SearchApprovalInstanceRespInstanceGroup ...
type SearchApprovalInstanceRespInstanceGroup struct {
	ExternalID *SearchApprovalInstanceRespInstanceGroupExternalID `json:"external_id,omitempty"` // 审批定义分组外部 id
}

// SearchApprovalInstanceRespInstanceGroupExternalID ...
type SearchApprovalInstanceRespInstanceGroupExternalID struct {
	Name string `json:"name,omitempty"` // 审批定义分组名称
}

// SearchApprovalInstanceRespInstanceInstance ...
type SearchApprovalInstanceRespInstanceInstance struct {
	Code       string                                          `json:"code,omitempty"`        // 审批实例 code
	ExternalID string                                          `json:"external_id,omitempty"` // 审批实例外部 id
	UserID     string                                          `json:"user_id,omitempty"`     // 审批实例发起人 id
	StartTime  int64                                           `json:"start_time,omitempty"`  // 审批实例开始时间
	EndTime    int64                                           `json:"end_time,omitempty"`    // 审批实例结束时间
	Status     string                                          `json:"status,omitempty"`      // 审批实例状态
	Title      string                                          `json:"title,omitempty"`       // 审批实例名称（只有第三方审批有）
	Extra      string                                          `json:"extra,omitempty"`       // 审批实例扩展字段
	SerialID   string                                          `json:"serial_id,omitempty"`   // 审批流水号
	Link       *SearchApprovalInstanceRespInstanceInstanceLink `json:"link,omitempty"`        // 审批实例链接（只有第三方审批有）
}

// SearchApprovalInstanceRespInstanceInstanceLink ...
type SearchApprovalInstanceRespInstanceInstanceLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批实例 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批实例移动端链接
}
