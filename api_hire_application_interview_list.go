// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetHireApplicationInterviewList 根据投递 ID 获取面试记录列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application-interview/list
//
// Deprecated
func (r *HireService) GetHireApplicationInterviewList(ctx context.Context, request *GetHireApplicationInterviewListReq, options ...MethodOptionFunc) (*GetHireApplicationInterviewListResp, *Response, error) {
	if r.cli.mock.mockHireGetHireApplicationInterviewList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireApplicationInterviewList mock enable")
		return r.cli.mock.mockHireGetHireApplicationInterviewList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireApplicationInterviewList",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/hire/v1/applications/:application_id/interviews",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireApplicationInterviewListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireApplicationInterviewList(f func(ctx context.Context, request *GetHireApplicationInterviewListReq, options ...MethodOptionFunc) (*GetHireApplicationInterviewListResp, *Response, error)) {
	r.mockHireGetHireApplicationInterviewList = f
}

func (r *Mock) UnMockHireGetHireApplicationInterviewList() {
	r.mockHireGetHireApplicationInterviewList = nil
}

type GetHireApplicationInterviewListReq struct {
	PageSize      int64   `query:"page_size" json:"-"`     // 分页大小, 示例值：10
	PageToken     *string `query:"page_token" json:"-"`    // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xx"
	UserIDType    *IDType `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 userid
	ApplicationID string  `path:"application_id" json:"-"` // 投递ID, 示例值："6949805467799537964"
}

type getHireApplicationInterviewListResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *GetHireApplicationInterviewListResp `json:"data,omitempty"`
}

type GetHireApplicationInterviewListResp struct {
	PageToken string                                     `json:"page_token,omitempty"` // 分页标志
	HasMore   bool                                       `json:"has_more,omitempty"`   // 是否有更多
	Items     []*GetHireApplicationInterviewListRespItem `json:"items,omitempty"`      // 面试列表
}

type GetHireApplicationInterviewListRespItem struct {
	ID                  string                                                    `json:"id,omitempty"`                    // 面试id
	BeginTime           int64                                                     `json:"begin_time,omitempty"`            // 面试开始时间（ms）
	EndTime             int64                                                     `json:"end_time,omitempty"`              // 面试结束时间（ms）
	Round               int64                                                     `json:"round,omitempty"`                 // 面试轮次（从0开始计数）
	StageID             string                                                    `json:"stage_id,omitempty"`              // 面试关联的投递阶段
	InterviewRecordList []*GetHireApplicationInterviewListRespItemInterviewRecord `json:"interview_record_list,omitempty"` // 面试官记录列表
}

type GetHireApplicationInterviewListRespItemInterviewRecord struct {
	ID             string                                                                `json:"id,omitempty"`               // 面试记录id
	UserID         string                                                                `json:"user_id,omitempty"`          // 面试官用户id
	Content        string                                                                `json:"content,omitempty"`          // 面试评价
	MinJobLevelID  string                                                                `json:"min_job_level_id,omitempty"` // 建议定级下限的职级id
	MaxJobLevelID  string                                                                `json:"max_job_level_id,omitempty"` // 建议定级上限的职级id
	CommitStatus   int64                                                                 `json:"commit_status,omitempty"`    // 提交状态, 可选值有: `1`：已提交, `2`：未提交
	Conclusion     int64                                                                 `json:"conclusion,omitempty"`       // 面试结论, 可选值有: `1`：通过, `2`：未通过, `3`：未开始, `4`：未提交, `5`：未到场
	InterviewScore *GetHireApplicationInterviewListRespItemInterviewRecordInterviewScore `json:"interview_score,omitempty"`  // 面试评分
}

type GetHireApplicationInterviewListRespItemInterviewRecordInterviewScore struct {
	ID            string `json:"id,omitempty"`             // 面试评分id
	Level         int64  `json:"level,omitempty"`          // 分数级别
	ZhName        string `json:"zh_name,omitempty"`        // 中文名称
	ZhDescription string `json:"zh_description,omitempty"` // 中文描述
	EnName        string `json:"en_name,omitempty"`        // 英文名称
	EnDescription string `json:"en_description,omitempty"` // 英文描述
}
