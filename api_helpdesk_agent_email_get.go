// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetHelpdeskAgentEmail 该接口用于获取客服邮箱地址
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent/agent_email
func (r *HelpdeskService) GetHelpdeskAgentEmail(ctx context.Context, request *GetHelpdeskAgentEmailReq, options ...MethodOptionFunc) (*GetHelpdeskAgentEmailResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentEmail != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentEmail mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentEmail(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentEmail",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/helpdesk/v1/agent_emails",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentEmailResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskAgentEmail(f func(ctx context.Context, request *GetHelpdeskAgentEmailReq, options ...MethodOptionFunc) (*GetHelpdeskAgentEmailResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentEmail = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskAgentEmail() {
	r.mockHelpdeskGetHelpdeskAgentEmail = nil
}

type GetHelpdeskAgentEmailReq struct{}

type getHelpdeskAgentEmailResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentEmailResp `json:"data,omitempty"`
}

type GetHelpdeskAgentEmailResp struct {
	Agents string `json:"agents,omitempty"` // agent emails
}
