// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// UpdateDriveComment 更新云文档中的某条回复。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment-reply/update
func (r *DriveService) UpdateDriveComment(ctx context.Context, request *UpdateDriveCommentReq, options ...MethodOptionFunc) (*UpdateDriveCommentResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDriveComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDriveComment mock enable")
		return r.cli.mock.mockDriveUpdateDriveComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDriveComment",
		Method:                "PUT",
		URL:                   "https://open.feishu.cn/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDriveCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockDriveUpdateDriveComment(f func(ctx context.Context, request *UpdateDriveCommentReq, options ...MethodOptionFunc) (*UpdateDriveCommentResp, *Response, error)) {
	r.mockDriveUpdateDriveComment = f
}

func (r *Mock) UnMockDriveUpdateDriveComment() {
	r.mockDriveUpdateDriveComment = nil
}

type UpdateDriveCommentReq struct {
	FileType  FileType                      `query:"file_type" json:"-"` // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件
	FileToken string                        `path:"file_token" json:"-"` // 文档token, 示例值："doccnHh7U87HOFpii5u5G*****"
	CommentID string                        `path:"comment_id" json:"-"` // 评论ID, 示例值："6916106822734578184"
	ReplyID   string                        `path:"reply_id" json:"-"`   // 回复ID, 示例值："6916106822734594568"
	Content   *UpdateDriveCommentReqContent `json:"content,omitempty"`   // 回复内容
}

type UpdateDriveCommentReqContent struct {
	Elements []*UpdateDriveCommentReqContentElement `json:"elements,omitempty"` // 回复的内容
}

type UpdateDriveCommentReqContentElement struct {
	Type     string                                       `json:"type,omitempty"`      // 回复的内容元素, 示例值："text_run", 可选值有: `text_run`：普通文本, `docs_link`：at 云文档链接, `person`：at 联系人
	TextRun  *UpdateDriveCommentReqContentElementTextRun  `json:"text_run,omitempty"`  // 文本内容
	DocsLink *UpdateDriveCommentReqContentElementDocsLink `json:"docs_link,omitempty"` // 文本内容
	Person   *UpdateDriveCommentReqContentElementPerson   `json:"person,omitempty"`    // 文本内容
}

type UpdateDriveCommentReqContentElementTextRun struct {
	Text string `json:"text,omitempty"` // 回复 普通文本, 示例值："comment text"
}

type UpdateDriveCommentReqContentElementDocsLink struct {
	URL string `json:"url,omitempty"` // 回复 at云文档, 示例值："https://bytedance.feishu.cn/docs/doccnHh7U87HOFpii5u5G*****"
}

type UpdateDriveCommentReqContentElementPerson struct {
	UserID string `json:"user_id,omitempty"` // 回复 at联系人, 示例值："ou_cc19b2bfb93f8a44db4b4d6eab*****"
}

type updateDriveCommentResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDriveCommentResp `json:"data,omitempty"`
}

type UpdateDriveCommentResp struct{}
