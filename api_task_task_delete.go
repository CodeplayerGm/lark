// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteTask 该接口用于删除任务
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/delete
func (r *TaskService) DeleteTask(ctx context.Context, request *DeleteTaskReq, options ...MethodOptionFunc) (*DeleteTaskResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTask mock enable")
		return r.cli.mock.mockTaskDeleteTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTask",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskDeleteTask(f func(ctx context.Context, request *DeleteTaskReq, options ...MethodOptionFunc) (*DeleteTaskResp, *Response, error)) {
	r.mockTaskDeleteTask = f
}

func (r *Mock) UnMockTaskDeleteTask() {
	r.mockTaskDeleteTask = nil
}

type DeleteTaskReq struct {
	TaskID string `path:"task_id" json:"-"` // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
}

type deleteTaskResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskResp `json:"data,omitempty"`
}

type DeleteTaskResp struct{}
