// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetVCReserve 获取一个预约的详情
//
// 只能获取归属于自己的预约
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/get
func (r *VCService) GetVCReserve(ctx context.Context, request *GetVCReserveReq, options ...MethodOptionFunc) (*GetVCReserveResp, *Response, error) {
	if r.cli.mock.mockVCGetVCReserve != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCReserve mock enable")
		return r.cli.mock.mockVCGetVCReserve(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "GetVCReserve",
		Method:              "GET",
		URL:                 "https://open.feishu.cn/open-apis/vc/v1/reserves/:reserve_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getVCReserveResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCGetVCReserve(f func(ctx context.Context, request *GetVCReserveReq, options ...MethodOptionFunc) (*GetVCReserveResp, *Response, error)) {
	r.mockVCGetVCReserve = f
}

func (r *Mock) UnMockVCGetVCReserve() {
	r.mockVCGetVCReserve = nil
}

type GetVCReserveReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ReserveID  string  `path:"reserve_id" json:"-"`    // 预约ID（预约的唯一标识）, 示例值："6911188411932033028"
}

type getVCReserveResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *GetVCReserveResp `json:"data,omitempty"`
}

type GetVCReserveResp struct {
	Reserve *GetVCReserveRespReserve `json:"reserve,omitempty"` // 预约数据
}

type GetVCReserveRespReserve struct {
	ID              string                                  `json:"id,omitempty"`               // 预约ID（预约的唯一标识）
	MeetingNo       string                                  `json:"meeting_no,omitempty"`       // 9位会议号（飞书用户可通过输入9位会议号快捷入会）
	URL             string                                  `json:"url,omitempty"`              // 会议链接（飞书用户可通过点击会议链接快捷入会）
	AppLink         string                                  `json:"app_link,omitempty"`         // APPLink用于唤起飞书APP入会。"{?}"为占位符，用于配置入会参数，使用时需替换具体值：0表示关闭，1表示打开。preview为入会前的设置页，mic为麦克风，speaker为扬声器，camera为摄像头
	LiveLink        string                                  `json:"live_link,omitempty"`        // 直播链接
	EndTime         string                                  `json:"end_time,omitempty"`         // 预约到期时间（unix时间，单位sec）
	ExpireStatus    int64                                   `json:"expire_status,omitempty"`    // 过期状态, 可选值有: `1`：未过期, `2`：已过期
	ReserveUserID   string                                  `json:"reserve_user_id,omitempty"`  // 预约人ID
	MeetingSettings *GetVCReserveRespReserveMeetingSettings `json:"meeting_settings,omitempty"` // 会议设置
}

type GetVCReserveRespReserveMeetingSettings struct {
	Topic              string                                                    `json:"topic,omitempty"`                // 会议主题
	ActionPermissions  []*GetVCReserveRespReserveMeetingSettingsActionPermission `json:"action_permissions,omitempty"`   // 会议权限配置列表，如果存在相同的权限配置项则它们之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
	MeetingInitialType int64                                                     `json:"meeting_initial_type,omitempty"` // 会议初始类型, 可选值有: `1`：多人会议, `2`：1v1呼叫
	CallSetting        *GetVCReserveRespReserveMeetingSettingsCallSetting        `json:"call_setting,omitempty"`         // 1v1呼叫相关参数
}

type GetVCReserveRespReserveMeetingSettingsActionPermission struct {
	Permission         int64                                                                      `json:"permission,omitempty"`          // 权限项, 可选值有: `1`：是否能成为主持人, `2`：是否能邀请参会人, `3`：是否能加入会议
	PermissionCheckers []*GetVCReserveRespReserveMeetingSettingsActionPermissionPermissionChecker `json:"permission_checkers,omitempty"` // 权限检查器列表，权限检查器之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
}

type GetVCReserveRespReserveMeetingSettingsActionPermissionPermissionChecker struct {
	CheckField int64    `json:"check_field,omitempty"` // 检查字段类型, 可选值有: `1`：用户ID, `2`：用户类型, `3`：租户ID
	CheckMode  int64    `json:"check_mode,omitempty"`  // 检查方式, 可选值有: `1`：在check_list中为有权限（白名单）, `2`：不在check_list中为有权限（黑名单）
	CheckList  []string `json:"check_list,omitempty"`  // 检查字段列表
}

type GetVCReserveRespReserveMeetingSettingsCallSetting struct {
	Callee *GetVCReserveRespReserveMeetingSettingsCallSettingCallee `json:"callee,omitempty"` // 被呼叫的用户
}

type GetVCReserveRespReserveMeetingSettingsCallSettingCallee struct {
	ID          string                                                              `json:"id,omitempty"`            // 用户ID
	UserType    int64                                                               `json:"user_type,omitempty"`     // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	PstnSipInfo *GetVCReserveRespReserveMeetingSettingsCallSettingCalleePstnSipInfo `json:"pstn_sip_info,omitempty"` // pstn/sip信息
}

type GetVCReserveRespReserveMeetingSettingsCallSettingCalleePstnSipInfo struct {
	Nickname    string `json:"nickname,omitempty"`     // 给pstn/sip用户设置的临时昵称
	MainAddress string `json:"main_address,omitempty"` // pstn/sip主机号
}
