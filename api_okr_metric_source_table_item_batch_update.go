// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// BatchUpdateOKRMetricSourceTableItem - 该接口用于批量更新多项指标, 单次调用最多更新 100 条记录。接口仅限 OKR 企业版使用。
//
// 更新成功后 OKR 系统会给以下人员发送消息通知:
// - 首次更新目标值的人员
// - 已经将指标添加为 KR、且本次目标值/起始值/支撑的上级有变更的人员, 不包含仅更新了进度值的人员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source-table-item/batch_update
func (r *OKRService) BatchUpdateOKRMetricSourceTableItem(ctx context.Context, request *BatchUpdateOKRMetricSourceTableItemReq, options ...MethodOptionFunc) (*BatchUpdateOKRMetricSourceTableItemResp, *Response, error) {
	if r.cli.mock.mockOKRBatchUpdateOKRMetricSourceTableItem != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] OKR#BatchUpdateOKRMetricSourceTableItem mock enable")
		return r.cli.mock.mockOKRBatchUpdateOKRMetricSourceTableItem(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "OKR",
		API:                   "BatchUpdateOKRMetricSourceTableItem",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/okr/v1/metric_sources/:metric_source_id/tables/:metric_table_id/items/batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchUpdateOKRMetricSourceTableItemResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockOKRBatchUpdateOKRMetricSourceTableItem mock OKRBatchUpdateOKRMetricSourceTableItem method
func (r *Mock) MockOKRBatchUpdateOKRMetricSourceTableItem(f func(ctx context.Context, request *BatchUpdateOKRMetricSourceTableItemReq, options ...MethodOptionFunc) (*BatchUpdateOKRMetricSourceTableItemResp, *Response, error)) {
	r.mockOKRBatchUpdateOKRMetricSourceTableItem = f
}

// UnMockOKRBatchUpdateOKRMetricSourceTableItem un-mock OKRBatchUpdateOKRMetricSourceTableItem method
func (r *Mock) UnMockOKRBatchUpdateOKRMetricSourceTableItem() {
	r.mockOKRBatchUpdateOKRMetricSourceTableItem = nil
}

// BatchUpdateOKRMetricSourceTableItemReq ...
type BatchUpdateOKRMetricSourceTableItemReq struct {
	MetricSourceID string                                        `path:"metric_source_id" json:"-"` // okr指标库id, 示例值: "7041857032248410131"
	MetricTableID  string                                        `path:"metric_table_id" json:"-"`  // okr指标表id, 示例值: "7041857032248410131"
	UserIDType     *IDType                                       `query:"user_id_type" json:"-"`    // 用户 ID 类型, 示例值: "open_id", 可选值有: open_id: 用户的 open id, union_id: 用户的 union id, user_id: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Items          []*BatchUpdateOKRMetricSourceTableItemReqItem `json:"items,omitempty"`           // 指标列表
}

// BatchUpdateOKRMetricSourceTableItemReqItem ...
type BatchUpdateOKRMetricSourceTableItemReqItem struct {
	MetricItemID       string   `json:"metric_item_id,omitempty"`       // 指标表id, 示例值: "635782378412311"
	MetricInitialValue *float64 `json:"metric_initial_value,omitempty"` // 指标起始值, 示例值: 1.0
	MetricTargetValue  *float64 `json:"metric_target_value,omitempty"`  // 指标目标值, 示例值: 3.0
	MetricCurrentValue *float64 `json:"metric_current_value,omitempty"` // 指标进度值, 示例值: 2.0
	SupportedUserID    *string  `json:"supported_user_id,omitempty"`    // 指标支撑的上级人员 id, 示例值: "7041857032248410131"
}

// BatchUpdateOKRMetricSourceTableItemResp ...
type BatchUpdateOKRMetricSourceTableItemResp struct {
	Items       []*BatchUpdateOKRMetricSourceTableItemRespItem       `json:"items,omitempty"`        // 指标项列表
	FailedItems []*BatchUpdateOKRMetricSourceTableItemRespFailedItem `json:"failed_items,omitempty"` // 更新失败列表
}

// BatchUpdateOKRMetricSourceTableItemRespFailedItem ...
type BatchUpdateOKRMetricSourceTableItemRespFailedItem struct {
	MetricItemID string `json:"metric_item_id,omitempty"` // 指标项ID
	Reason       string `json:"reason,omitempty"`         // 失败原因
}

// BatchUpdateOKRMetricSourceTableItemRespItem ...
type BatchUpdateOKRMetricSourceTableItemRespItem struct {
	MetricItemID       string                                                 `json:"metric_item_id,omitempty"`       // 指标项id
	UserID             string                                                 `json:"user_id,omitempty"`              // 指标承接人员id
	PeriodID           string                                                 `json:"period_id,omitempty"`            // 指标的okr周期
	MetricUnit         *BatchUpdateOKRMetricSourceTableItemRespItemMetricUnit `json:"metric_unit,omitempty"`          // 指标单位
	MetricInitialValue float64                                                `json:"metric_initial_value,omitempty"` // 指标起始值
	MetricTargetValue  float64                                                `json:"metric_target_value,omitempty"`  // 指标目标值
	MetricCurrentValue float64                                                `json:"metric_current_value,omitempty"` // 指标进度值
	SupportedUserID    string                                                 `json:"supported_user_id,omitempty"`    // 指标支撑的上级人员id
	KrID               string                                                 `json:"kr_id,omitempty"`                // 指标关联的kr
	UpdatedAt          string                                                 `json:"updated_at,omitempty"`           // 更新时间
	UpdatedBy          string                                                 `json:"updated_by,omitempty"`           // 更新人
}

// BatchUpdateOKRMetricSourceTableItemRespItemMetricUnit ...
type BatchUpdateOKRMetricSourceTableItemRespItemMetricUnit struct {
	ZhCn string `json:"zh_cn,omitempty"` // 指标单位中文
	EnUs string `json:"en_us,omitempty"` // 指标单位英文
	JaJp string `json:"ja_jp,omitempty"` // 指标单位日文
}

// batchUpdateOKRMetricSourceTableItemResp ...
type batchUpdateOKRMetricSourceTableItemResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *BatchUpdateOKRMetricSourceTableItemResp `json:"data,omitempty"`
}
