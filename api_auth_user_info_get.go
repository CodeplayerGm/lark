// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetUserInfo 通过 user_access_token 获取登录用户的信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/user_info
func (r *AuthService) GetUserInfo(ctx context.Context, request *GetUserInfoReq, options ...MethodOptionFunc) (*GetUserInfoResp, *Response, error) {
	if r.cli.mock.mockAuthGetUserInfo != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#GetUserInfo mock enable")
		return r.cli.mock.mockAuthGetUserInfo(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Auth",
		API:                 "GetUserInfo",
		Method:              "GET",
		URL:                 "https://open.feishu.cn/open-apis/authen/v1/user_info",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getUserInfoResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAuthGetUserInfo(f func(ctx context.Context, request *GetUserInfoReq, options ...MethodOptionFunc) (*GetUserInfoResp, *Response, error)) {
	r.mockAuthGetUserInfo = f
}

func (r *Mock) UnMockAuthGetUserInfo() {
	r.mockAuthGetUserInfo = nil
}

type GetUserInfoReq struct{}

type getUserInfoResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetUserInfoResp `json:"data,omitempty"`
}

type GetUserInfoResp struct {
	Name         string `json:"name,omitempty"`          // 用户姓名
	EnName       string `json:"en_name,omitempty"`       // 用户英文名称
	AvatarURL    string `json:"avatar_url,omitempty"`    // 用户头像
	AvatarThumb  string `json:"avatar_thumb,omitempty"`  // 用户头像 72x72
	AvatarMiddle string `json:"avatar_middle,omitempty"` // 用户头像 240x240
	AvatarBig    string `json:"avatar_big,omitempty"`    // 用户头像 640x640
	OpenID       string `json:"open_id,omitempty"`       // 用户在应用内的唯一标识
	UnionID      string `json:"union_id,omitempty"`      // 用户对ISV的唯一标识，对于同一个ISV，用户在其名下所有应用的union_id相同
	Email        string `json:"email,omitempty"`         // 用户邮箱, 字段权限要求:  获取用户邮箱信息
	UserID       string `json:"user_id,omitempty"`       // 用户 user_id, 字段权限要求:  获取用户 userid
	Mobile       string `json:"mobile,omitempty"`        // 用户手机号, 字段权限要求:  获取用户手机号
	TenantKey    string `json:"tenant_key,omitempty"`    // 当前企业标识
}
