// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// AppendSheetValue
//
// 该接口用于根据 spreadsheetToken 和 range 遇到空行则进行覆盖追加或新增行追加数据。 空行：默认该行第一个格子是空，则认为是空行；单次写入不超过5000行，100列，每个格子不超过5万字符。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMjMzUjLzIzM14yMyMTN
func (r *DriveService) AppendSheetValue(ctx context.Context, request *AppendSheetValueReq, options ...MethodOptionFunc) (*AppendSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveAppendSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#AppendSheetValue mock enable")
		return r.cli.mock.mockDriveAppendSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "AppendSheetValue",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_append",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(appendSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveAppendSheetValue mock DriveAppendSheetValue method
func (r *Mock) MockDriveAppendSheetValue(f func(ctx context.Context, request *AppendSheetValueReq, options ...MethodOptionFunc) (*AppendSheetValueResp, *Response, error)) {
	r.mockDriveAppendSheetValue = f
}

// UnMockDriveAppendSheetValue un-mock DriveAppendSheetValue method
func (r *Mock) UnMockDriveAppendSheetValue() {
	r.mockDriveAppendSheetValue = nil
}

// AppendSheetValueReq ...
type AppendSheetValueReq struct {
	InsertDataOption *string                        `query:"insertDataOption" json:"-"` // 遇到空行追加，默认 OVERWRITE，若空行的数量小于追加数据的行数，则会覆盖已有数据；可选 INSERT_ROWS ，会在插入足够数量的行后再进行数据追加
	SpreadSheetToken string                         `path:"spreadsheetToken" json:"-"`  // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRange       *AppendSheetValueReqValueRange `json:"valueRange,omitempty"`       // 值与范围
}

// AppendSheetValueReqValueRange ...
type AppendSheetValueReqValueRange struct {
	Range  string           `json:"range,omitempty"`  // ⁣查询范围，包含 sheetId 与单元格范围两部分，目前支持三种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。range所表示的范围需要大于等于values占用的范围。
	Values [][]SheetContent `json:"values,omitempty"` // 需要写入的值，如要写入公式、超链接、email、@人等，可详看附录[sheet 支持写入数据类型](https://open.feishu.cn/document/ukTMukTMukTM/ugjN1UjL4YTN14CO2UTN)
}

// appendSheetValueResp ...
type appendSheetValueResp struct {
	Code int64                 `json:"code,omitempty"`
	Msg  string                `json:"msg,omitempty"`
	Data *AppendSheetValueResp `json:"data,omitempty"`
}

// AppendSheetValueResp ...
type AppendSheetValueResp struct {
	SpreadSheetToken string                       `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	TableRange       string                       `json:"tableRange,omitempty"`       // 写入的范围
	Revision         int64                        `json:"revision,omitempty"`         // sheet 的版本号
	Updates          *AppendSheetValueRespUpdates `json:"updates,omitempty"`          // 插入数据的范围、行列数等
}

// AppendSheetValueRespUpdates ...
type AppendSheetValueRespUpdates struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 写入的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 写入的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 写入的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 写入的单元格总数
	Revision         int64  `json:"revision,omitempty"`         // sheet 的版本号
}
