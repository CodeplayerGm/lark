// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// UncompleteTask 该接口用于取消任务的已完成状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/uncomplete
func (r *TaskService) UncompleteTask(ctx context.Context, request *UncompleteTaskReq, options ...MethodOptionFunc) (*UncompleteTaskResp, *Response, error) {
	if r.cli.mock.mockTaskUncompleteTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#UncompleteTask mock enable")
		return r.cli.mock.mockTaskUncompleteTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "UncompleteTask",
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/task/v1/tasks/:task_id/uncomplete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(uncompleteTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskUncompleteTask(f func(ctx context.Context, request *UncompleteTaskReq, options ...MethodOptionFunc) (*UncompleteTaskResp, *Response, error)) {
	r.mockTaskUncompleteTask = f
}

func (r *Mock) UnMockTaskUncompleteTask() {
	r.mockTaskUncompleteTask = nil
}

type UncompleteTaskReq struct {
	TaskID string `path:"task_id" json:"-"` // 任务 ID, 示例值："bb54ab99-d360-434f-bcaa-a4cc4c05840e"
}

type uncompleteTaskResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *UncompleteTaskResp `json:"data,omitempty"`
}

type UncompleteTaskResp struct{}
