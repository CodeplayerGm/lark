// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetAttendanceUserTask
//
// 获取企业内员工的实际打卡结果，包括上班打卡结果和下班打卡结果。
// * 如果企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，即使员工在这期间打了多次卡，该接口也只会返回 1 条记录。
// * 如果要获取打卡的详细数据，如打卡位置等信息，可使用“获取打卡流水记录”或“批量查询打卡流水记录”的接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//GetCheckinResults
func (r *AttendanceService) GetAttendanceUserTask(ctx context.Context, request *GetAttendanceUserTaskReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserTask mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_tasks/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceUserTask(f func(ctx context.Context, request *GetAttendanceUserTaskReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserTask = f
}

func (r *Mock) UnMockAttendanceGetAttendanceUserTask() {
	r.mockAttendanceGetAttendanceUserTask = nil
}

type GetAttendanceUserTaskReq struct {
	EmployeeType       EmployeeType `query:"employee_type" json:"-"`        // 请求体中的 user_ids 的员工工号类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值：“employee_id”
	IgnoreInvalidUsers *bool        `query:"ignore_invalid_users" json:"-"` // 是否忽略无效和没有权限的用户。如果 true，返回有效用户的数据，并告知无效和没有权限的用户；如果 false，且 user_ids 中存在无效或没有权限的用户，返回错误
	UserIDs            []string     `json:"user_ids,omitempty"`             // employee_no 或 employee_id 列表
	CheckDateFrom      int64        `json:"check_date_from,omitempty"`      // 查询的起始工作日
	CheckDateTo        int64        `json:"check_date_to,omitempty"`        // 查询的结束工作日，与 check_date_from 的时间间隔不超过30天
}

type getAttendanceUserTaskResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserTaskResp `json:"data,omitempty"` // -
}

type GetAttendanceUserTaskResp struct {
	UserTaskResults     []*GetAttendanceUserTaskRespUserTaskResult `json:"user_task_results,omitempty"`     // 打卡任务列表
	InvalidUserIDs      []string                                   `json:"invalid_user_ids,omitempty"`      // 无效用户工号列表
	UnauthorizedUserIDs []string                                   `json:"unauthorized_user_ids,omitempty"` // 没有权限用户工号列表
}

type GetAttendanceUserTaskRespUserTaskResult struct {
	ResultID     string                                           `json:"result_id,omitempty"`     // 打卡记录 ID
	UserID       string                                           `json:"user_id,omitempty"`       // employee ID
	EmployeeName string                                           `json:"employee_name,omitempty"` // employee 姓名
	Day          int64                                            `json:"day,omitempty"`           // 日期
	GroupID      string                                           `json:"group_id,omitempty"`      // 考勤组 ID
	ShiftID      string                                           `json:"shift_id,omitempty"`      // 班次 ID
	Records      []*GetAttendanceUserTaskRespUserTaskResultRecord `json:"records,omitempty"`       // 用户考勤记录
}

type GetAttendanceUserTaskRespUserTaskResultRecord struct {
	CheckInRecordID          string                                                       `json:"check_in_record_id,omitempty"`          // 上班打卡记录 ID
	CheckInRecord            *GetAttendanceUserTaskRespUserTaskResultRecordCheckInRecord  `json:"check_in_record,omitempty"`             // 上班打卡记录
	CheckOutRecordID         string                                                       `json:"check_out_record_id,omitempty"`         // 下班打卡记录 ID
	CheckOutRecord           *GetAttendanceUserTaskRespUserTaskResultRecordCheckOutRecord `json:"check_out_record,omitempty"`            // 下班打卡记录
	CheckInResult            string                                                       `json:"check_in_result,omitempty"`             // 上班打卡结果，可用值：【NoNeedCheck（无需打卡），SystemCheck（系统打卡），Normal（正常），Early（早退），Late（迟到），Lack（缺卡）】
	CheckOutResult           string                                                       `json:"check_out_result,omitempty"`            // 下班打卡结果，可用值：【NoNeedCheck（无需打卡），SystemCheck（系统打卡），Normal（正常），Early（早退），Late（迟到），Lack（缺卡）】
	CheckInResultSupplement  string                                                       `json:"check_in_result_supplement,omitempty"`  // 上班打卡结果补充，可用值：【None（无），ManagerModification（管理员修改），CardReplacement（补卡通过），ShiftChange（换班），Travel（出差），Leave（请假），GoOut（外出），CardReplacementApplication（补卡申请中），FieldPunch（外勤打卡）】
	CheckOutResultSupplement string                                                       `json:"check_out_result_supplement,omitempty"` // 下班打卡结果补充，可用值：【None（无），ManagerModification（管理员修改），CardReplacement（补卡通过），ShiftChange（换班），Travel（出差），Leave（请假），GoOut（外出），CardReplacementApplication（补卡申请中），FieldPunch（外勤打卡）】
	CheckInShiftTime         string                                                       `json:"check_in_shift_time,omitempty"`         // 正常默认上班时间，精确到秒的时间戳
	CheckOutShiftTime        string                                                       `json:"check_out_shift_time,omitempty"`        // 正常默认下班时间，精确到秒的时间戳
}

type GetAttendanceUserTaskRespUserTaskResultRecordCheckInRecord struct {
	UserID       string   `json:"user_id,omitempty"`       // 员工工号
	CreatorID    string   `json:"creator_id,omitempty"`    // 打卡记录创建者的 employee_no
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式，可用值：【0（用户自己打卡），1（管理员修改），2（用户补卡），3（系统自动生成），4（下班免打卡），5（考勤机打卡），6（极速打卡），7（考勤开放平台导入），8（飞书自研考勤机），9（飞书门禁考勤机）】
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 手机打卡设备ID
}

type GetAttendanceUserTaskRespUserTaskResultRecordCheckOutRecord struct {
	UserID       string   `json:"user_id,omitempty"`       // 员工工号
	CreatorID    string   `json:"creator_id,omitempty"`    // 打卡记录创建者的 employee_no
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式，可用值：【0（用户自己打卡），1（管理员修改），2（用户补卡），3（系统自动生成），4（下班免打卡），5（考勤机打卡），6（极速打卡），7（考勤开放平台导入），8（飞书自研考勤机），9（飞书门禁考勤机）】
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 手机打卡设备ID
}
