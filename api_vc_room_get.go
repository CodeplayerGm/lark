// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetVCRoom 该接口可以使用会议室ID查询会议室详情
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/get
func (r *VCService) GetVCRoom(ctx context.Context, request *GetVCRoomReq, options ...MethodOptionFunc) (*GetVCRoomResp, *Response, error) {
	if r.cli.mock.mockVCGetVCRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCRoom mock enable")
		return r.cli.mock.mockVCGetVCRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "GetVCRoom",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/rooms/:room_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getVCRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCGetVCRoom mock VCGetVCRoom method
func (r *Mock) MockVCGetVCRoom(f func(ctx context.Context, request *GetVCRoomReq, options ...MethodOptionFunc) (*GetVCRoomResp, *Response, error)) {
	r.mockVCGetVCRoom = f
}

// UnMockVCGetVCRoom un-mock VCGetVCRoom method
func (r *Mock) UnMockVCGetVCRoom() {
	r.mockVCGetVCRoom = nil
}

// GetVCRoomReq ...
type GetVCRoomReq struct {
	RoomID     string  `path:"room_id" json:"-"`       // 会议室ID, 示例值: "omm_4de32cf10a4358788ff4e09e37ebbf9c"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: "open_id", 可选值有: open_id: 用户的 open id, union_id: 用户的 union id, user_id: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// GetVCRoomResp ...
type GetVCRoomResp struct {
	Room *GetVCRoomRespRoom `json:"room,omitempty"` // 会议室详情
}

// GetVCRoomRespRoom ...
type GetVCRoomRespRoom struct {
	RoomID       string                       `json:"room_id,omitempty"`        // 会议室ID
	Name         string                       `json:"name,omitempty"`           // 会议室名称
	Capacity     int64                        `json:"capacity,omitempty"`       // 会议室能容纳的人数
	Description  string                       `json:"description,omitempty"`    // 会议室的相关描述
	DisplayID    string                       `json:"display_id,omitempty"`     // 会议室的展示ID
	CustomRoomID string                       `json:"custom_room_id,omitempty"` // 自定义的会议室ID
	RoomLevelID  string                       `json:"room_level_id,omitempty"`  // 层级ID
	Path         []string                     `json:"path,omitempty"`           // 层级路径
	RoomStatus   *GetVCRoomRespRoomRoomStatus `json:"room_status,omitempty"`    // 会议室状态
}

// GetVCRoomRespRoomRoomStatus ...
type GetVCRoomRespRoomRoomStatus struct {
	Status           bool     `json:"status,omitempty"`             // 是否启用会议室
	ScheduleStatus   bool     `json:"schedule_status,omitempty"`    // 会议室未来状态为启用或禁用
	DisableStartTime string   `json:"disable_start_time,omitempty"` // 禁用开始时间（unix时间, 单位sec）
	DisableEndTime   string   `json:"disable_end_time,omitempty"`   // 禁用结束时间（unix时间, 单位sec, 数值0表示永久禁用）
	DisableReason    string   `json:"disable_reason,omitempty"`     // 禁用原因
	ContactIDs       []string `json:"contact_ids,omitempty"`        // 联系人列表, id类型由user_id_type参数决定
	DisableNotice    bool     `json:"disable_notice,omitempty"`     // 是否在禁用时发送通知给预定了该会议室的员工
	ResumeNotice     bool     `json:"resume_notice,omitempty"`      // 是否在恢复启用时发送通知给预定了该会议室的员工
}

// getVCRoomResp ...
type getVCRoomResp struct {
	Code int64          `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string         `json:"msg,omitempty"`  // 错误描述
	Data *GetVCRoomResp `json:"data,omitempty"`
}
