// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetCoreHrEmployeeTypeList 批量查询人员类型。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/list
func (r *CoreHrService) GetCoreHrEmployeeTypeList(ctx context.Context, request *GetCoreHrEmployeeTypeListReq, options ...MethodOptionFunc) (*GetCoreHrEmployeeTypeListResp, *Response, error) {
	if r.cli.mock.mockCoreHrGetCoreHrEmployeeTypeList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] CoreHr#GetCoreHrEmployeeTypeList mock enable")
		return r.cli.mock.mockCoreHrGetCoreHrEmployeeTypeList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "CoreHr",
		API:                   "GetCoreHrEmployeeTypeList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/corehr/v1/employee_types",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getCoreHrEmployeeTypeListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCoreHrGetCoreHrEmployeeTypeList mock CoreHrGetCoreHrEmployeeTypeList method
func (r *Mock) MockCoreHrGetCoreHrEmployeeTypeList(f func(ctx context.Context, request *GetCoreHrEmployeeTypeListReq, options ...MethodOptionFunc) (*GetCoreHrEmployeeTypeListResp, *Response, error)) {
	r.mockCoreHrGetCoreHrEmployeeTypeList = f
}

// UnMockCoreHrGetCoreHrEmployeeTypeList un-mock CoreHrGetCoreHrEmployeeTypeList method
func (r *Mock) UnMockCoreHrGetCoreHrEmployeeTypeList() {
	r.mockCoreHrGetCoreHrEmployeeTypeList = nil
}

// GetCoreHrEmployeeTypeListReq ...
type GetCoreHrEmployeeTypeListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: 1231231987
	PageSize  int64   `query:"page_size" json:"-"`  // 分页大小, 示例值: 100
}

// GetCoreHrEmployeeTypeListResp ...
type GetCoreHrEmployeeTypeListResp struct {
	Items     []*GetCoreHrEmployeeTypeListRespItem `json:"items,omitempty"`      // 查询的雇员类型信息
	HasMore   bool                                 `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                               `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
}

// GetCoreHrEmployeeTypeListRespItem ...
type GetCoreHrEmployeeTypeListRespItem struct {
	ID                  string                                          `json:"id,omitempty"`                    // 雇员类型ID
	Name                []*GetCoreHrEmployeeTypeListRespItemName        `json:"name,omitempty"`                  // 名称
	DefaultEmployeeType bool                                            `json:"default_employee_type,omitempty"` // 是否为默认人员类型, 每个租户只能定义一个默认人员类型
	Active              bool                                            `json:"active,omitempty"`                // 启用
	Code                string                                          `json:"code,omitempty"`                  // 编码
	CustomFields        []*GetCoreHrEmployeeTypeListRespItemCustomField `json:"custom_fields,omitempty"`         // 自定义字段
}

// GetCoreHrEmployeeTypeListRespItemCustomField ...
type GetCoreHrEmployeeTypeListRespItemCustomField struct {
	FieldName string `json:"field_name,omitempty"` // 字段名
	Value     string `json:"value,omitempty"`      // 字段值, 是json转义后的字符串, 根据元数据定义不同, 字段格式不同(如123, 123.23, "true", [\"id1\", \"id2\"], "2006-01-02 15:04:05")
}

// GetCoreHrEmployeeTypeListRespItemName ...
type GetCoreHrEmployeeTypeListRespItemName struct {
	Lang  string `json:"lang,omitempty"`  // 名称信息的语言
	Value string `json:"value,omitempty"` // 名称信息的内容
}

// getCoreHrEmployeeTypeListResp ...
type getCoreHrEmployeeTypeListResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *GetCoreHrEmployeeTypeListResp `json:"data,omitempty"`
}
