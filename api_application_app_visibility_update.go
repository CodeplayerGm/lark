// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// UpdateApplicationAppVisibility
//
// 该接口用于增加或者删除指定应用被哪些人可用，只能被企业自建应用调用。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucDN3UjL3QzN14yN0cTN
func (r *ApplicationService) UpdateApplicationAppVisibility(ctx context.Context, request *UpdateApplicationAppVisibilityReq, options ...MethodOptionFunc) (*UpdateApplicationAppVisibilityResp, *Response, error) {
	if r.cli.mock.mockApplicationUpdateApplicationAppVisibility != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#UpdateApplicationAppVisibility mock enable")
		return r.cli.mock.mockApplicationUpdateApplicationAppVisibility(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "UpdateApplicationAppVisibility",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v3/app/update_visibility",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApplicationAppVisibilityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockApplicationUpdateApplicationAppVisibility(f func(ctx context.Context, request *UpdateApplicationAppVisibilityReq, options ...MethodOptionFunc) (*UpdateApplicationAppVisibilityResp, *Response, error)) {
	r.mockApplicationUpdateApplicationAppVisibility = f
}

func (r *Mock) UnMockApplicationUpdateApplicationAppVisibility() {
	r.mockApplicationUpdateApplicationAppVisibility = nil
}

type UpdateApplicationAppVisibilityReq struct {
	AppID           string                                     `json:"app_id,omitempty"`             // 目标应用的 ID
	DelUsers        *UpdateApplicationAppVisibilityReqDelUsers `json:"del_users,omitempty"`          // 删除的用户列表，元素个数不超过 500，**先增加后删除**
	AddUsers        *UpdateApplicationAppVisibilityReqAddUsers `json:"add_users,omitempty"`          // 增加的用户列表，元素个数不超过500，**先增加后删除**
	IsVisiableToAll *int64                                     `json:"is_visiable_to_all,omitempty"` // 是否全员可见，0：否；1：是；不填：继续当前状态不改变
	AddDepartments  []string                                   `json:"add_departments,omitempty"`    // 添加的部门列表，元素个数不超过 500，**先增加后删除**
	DelDepartments  []string                                   `json:"del_departments,omitempty"`    // 删除的部门列表，元素个数不超过 500，**先增加后删除**
}

type UpdateApplicationAppVisibilityReqDelUsers struct {
	OpenID *string `json:"open_id,omitempty"` // 与 user_id 至少给其中之一，user_id 优先于 open_id
	UserID *string `json:"user_id,omitempty"`
}

type UpdateApplicationAppVisibilityReqAddUsers struct {
	OpenID *string `json:"open_id,omitempty"` // 与 user_id 至少给其中之一，user_id 优先于 open_id
	UserID *string `json:"user_id,omitempty"`
}

type updateApplicationAppVisibilityResp struct {
	Code int64                               `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 返回码的描述
	Data *UpdateApplicationAppVisibilityResp `json:"data,omitempty"` // 返回的业务信息
}

type UpdateApplicationAppVisibilityResp struct{}
