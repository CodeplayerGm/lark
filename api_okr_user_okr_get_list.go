// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetUserOKRList 根据用户的id获取OKR列表
//
// 使用tenant_access_token需要额外申请权限<md-perm
// href="/ssl:ttdoc/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN">以应用身份访问OKR信息</md-perm>
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/user-okr/list
func (r *OKRService) GetUserOKRList(ctx context.Context, request *GetUserOKRListReq, options ...MethodOptionFunc) (*GetUserOKRListResp, *Response, error) {
	if r.cli.mock.mockOKRGetUserOKRList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] OKR#GetUserOKRList mock enable")
		return r.cli.mock.mockOKRGetUserOKRList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "OKR",
		API:                   "GetUserOKRList",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/okr/v1/users/:user_id/okrs",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getUserOKRListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockOKRGetUserOKRList(f func(ctx context.Context, request *GetUserOKRListReq, options ...MethodOptionFunc) (*GetUserOKRListResp, *Response, error)) {
	r.mockOKRGetUserOKRList = f
}

func (r *Mock) UnMockOKRGetUserOKRList() {
	r.mockOKRGetUserOKRList = nil
}

type GetUserOKRListReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Offset     string  `query:"offset" json:"-"`       // 请求列表的偏移，offset>=0，请求Query中, 示例值："0"
	Limit      string  `query:"limit" json:"-"`        // 请求列表的长度，0<limit<=10，请求Query中, 示例值："0"
	Lang       *string `query:"lang" json:"-"`         // 请求OKR的语言版本（比如@的人名），lang=en_us/zh_cn，请求 Query中, 示例值："zh_cn", 默认值: `zh_cn`
	UserID     string  `path:"user_id" json:"-"`       // 目标用户id, 示例值："ou-asdasdasdasdasd"
}

type getUserOKRListResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetUserOKRListResp `json:"data,omitempty"`
}

type GetUserOKRListResp struct {
	Total   int64                    `json:"total,omitempty"`    // OKR周期总数
	OKRList []*GetUserOKRListRespOKR `json:"okr_list,omitempty"` // OKR 列表
}

type GetUserOKRListRespOKR struct {
	ID            string                            `json:"id,omitempty"`             // id
	Permission    int64                             `json:"permission,omitempty"`     // OKR的访问权限, 可选值有: `0`：此时OKR只返回id, `1`：返回OKR的其他具体字段
	Name          string                            `json:"name,omitempty"`           // 名称
	ObjectiveList []*GetUserOKRListRespOKRObjective `json:"objective_list,omitempty"` // Objective列表
}

type GetUserOKRListRespOKRObjective struct {
	ID                    string                                             `json:"id,omitempty"`                      // Objective ID
	Permission            int64                                              `json:"permission,omitempty"`              // 权限, 可选值有: `0`：此时OKR只返回id, `1`：返回OKR的其他具体字段
	Content               string                                             `json:"content,omitempty"`                 // Objective 内容
	ProgressReport        string                                             `json:"progress_report,omitempty"`         // Objective 进度记录内容
	Score                 int64                                              `json:"score,omitempty"`                   // Objective 分数（0 - 100）
	Weight                float64                                            `json:"weight,omitempty"`                  // Objective的权重（0 - 100）
	ProgressRate          *GetUserOKRListRespOKRObjectiveProgressRate        `json:"progress_rate,omitempty"`           // Objective进度
	KrList                []*GetUserOKRListRespOKRObjectiveKr                `json:"kr_list,omitempty"`                 // Objective KeyResult 列表
	AlignedObjectiveList  []*GetUserOKRListRespOKRObjectiveAlignedObjective  `json:"aligned_objective_list,omitempty"`  // 对齐到该Objective的Objective列表
	AligningObjectiveList []*GetUserOKRListRespOKRObjectiveAligningObjective `json:"aligning_objective_list,omitempty"` // 该Objective对齐到的Objective列表
}

type GetUserOKRListRespOKRObjectiveProgressRate struct {
	Percent int64  `json:"percent,omitempty"` // Objective 进度百分比 >= 0
	Status  string `json:"status,omitempty"`  // Objective 进度状态, 可选值有: `-1`：未更新, `0`：正常, `1`：有风险, `2`：已延期
}

type GetUserOKRListRespOKRObjectiveKr struct {
	ID           string                                        `json:"id,omitempty"`            // Key Result ID
	Content      string                                        `json:"content,omitempty"`       // KeyResult 内容
	Score        int64                                         `json:"score,omitempty"`         // KeyResult打分（0 - 100）
	Weight       int64                                         `json:"weight,omitempty"`        // KeyResult权重（0 - 100）（废弃）
	KrWeight     float64                                       `json:"kr_weight,omitempty"`     // KeyResult的权重（0 - 100）
	ProgressRate *GetUserOKRListRespOKRObjectiveKrProgressRate `json:"progress_rate,omitempty"` // KR进度
}

type GetUserOKRListRespOKRObjectiveKrProgressRate struct {
	Percent int64  `json:"percent,omitempty"` // Objective 进度百分比 >= 0
	Status  string `json:"status,omitempty"`  // Objective 进度状态, 可选值有: `-1`：未更新, `0`：正常, `1`：有风险, `2`：已延期
}

type GetUserOKRListRespOKRObjectiveAlignedObjective struct {
	ID    string                                               `json:"id,omitempty"`     // Objective的ID
	OKRID string                                               `json:"okr_id,omitempty"` // OKR的ID
	Owner *GetUserOKRListRespOKRObjectiveAlignedObjectiveOwner `json:"owner,omitempty"`  // 该Objective的Owner
}

type GetUserOKRListRespOKRObjectiveAlignedObjectiveOwner struct {
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id
}

type GetUserOKRListRespOKRObjectiveAligningObjective struct {
	ID    string                                                `json:"id,omitempty"`     // Objective的ID
	OKRID string                                                `json:"okr_id,omitempty"` // OKR的ID
	Owner *GetUserOKRListRespOKRObjectiveAligningObjectiveOwner `json:"owner,omitempty"`  // 该Objective的Owner
}

type GetUserOKRListRespOKRObjectiveAligningObjectiveOwner struct {
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id
}
