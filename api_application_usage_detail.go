// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetApplicationUsageDetail
//
// 查询应用在指定时间段内企业员工的使用详细信息。
// :::warning
// 此接口目前仅支持小程序的使用情况查询，不支持网页应用和机器人应用的使用情况查询;仅支持查询自建应用，不支持查询商店应用
// :::
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMTN0YjLzUDN24yM1QjN
func (r *ApplicationService) GetApplicationUsageDetail(ctx context.Context, request *GetApplicationUsageDetailReq, options ...MethodOptionFunc) (*GetApplicationUsageDetailResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationUsageDetail != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationUsageDetail mock enable")
		return r.cli.mock.mockApplicationGetApplicationUsageDetail(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationUsageDetail",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v1/app_usage_detail",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationUsageDetailResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockApplicationGetApplicationUsageDetail(f func(ctx context.Context, request *GetApplicationUsageDetailReq, options ...MethodOptionFunc) (*GetApplicationUsageDetailResp, *Response, error)) {
	r.mockApplicationGetApplicationUsageDetail = f
}

func (r *Mock) UnMockApplicationGetApplicationUsageDetail() {
	r.mockApplicationGetApplicationUsageDetail = nil
}

type GetApplicationUsageDetailReq struct {
	AppID     string                                `json:"app_id,omitempty"`     // 目标应用的 ID，支持自建应用
	Ability   string                                `json:"ability,omitempty"`    // 应用能力，mp：小程序
	TimeStart int64                                 `json:"time_start,omitempty"` // 起始时间戳（秒），时间跨度最长支持180天
	TimeEnd   int64                                 `json:"time_end,omitempty"`   // 截止时间戳（秒），时间跨度最长支持180天
	Filters   []*GetApplicationUsageDetailReqFilter `json:"filters,omitempty"`    // 过滤条件
	OrderBy   *string                               `json:"order_by,omitempty"`   // 排序字段，大小写不敏感，支持open_id、timestamp，默认为open_id
	Order     *string                               `json:"order,omitempty"`      // 排序方式，大小写不敏感，desc：降序；asc：升序，默认值
	PageToken *string                               `json:"page_token,omitempty"` // 分页标记，首次传空，非首次使用返回中的page_token
	PageSize  *int64                                `json:"page_size,omitempty"`  // 分页大小，默认为512，取值区间[1,1000]
}

type GetApplicationUsageDetailReqFilter struct {
	Key   string `json:"key,omitempty"`   // 过滤字段，支持`department_id`
	Op    string `json:"op,omitempty"`    // 过滤操作，支持`in`、`=`
	Value string `json:"value,omitempty"` // 过滤字段值，多个使用英文逗号分隔
}

type getApplicationUsageDetailResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非0表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationUsageDetailResp `json:"data,omitempty"` // 返回的业务信息，仅code = 0时有效
}

type GetApplicationUsageDetailResp struct {
	HasMore   bool                                 `json:"has_more,omitempty"`   // 是否还有更多分页，当 has_more 为 true 时，会同时返回新的 page_token
	PageToken string                               `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Users     []*GetApplicationUsageDetailRespUser `json:"users,omitempty"`      // 用户列表
}

type GetApplicationUsageDetailRespUser struct {
	OpenID string `json:"open_id,omitempty"` // open_id
}
