// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteVCReserve 删除一个预约
//
// 只能删除归属于自己的预约；删除后数据不可恢复
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/delete
func (r *VCService) DeleteVCReserve(ctx context.Context, request *DeleteVCReserveReq, options ...MethodOptionFunc) (*DeleteVCReserveResp, *Response, error) {
	if r.cli.mock.mockVCDeleteVCReserve != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#DeleteVCReserve mock enable")
		return r.cli.mock.mockVCDeleteVCReserve(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "DeleteVCReserve",
		Method:              "DELETE",
		URL:                 "https://open.feishu.cn/open-apis/vc/v1/reserves/:reserve_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(deleteVCReserveResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCDeleteVCReserve(f func(ctx context.Context, request *DeleteVCReserveReq, options ...MethodOptionFunc) (*DeleteVCReserveResp, *Response, error)) {
	r.mockVCDeleteVCReserve = f
}

func (r *Mock) UnMockVCDeleteVCReserve() {
	r.mockVCDeleteVCReserve = nil
}

type DeleteVCReserveReq struct {
	ReserveID string `path:"reserve_id" json:"-"` // 预约ID, 示例值："6911188411932033028"
}

type deleteVCReserveResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *DeleteVCReserveResp `json:"data,omitempty"`
}

type DeleteVCReserveResp struct{}
