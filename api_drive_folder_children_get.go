// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetDriveFolderChildren
//
// 该接口用于根据 folderToken 获取该文件夹的文档清单，如 doc、sheet、folder。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uEjNzUjLxYzM14SM2MTN
func (r *DriveService) GetDriveFolderChildren(ctx context.Context, request *GetDriveFolderChildrenReq, options ...MethodOptionFunc) (*GetDriveFolderChildrenResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFolderChildren != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFolderChildren mock enable")
		return r.cli.mock.mockDriveGetDriveFolderChildren(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveFolderChildren",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/folder/:folderToken/children",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveFolderChildrenResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockDriveGetDriveFolderChildren(f func(ctx context.Context, request *GetDriveFolderChildrenReq, options ...MethodOptionFunc) (*GetDriveFolderChildrenResp, *Response, error)) {
	r.mockDriveGetDriveFolderChildren = f
}

func (r *Mock) UnMockDriveGetDriveFolderChildren() {
	r.mockDriveGetDriveFolderChildren = nil
}

type GetDriveFolderChildrenReq struct {
	Types       []string `query:"types" json:"-"`      // 需要查询的文件类型，默认返回所有 children；types 可多选，可选类型有 doc、sheet、file、folder 。如 url?types=folder&types=sheet
	FolderToken string   `path:"folderToken" json:"-"` // 文件夹的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
}

type getDriveFolderChildrenResp struct {
	Code int64                       `json:"code,omitempty"`
	Msg  string                      `json:"msg,omitempty"`
	Data *GetDriveFolderChildrenResp `json:"data,omitempty"`
}

type GetDriveFolderChildrenResp struct {
	ParentToken string                                         `json:"parentToken,omitempty"` // 文件夹的 token
	Children    map[string]*GetDriveFolderChildrenRespChildren `json:"children,omitempty"`    // 文件夹的下的文件
}

type GetDriveFolderChildrenRespChildren struct {
	Token string `json:"token,omitempty"` // 文件的 token
	Name  string `json:"name,omitempty"`  // 文件的标题
	Type  string `json:"type,omitempty"`  // 文件的类型
}
