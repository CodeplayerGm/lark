// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateBitableField 该接口用于在数据表中更新一个字段
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/update
func (r *BitableService) UpdateBitableField(ctx context.Context, request *UpdateBitableFieldReq, options ...MethodOptionFunc) (*UpdateBitableFieldResp, *Response, error) {
	if r.cli.mock.mockBitableUpdateBitableField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#UpdateBitableField mock enable")
		return r.cli.mock.mockBitableUpdateBitableField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "UpdateBitableField",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateBitableFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableUpdateBitableField mock BitableUpdateBitableField method
func (r *Mock) MockBitableUpdateBitableField(f func(ctx context.Context, request *UpdateBitableFieldReq, options ...MethodOptionFunc) (*UpdateBitableFieldResp, *Response, error)) {
	r.mockBitableUpdateBitableField = f
}

// UnMockBitableUpdateBitableField un-mock BitableUpdateBitableField method
func (r *Mock) UnMockBitableUpdateBitableField() {
	r.mockBitableUpdateBitableField = nil
}

// UpdateBitableFieldReq ...
type UpdateBitableFieldReq struct {
	AppToken  string                         `path:"app_token" json:"-"`   // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID   string                         `path:"table_id" json:"-"`    // table id, 示例值："tblsRc9GRRXKqhvW"
	FieldID   string                         `path:"field_id" json:"-"`    // field id, 示例值："fldPTb0U2y"
	FieldName string                         `json:"field_name,omitempty"` // 多维表格字段名, 示例值："多行文本"
	Type      int64                          `json:"type,omitempty"`       // 多维表格字段类型, 示例值：1, 可选值有: `1`：多行文本, `2`：数字, `3`：单选, `4`：多选, `5`：日期, `7`：复选框, `11`：人员, `15`：超链接, `17`：附件, `18`：关联, `20`：公式, `21`：双向关联, `1001`：创建时间, `1002`：最后更新时间, `1003`：创建人, `1004`：修改人
	Property  *UpdateBitableFieldReqProperty `json:"property,omitempty"`   // 字段属性，具体参考：[字段编辑指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/guide)
}

// UpdateBitableFieldReqProperty ...
type UpdateBitableFieldReqProperty struct {
	Options       []*UpdateBitableFieldReqPropertyOption `json:"options,omitempty"`         // 单选、多选字段的选项信息
	Formatter     *string                                `json:"formatter,omitempty"`       // 数字、公式字段的显示格式, 示例值："0"
	DateFormatter *string                                `json:"date_formatter,omitempty"`  // 日期、创建时间、最后更新时间字段的显示格式, 示例值："日期格式"
	AutoFill      *bool                                  `json:"auto_fill,omitempty"`       // 日期字段中新纪录自动填写创建时间, 示例值：false
	Multiple      *bool                                  `json:"multiple,omitempty"`        // 人员字段中允许添加多个成员，单向关联、双向关联中允许添加多个记录, 示例值：false
	TableID       *string                                `json:"table_id,omitempty"`        // 单向关联、双向关联字段中关联的数据表的id, 示例值："tblsRc9GRRXKqhvW"
	TableName     *string                                `json:"table_name,omitempty"`      // 单向关联、双向关联字段中关联的数据表的名字, 示例值：""table2""
	BackFieldName *string                                `json:"back_field_name,omitempty"` // 双向关联字段中关联的数据表中对应的双向关联字段的名字, 示例值：""table1-双向关联""
}

// UpdateBitableFieldReqPropertyOption ...
type UpdateBitableFieldReqPropertyOption struct {
	Name  *string `json:"name,omitempty"`  // 选项名, 示例值："红色"
	ID    *string `json:"id,omitempty"`    // 选项id, 示例值："optKl35lnG"
	Color *int64  `json:"color,omitempty"` // 选项颜色, 示例值：0, 取值范围：`0` ～ `54`
}

// updateBitableFieldResp ...
type updateBitableFieldResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *UpdateBitableFieldResp `json:"data,omitempty"`
}

// UpdateBitableFieldResp ...
type UpdateBitableFieldResp struct {
	Field *UpdateBitableFieldRespField `json:"field,omitempty"` // 字段
}

// UpdateBitableFieldRespField ...
type UpdateBitableFieldRespField struct {
	FieldID   string                               `json:"field_id,omitempty"`   // 多维表格字段 id
	FieldName string                               `json:"field_name,omitempty"` // 多维表格字段名
	Type      int64                                `json:"type,omitempty"`       // 多维表格字段类型, 可选值有: `1`：多行文本, `2`：数字, `3`：单选, `4`：多选, `5`：日期, `7`：复选框, `11`：人员, `15`：超链接, `17`：附件, `18`：关联, `20`：公式, `21`：双向关联, `1001`：创建时间, `1002`：最后更新时间, `1003`：创建人, `1004`：修改人
	Property  *UpdateBitableFieldRespFieldProperty `json:"property,omitempty"`   // 字段属性，具体参考：[字段编辑指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/guide)
}

// UpdateBitableFieldRespFieldProperty ...
type UpdateBitableFieldRespFieldProperty struct {
	Options       []*UpdateBitableFieldRespFieldPropertyOption `json:"options,omitempty"`         // 单选、多选字段的选项信息
	Formatter     string                                       `json:"formatter,omitempty"`       // 数字、公式字段的显示格式
	DateFormatter string                                       `json:"date_formatter,omitempty"`  // 日期、创建时间、最后更新时间字段的显示格式
	AutoFill      bool                                         `json:"auto_fill,omitempty"`       // 日期字段中新纪录自动填写创建时间
	Multiple      bool                                         `json:"multiple,omitempty"`        // 人员字段中允许添加多个成员，单向关联、双向关联中允许添加多个记录
	TableID       string                                       `json:"table_id,omitempty"`        // 单向关联、双向关联字段中关联的数据表的id
	TableName     string                                       `json:"table_name,omitempty"`      // 单向关联、双向关联字段中关联的数据表的名字
	BackFieldName string                                       `json:"back_field_name,omitempty"` // 双向关联字段中关联的数据表中对应的双向关联字段的名字
}

// UpdateBitableFieldRespFieldPropertyOption ...
type UpdateBitableFieldRespFieldPropertyOption struct {
	Name  string `json:"name,omitempty"`  // 选项名
	ID    string `json:"id,omitempty"`    // 选项id
	Color int64  `json:"color,omitempty"` // 选项颜色
}
