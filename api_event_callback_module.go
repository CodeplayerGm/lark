// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
	"encoding/json"
	"fmt"
)

type EventType string

const (
	EventTypeV2AwemeEcosystemAwemeUserBindedAccountV1 EventType = "aweme_ecosystem.aweme_user.binded_account_v1"
	EventTypeV2TaskTaskUpdatedV1                      EventType = "task.task.updated_v1"
	EventTypeV2TaskTaskCommentUpdatedV1               EventType = "task.task.comment.updated_v1"
	EventTypeV2HelpdeskTicketMessageCreatedV1         EventType = "helpdesk.ticket_message.created_v1"
	EventTypeV2HelpdeskTicketCreatedV1                EventType = "helpdesk.ticket.created_v1"
	EventTypeV2HelpdeskTicketMessageUpdatedV1         EventType = "helpdesk.ticket.updated_v1"
	EventTypeV2ContactDepartmentCreatedV3             EventType = "contact.department.created_v3"
	EventTypeV2ContactDepartmentDeletedV3             EventType = "contact.department.deleted_v3"
	EventTypeV2ContactDepartmentUpdatedV3             EventType = "contact.department.updated_v3"
	EventTypeV2ContactUserUpdatedV3                   EventType = "contact.user.updated_v3"
	EventTypeV2ContactUserCreatedV3                   EventType = "contact.user.created_v3"
	EventTypeV2ContactUserDeletedV3                   EventType = "contact.user.deleted_v3"
	EventTypeV2ContactScopeUpdatedV3                  EventType = "contact.scope.updated_v3"
	EventTypeV2ContactEmployeeTypeEnumCreatedV3       EventType = "contact.employee_type_enum.created_v3"
	EventTypeV2ContactEmployeeTypeEnumActivedV3       EventType = "contact.employee_type_enum.actived_v3"
	EventTypeV2ContactEmployeeTypeEnumDeactivatedV3   EventType = "contact.employee_type_enum.deactivated_v3"
	EventTypeV2ContactEmployeeTypeEnumUpdatedV3       EventType = "contact.employee_type_enum.updated_v3"
	EventTypeV2ContactEmployeeTypeEnumDeletedV3       EventType = "contact.employee_type_enum.deleted_v3"
	EventTypeV2IMMessageReceiveV1                     EventType = "im.message.receive_v1"
	EventTypeV2IMMessageReadV1                        EventType = "im.message.message_read_v1"
	EventTypeV2IMChatDisbandedV1                      EventType = "im.chat.disbanded_v1"
	EventTypeV2IMChatUpdatedV1                        EventType = "im.chat.updated_v1"
	EventTypeV2IMChatMemberBotAddedV1                 EventType = "im.chat.member.bot.added_v1"
	EventTypeV2IMChatMemberBotDeletedV1               EventType = "im.chat.member.bot.deleted_v1"
	EventTypeV2IMChatMemberUserAddedV1                EventType = "im.chat.member.user.added_v1"
	EventTypeV2IMChatMemberUserWithdrawnV1            EventType = "im.chat.member.user.withdrawn_v1"
	EventTypeV2IMChatMemberUserDeletedV1              EventType = "im.chat.member.user.deleted_v1"
	EventTypeV2VCMeetingMeetingStartedV1              EventType = "vc.meeting.meeting_started_v1"
	EventTypeV2VCMeetingMeetingEndedV1                EventType = "vc.meeting.meeting_ended_v1"
	EventTypeV2VCMeetingJoinMeetingV1                 EventType = "vc.meeting.join_meeting_v1"
	EventTypeV2VCMeetingLeaveMeetingV1                EventType = "vc.meeting.leave_meeting_v1"
	EventTypeV2VCMeetingRecordingStartedV1            EventType = "vc.meeting.recording_started_v1"
	EventTypeV2VCMeetingRecordingEndedV1              EventType = "vc.meeting.recording_ended_v1"
	EventTypeV2VCMeetingRecordingReadyV1              EventType = "vc.meeting.recording_ready_v1"
	EventTypeV2VCMeetingShareStartedV1                EventType = "vc.meeting.share_started_v1"
	EventTypeV2VCMeetingShareEndedV1                  EventType = "vc.meeting.share_ended_v1"
	EventTypeV2ACSAccessRecordCreatedV1               EventType = "acs.access_record.created_v1"
	EventTypeV2ACSUserUpdatedV1                       EventType = "acs.user.updated_v1"
	EventTypeV2CalendarCalendarACLCreatedV4           EventType = "calendar.calendar.acl.created_v4"
	EventTypeV2CalendarCalendarACLDeletedV4           EventType = "calendar.calendar.acl.deleted_v4"
	EventTypeV2CalendarCalendarEventChangedV4         EventType = "calendar.calendar.event.changed_v4"
	EventTypeV2CalendarCalendarChangedV4              EventType = "calendar.calendar.changed_v4"
	EventTypeV1AddBot                                 EventType = "add_bot"
	EventTypeV1RemoveBot                              EventType = "remove_bot"
	EventTypeV1P2PChatCreate                          EventType = "p2p_chat_create"
	EventTypeV1ReceiveMessage                         EventType = "message"
	EventTypeV1AddUserToChat                          EventType = "add_user_to_chat"
	EventTypeV1RemoveUserFromChat                     EventType = "remove_user_from_chat"
	EventTypeV1RevokeAddUserFromChat                  EventType = "revoke_add_user_from_chat"
	EventTypeV1ChatDisband                            EventType = "chat_disband"
)

type eventHandler struct {
	eventCardHandler                                     eventCardHandler
	eventV2AwemeEcosystemAwemeUserBindedAccountV1Handler eventV2AwemeEcosystemAwemeUserBindedAccountV1Handler
	eventV2TaskTaskUpdatedV1Handler                      eventV2TaskTaskUpdatedV1Handler
	eventV2TaskTaskCommentUpdatedV1Handler               eventV2TaskTaskCommentUpdatedV1Handler
	eventV2HelpdeskTicketMessageCreatedV1Handler         eventV2HelpdeskTicketMessageCreatedV1Handler
	eventV2HelpdeskTicketCreatedV1Handler                eventV2HelpdeskTicketCreatedV1Handler
	eventV2HelpdeskTicketMessageUpdatedV1Handler         eventV2HelpdeskTicketMessageUpdatedV1Handler
	eventV2ContactDepartmentCreatedV3Handler             eventV2ContactDepartmentCreatedV3Handler
	eventV2ContactDepartmentDeletedV3Handler             eventV2ContactDepartmentDeletedV3Handler
	eventV2ContactDepartmentUpdatedV3Handler             eventV2ContactDepartmentUpdatedV3Handler
	eventV2ContactUserUpdatedV3Handler                   eventV2ContactUserUpdatedV3Handler
	eventV2ContactUserCreatedV3Handler                   eventV2ContactUserCreatedV3Handler
	eventV2ContactUserDeletedV3Handler                   eventV2ContactUserDeletedV3Handler
	eventV2ContactScopeUpdatedV3Handler                  eventV2ContactScopeUpdatedV3Handler
	eventV2ContactEmployeeTypeEnumCreatedV3Handler       eventV2ContactEmployeeTypeEnumCreatedV3Handler
	eventV2ContactEmployeeTypeEnumActivedV3Handler       eventV2ContactEmployeeTypeEnumActivedV3Handler
	eventV2ContactEmployeeTypeEnumDeactivatedV3Handler   eventV2ContactEmployeeTypeEnumDeactivatedV3Handler
	eventV2ContactEmployeeTypeEnumUpdatedV3Handler       eventV2ContactEmployeeTypeEnumUpdatedV3Handler
	eventV2ContactEmployeeTypeEnumDeletedV3Handler       eventV2ContactEmployeeTypeEnumDeletedV3Handler
	eventV2IMMessageReceiveV1Handler                     eventV2IMMessageReceiveV1Handler
	eventV2IMMessageReadV1Handler                        eventV2IMMessageReadV1Handler
	eventV2IMChatDisbandedV1Handler                      eventV2IMChatDisbandedV1Handler
	eventV2IMChatUpdatedV1Handler                        eventV2IMChatUpdatedV1Handler
	eventV2IMChatMemberBotAddedV1Handler                 eventV2IMChatMemberBotAddedV1Handler
	eventV2IMChatMemberBotDeletedV1Handler               eventV2IMChatMemberBotDeletedV1Handler
	eventV2IMChatMemberUserAddedV1Handler                eventV2IMChatMemberUserAddedV1Handler
	eventV2IMChatMemberUserWithdrawnV1Handler            eventV2IMChatMemberUserWithdrawnV1Handler
	eventV2IMChatMemberUserDeletedV1Handler              eventV2IMChatMemberUserDeletedV1Handler
	eventV2VCMeetingMeetingStartedV1Handler              eventV2VCMeetingMeetingStartedV1Handler
	eventV2VCMeetingMeetingEndedV1Handler                eventV2VCMeetingMeetingEndedV1Handler
	eventV2VCMeetingJoinMeetingV1Handler                 eventV2VCMeetingJoinMeetingV1Handler
	eventV2VCMeetingLeaveMeetingV1Handler                eventV2VCMeetingLeaveMeetingV1Handler
	eventV2VCMeetingRecordingStartedV1Handler            eventV2VCMeetingRecordingStartedV1Handler
	eventV2VCMeetingRecordingEndedV1Handler              eventV2VCMeetingRecordingEndedV1Handler
	eventV2VCMeetingRecordingReadyV1Handler              eventV2VCMeetingRecordingReadyV1Handler
	eventV2VCMeetingShareStartedV1Handler                eventV2VCMeetingShareStartedV1Handler
	eventV2VCMeetingShareEndedV1Handler                  eventV2VCMeetingShareEndedV1Handler
	eventV2ACSAccessRecordCreatedV1Handler               eventV2ACSAccessRecordCreatedV1Handler
	eventV2ACSUserUpdatedV1Handler                       eventV2ACSUserUpdatedV1Handler
	eventV2CalendarCalendarACLCreatedV4Handler           eventV2CalendarCalendarACLCreatedV4Handler
	eventV2CalendarCalendarACLDeletedV4Handler           eventV2CalendarCalendarACLDeletedV4Handler
	eventV2CalendarCalendarEventChangedV4Handler         eventV2CalendarCalendarEventChangedV4Handler
	eventV2CalendarCalendarChangedV4Handler              eventV2CalendarCalendarChangedV4Handler
	eventV1AddBotHandler                                 eventV1AddBotHandler
	eventV1RemoveBotHandler                              eventV1RemoveBotHandler
	eventV1P2PChatCreateHandler                          eventV1P2PChatCreateHandler
	eventV1ReceiveMessageHandler                         eventV1ReceiveMessageHandler
	eventV1AddUserToChatHandler                          eventV1AddUserToChatHandler
	eventV1RemoveUserFromChatHandler                     eventV1RemoveUserFromChatHandler
	eventV1RevokeAddUserFromChatHandler                  eventV1RevokeAddUserFromChatHandler
	eventV1ChatDisbandHandler                            eventV1ChatDisbandHandler
}

func (r *eventHandler) clone() *eventHandler {
	return &eventHandler{
		eventV2AwemeEcosystemAwemeUserBindedAccountV1Handler: r.eventV2AwemeEcosystemAwemeUserBindedAccountV1Handler,
		eventV2TaskTaskUpdatedV1Handler:                      r.eventV2TaskTaskUpdatedV1Handler,
		eventV2TaskTaskCommentUpdatedV1Handler:               r.eventV2TaskTaskCommentUpdatedV1Handler,
		eventV2HelpdeskTicketMessageCreatedV1Handler:         r.eventV2HelpdeskTicketMessageCreatedV1Handler,
		eventV2HelpdeskTicketCreatedV1Handler:                r.eventV2HelpdeskTicketCreatedV1Handler,
		eventV2HelpdeskTicketMessageUpdatedV1Handler:         r.eventV2HelpdeskTicketMessageUpdatedV1Handler,
		eventV2ContactDepartmentCreatedV3Handler:             r.eventV2ContactDepartmentCreatedV3Handler,
		eventV2ContactDepartmentDeletedV3Handler:             r.eventV2ContactDepartmentDeletedV3Handler,
		eventV2ContactDepartmentUpdatedV3Handler:             r.eventV2ContactDepartmentUpdatedV3Handler,
		eventV2ContactUserUpdatedV3Handler:                   r.eventV2ContactUserUpdatedV3Handler,
		eventV2ContactUserCreatedV3Handler:                   r.eventV2ContactUserCreatedV3Handler,
		eventV2ContactUserDeletedV3Handler:                   r.eventV2ContactUserDeletedV3Handler,
		eventV2ContactScopeUpdatedV3Handler:                  r.eventV2ContactScopeUpdatedV3Handler,
		eventV2ContactEmployeeTypeEnumCreatedV3Handler:       r.eventV2ContactEmployeeTypeEnumCreatedV3Handler,
		eventV2ContactEmployeeTypeEnumActivedV3Handler:       r.eventV2ContactEmployeeTypeEnumActivedV3Handler,
		eventV2ContactEmployeeTypeEnumDeactivatedV3Handler:   r.eventV2ContactEmployeeTypeEnumDeactivatedV3Handler,
		eventV2ContactEmployeeTypeEnumUpdatedV3Handler:       r.eventV2ContactEmployeeTypeEnumUpdatedV3Handler,
		eventV2ContactEmployeeTypeEnumDeletedV3Handler:       r.eventV2ContactEmployeeTypeEnumDeletedV3Handler,
		eventV2IMMessageReceiveV1Handler:                     r.eventV2IMMessageReceiveV1Handler,
		eventV2IMMessageReadV1Handler:                        r.eventV2IMMessageReadV1Handler,
		eventV2IMChatDisbandedV1Handler:                      r.eventV2IMChatDisbandedV1Handler,
		eventV2IMChatUpdatedV1Handler:                        r.eventV2IMChatUpdatedV1Handler,
		eventV2IMChatMemberBotAddedV1Handler:                 r.eventV2IMChatMemberBotAddedV1Handler,
		eventV2IMChatMemberBotDeletedV1Handler:               r.eventV2IMChatMemberBotDeletedV1Handler,
		eventV2IMChatMemberUserAddedV1Handler:                r.eventV2IMChatMemberUserAddedV1Handler,
		eventV2IMChatMemberUserWithdrawnV1Handler:            r.eventV2IMChatMemberUserWithdrawnV1Handler,
		eventV2IMChatMemberUserDeletedV1Handler:              r.eventV2IMChatMemberUserDeletedV1Handler,
		eventV2VCMeetingMeetingStartedV1Handler:              r.eventV2VCMeetingMeetingStartedV1Handler,
		eventV2VCMeetingMeetingEndedV1Handler:                r.eventV2VCMeetingMeetingEndedV1Handler,
		eventV2VCMeetingJoinMeetingV1Handler:                 r.eventV2VCMeetingJoinMeetingV1Handler,
		eventV2VCMeetingLeaveMeetingV1Handler:                r.eventV2VCMeetingLeaveMeetingV1Handler,
		eventV2VCMeetingRecordingStartedV1Handler:            r.eventV2VCMeetingRecordingStartedV1Handler,
		eventV2VCMeetingRecordingEndedV1Handler:              r.eventV2VCMeetingRecordingEndedV1Handler,
		eventV2VCMeetingRecordingReadyV1Handler:              r.eventV2VCMeetingRecordingReadyV1Handler,
		eventV2VCMeetingShareStartedV1Handler:                r.eventV2VCMeetingShareStartedV1Handler,
		eventV2VCMeetingShareEndedV1Handler:                  r.eventV2VCMeetingShareEndedV1Handler,
		eventV2ACSAccessRecordCreatedV1Handler:               r.eventV2ACSAccessRecordCreatedV1Handler,
		eventV2ACSUserUpdatedV1Handler:                       r.eventV2ACSUserUpdatedV1Handler,
		eventV2CalendarCalendarACLCreatedV4Handler:           r.eventV2CalendarCalendarACLCreatedV4Handler,
		eventV2CalendarCalendarACLDeletedV4Handler:           r.eventV2CalendarCalendarACLDeletedV4Handler,
		eventV2CalendarCalendarEventChangedV4Handler:         r.eventV2CalendarCalendarEventChangedV4Handler,
		eventV2CalendarCalendarChangedV4Handler:              r.eventV2CalendarCalendarChangedV4Handler,
		eventV1AddBotHandler:                                 r.eventV1AddBotHandler,
		eventV1RemoveBotHandler:                              r.eventV1RemoveBotHandler,
		eventV1P2PChatCreateHandler:                          r.eventV1P2PChatCreateHandler,
		eventV1ReceiveMessageHandler:                         r.eventV1ReceiveMessageHandler,
		eventV1AddUserToChatHandler:                          r.eventV1AddUserToChatHandler,
		eventV1RemoveUserFromChatHandler:                     r.eventV1RemoveUserFromChatHandler,
		eventV1RevokeAddUserFromChatHandler:                  r.eventV1RevokeAddUserFromChatHandler,
		eventV1ChatDisbandHandler:                            r.eventV1ChatDisbandHandler,
	}
}

type eventBody struct {
	eventV2AwemeEcosystemAwemeUserBindedAccountV1 *EventV2AwemeEcosystemAwemeUserBindedAccountV1
	eventV2TaskTaskUpdatedV1                      *EventV2TaskTaskUpdatedV1
	eventV2TaskTaskCommentUpdatedV1               *EventV2TaskTaskCommentUpdatedV1
	eventV2HelpdeskTicketMessageCreatedV1         *EventV2HelpdeskTicketMessageCreatedV1
	eventV2HelpdeskTicketCreatedV1                *EventV2HelpdeskTicketCreatedV1
	eventV2HelpdeskTicketMessageUpdatedV1         *EventV2HelpdeskTicketMessageUpdatedV1
	eventV2ContactDepartmentCreatedV3             *EventV2ContactDepartmentCreatedV3
	eventV2ContactDepartmentDeletedV3             *EventV2ContactDepartmentDeletedV3
	eventV2ContactDepartmentUpdatedV3             *EventV2ContactDepartmentUpdatedV3
	eventV2ContactUserUpdatedV3                   *EventV2ContactUserUpdatedV3
	eventV2ContactUserCreatedV3                   *EventV2ContactUserCreatedV3
	eventV2ContactUserDeletedV3                   *EventV2ContactUserDeletedV3
	eventV2ContactScopeUpdatedV3                  *EventV2ContactScopeUpdatedV3
	eventV2ContactEmployeeTypeEnumCreatedV3       *EventV2ContactEmployeeTypeEnumCreatedV3
	eventV2ContactEmployeeTypeEnumActivedV3       *EventV2ContactEmployeeTypeEnumActivedV3
	eventV2ContactEmployeeTypeEnumDeactivatedV3   *EventV2ContactEmployeeTypeEnumDeactivatedV3
	eventV2ContactEmployeeTypeEnumUpdatedV3       *EventV2ContactEmployeeTypeEnumUpdatedV3
	eventV2ContactEmployeeTypeEnumDeletedV3       *EventV2ContactEmployeeTypeEnumDeletedV3
	eventV2IMMessageReceiveV1                     *EventV2IMMessageReceiveV1
	eventV2IMMessageReadV1                        *EventV2IMMessageReadV1
	eventV2IMChatDisbandedV1                      *EventV2IMChatDisbandedV1
	eventV2IMChatUpdatedV1                        *EventV2IMChatUpdatedV1
	eventV2IMChatMemberBotAddedV1                 *EventV2IMChatMemberBotAddedV1
	eventV2IMChatMemberBotDeletedV1               *EventV2IMChatMemberBotDeletedV1
	eventV2IMChatMemberUserAddedV1                *EventV2IMChatMemberUserAddedV1
	eventV2IMChatMemberUserWithdrawnV1            *EventV2IMChatMemberUserWithdrawnV1
	eventV2IMChatMemberUserDeletedV1              *EventV2IMChatMemberUserDeletedV1
	eventV2VCMeetingMeetingStartedV1              *EventV2VCMeetingMeetingStartedV1
	eventV2VCMeetingMeetingEndedV1                *EventV2VCMeetingMeetingEndedV1
	eventV2VCMeetingJoinMeetingV1                 *EventV2VCMeetingJoinMeetingV1
	eventV2VCMeetingLeaveMeetingV1                *EventV2VCMeetingLeaveMeetingV1
	eventV2VCMeetingRecordingStartedV1            *EventV2VCMeetingRecordingStartedV1
	eventV2VCMeetingRecordingEndedV1              *EventV2VCMeetingRecordingEndedV1
	eventV2VCMeetingRecordingReadyV1              *EventV2VCMeetingRecordingReadyV1
	eventV2VCMeetingShareStartedV1                *EventV2VCMeetingShareStartedV1
	eventV2VCMeetingShareEndedV1                  *EventV2VCMeetingShareEndedV1
	eventV2ACSAccessRecordCreatedV1               *EventV2ACSAccessRecordCreatedV1
	eventV2ACSUserUpdatedV1                       *EventV2ACSUserUpdatedV1
	eventV2CalendarCalendarACLCreatedV4           *EventV2CalendarCalendarACLCreatedV4
	eventV2CalendarCalendarACLDeletedV4           *EventV2CalendarCalendarACLDeletedV4
	eventV2CalendarCalendarEventChangedV4         *EventV2CalendarCalendarEventChangedV4
	eventV2CalendarCalendarChangedV4              *EventV2CalendarCalendarChangedV4
	eventV1AddBot                                 *EventV1AddBot
	eventV1RemoveBot                              *EventV1RemoveBot
	eventV1P2PChatCreate                          *EventV1P2PChatCreate
	eventV1ReceiveMessage                         *EventV1ReceiveMessage
	eventV1AddUserToChat                          *EventV1AddUserToChat
	eventV1RemoveUserFromChat                     *EventV1RemoveUserFromChat
	eventV1RevokeAddUserFromChat                  *EventV1RevokeAddUserFromChat
	eventV1ChatDisband                            *EventV1ChatDisband
}

func (r *EventCallbackService) parserEventV2(req *eventReq) error {
	if req.Header == nil {
		return fmt.Errorf("get schema=2.0, but header is nil")
	}

	switch req.Header.EventType {
	case EventTypeV2AwemeEcosystemAwemeUserBindedAccountV1:
		event := new(EventV2AwemeEcosystemAwemeUserBindedAccountV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2AwemeEcosystemAwemeUserBindedAccountV1 = event
	case EventTypeV2TaskTaskUpdatedV1:
		event := new(EventV2TaskTaskUpdatedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2TaskTaskUpdatedV1 = event
	case EventTypeV2TaskTaskCommentUpdatedV1:
		event := new(EventV2TaskTaskCommentUpdatedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2TaskTaskCommentUpdatedV1 = event
	case EventTypeV2HelpdeskTicketMessageCreatedV1:
		event := new(EventV2HelpdeskTicketMessageCreatedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2HelpdeskTicketMessageCreatedV1 = event
	case EventTypeV2HelpdeskTicketCreatedV1:
		event := new(EventV2HelpdeskTicketCreatedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2HelpdeskTicketCreatedV1 = event
	case EventTypeV2HelpdeskTicketMessageUpdatedV1:
		event := new(EventV2HelpdeskTicketMessageUpdatedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2HelpdeskTicketMessageUpdatedV1 = event
	case EventTypeV2ContactDepartmentCreatedV3:
		event := new(EventV2ContactDepartmentCreatedV3)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ContactDepartmentCreatedV3 = event
	case EventTypeV2ContactDepartmentDeletedV3:
		event := new(EventV2ContactDepartmentDeletedV3)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ContactDepartmentDeletedV3 = event
	case EventTypeV2ContactDepartmentUpdatedV3:
		event := new(EventV2ContactDepartmentUpdatedV3)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ContactDepartmentUpdatedV3 = event
	case EventTypeV2ContactUserUpdatedV3:
		event := new(EventV2ContactUserUpdatedV3)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ContactUserUpdatedV3 = event
	case EventTypeV2ContactUserCreatedV3:
		event := new(EventV2ContactUserCreatedV3)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ContactUserCreatedV3 = event
	case EventTypeV2ContactUserDeletedV3:
		event := new(EventV2ContactUserDeletedV3)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ContactUserDeletedV3 = event
	case EventTypeV2ContactScopeUpdatedV3:
		event := new(EventV2ContactScopeUpdatedV3)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ContactScopeUpdatedV3 = event
	case EventTypeV2ContactEmployeeTypeEnumCreatedV3:
		event := new(EventV2ContactEmployeeTypeEnumCreatedV3)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ContactEmployeeTypeEnumCreatedV3 = event
	case EventTypeV2ContactEmployeeTypeEnumActivedV3:
		event := new(EventV2ContactEmployeeTypeEnumActivedV3)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ContactEmployeeTypeEnumActivedV3 = event
	case EventTypeV2ContactEmployeeTypeEnumDeactivatedV3:
		event := new(EventV2ContactEmployeeTypeEnumDeactivatedV3)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ContactEmployeeTypeEnumDeactivatedV3 = event
	case EventTypeV2ContactEmployeeTypeEnumUpdatedV3:
		event := new(EventV2ContactEmployeeTypeEnumUpdatedV3)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ContactEmployeeTypeEnumUpdatedV3 = event
	case EventTypeV2ContactEmployeeTypeEnumDeletedV3:
		event := new(EventV2ContactEmployeeTypeEnumDeletedV3)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ContactEmployeeTypeEnumDeletedV3 = event
	case EventTypeV2IMMessageReceiveV1:
		event := new(EventV2IMMessageReceiveV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2IMMessageReceiveV1 = event
	case EventTypeV2IMMessageReadV1:
		event := new(EventV2IMMessageReadV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2IMMessageReadV1 = event
	case EventTypeV2IMChatDisbandedV1:
		event := new(EventV2IMChatDisbandedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2IMChatDisbandedV1 = event
	case EventTypeV2IMChatUpdatedV1:
		event := new(EventV2IMChatUpdatedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2IMChatUpdatedV1 = event
	case EventTypeV2IMChatMemberBotAddedV1:
		event := new(EventV2IMChatMemberBotAddedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2IMChatMemberBotAddedV1 = event
	case EventTypeV2IMChatMemberBotDeletedV1:
		event := new(EventV2IMChatMemberBotDeletedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2IMChatMemberBotDeletedV1 = event
	case EventTypeV2IMChatMemberUserAddedV1:
		event := new(EventV2IMChatMemberUserAddedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2IMChatMemberUserAddedV1 = event
	case EventTypeV2IMChatMemberUserWithdrawnV1:
		event := new(EventV2IMChatMemberUserWithdrawnV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2IMChatMemberUserWithdrawnV1 = event
	case EventTypeV2IMChatMemberUserDeletedV1:
		event := new(EventV2IMChatMemberUserDeletedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2IMChatMemberUserDeletedV1 = event
	case EventTypeV2VCMeetingMeetingStartedV1:
		event := new(EventV2VCMeetingMeetingStartedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2VCMeetingMeetingStartedV1 = event
	case EventTypeV2VCMeetingMeetingEndedV1:
		event := new(EventV2VCMeetingMeetingEndedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2VCMeetingMeetingEndedV1 = event
	case EventTypeV2VCMeetingJoinMeetingV1:
		event := new(EventV2VCMeetingJoinMeetingV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2VCMeetingJoinMeetingV1 = event
	case EventTypeV2VCMeetingLeaveMeetingV1:
		event := new(EventV2VCMeetingLeaveMeetingV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2VCMeetingLeaveMeetingV1 = event
	case EventTypeV2VCMeetingRecordingStartedV1:
		event := new(EventV2VCMeetingRecordingStartedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2VCMeetingRecordingStartedV1 = event
	case EventTypeV2VCMeetingRecordingEndedV1:
		event := new(EventV2VCMeetingRecordingEndedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2VCMeetingRecordingEndedV1 = event
	case EventTypeV2VCMeetingRecordingReadyV1:
		event := new(EventV2VCMeetingRecordingReadyV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2VCMeetingRecordingReadyV1 = event
	case EventTypeV2VCMeetingShareStartedV1:
		event := new(EventV2VCMeetingShareStartedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2VCMeetingShareStartedV1 = event
	case EventTypeV2VCMeetingShareEndedV1:
		event := new(EventV2VCMeetingShareEndedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2VCMeetingShareEndedV1 = event
	case EventTypeV2ACSAccessRecordCreatedV1:
		event := new(EventV2ACSAccessRecordCreatedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ACSAccessRecordCreatedV1 = event
	case EventTypeV2ACSUserUpdatedV1:
		event := new(EventV2ACSUserUpdatedV1)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2ACSUserUpdatedV1 = event
	case EventTypeV2CalendarCalendarACLCreatedV4:
		event := new(EventV2CalendarCalendarACLCreatedV4)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2CalendarCalendarACLCreatedV4 = event
	case EventTypeV2CalendarCalendarACLDeletedV4:
		event := new(EventV2CalendarCalendarACLDeletedV4)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2CalendarCalendarACLDeletedV4 = event
	case EventTypeV2CalendarCalendarEventChangedV4:
		event := new(EventV2CalendarCalendarEventChangedV4)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2CalendarCalendarEventChangedV4 = event
	case EventTypeV2CalendarCalendarChangedV4:
		event := new(EventV2CalendarCalendarChangedV4)
		if err := req.unmarshalEvent(event); err != nil {
			return err
		}
		req.eventV2CalendarCalendarChangedV4 = event
	}

	return nil
}

// https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/bot-events
func (r *EventCallbackService) parserEventV1(req *eventReq) error {
	if req.UUID == "" {
		return fmt.Errorf("get schema=1.0, but uuid is nil")
	}

	bs, err := json.Marshal(req.Event)
	if err != nil {
		return err
	}

	v1type := new(v1type)
	if err = json.Unmarshal(bs, v1type); err != nil {
		return err
	}

	switch v1type.Type {
	case EventTypeV1AddBot:
		event := new(EventV1AddBot)
		if err := json.Unmarshal(bs, event); err != nil {
			return fmt.Errorf("lark event unmarshal event %s failed", bs)
		}
		req.eventV1AddBot = event
	case EventTypeV1RemoveBot:
		event := new(EventV1RemoveBot)
		if err := json.Unmarshal(bs, event); err != nil {
			return fmt.Errorf("lark event unmarshal event %s failed", bs)
		}
		req.eventV1RemoveBot = event
	case EventTypeV1P2PChatCreate:
		event := new(EventV1P2PChatCreate)
		if err := json.Unmarshal(bs, event); err != nil {
			return fmt.Errorf("lark event unmarshal event %s failed", bs)
		}
		req.eventV1P2PChatCreate = event
	case EventTypeV1ReceiveMessage:
		event := new(EventV1ReceiveMessage)
		if err := json.Unmarshal(bs, event); err != nil {
			return fmt.Errorf("lark event unmarshal event %s failed", bs)
		}
		req.eventV1ReceiveMessage = event
	case EventTypeV1AddUserToChat:
		event := new(EventV1AddUserToChat)
		if err := json.Unmarshal(bs, event); err != nil {
			return fmt.Errorf("lark event unmarshal event %s failed", bs)
		}
		req.eventV1AddUserToChat = event
	case EventTypeV1RemoveUserFromChat:
		event := new(EventV1RemoveUserFromChat)
		if err := json.Unmarshal(bs, event); err != nil {
			return fmt.Errorf("lark event unmarshal event %s failed", bs)
		}
		req.eventV1RemoveUserFromChat = event
	case EventTypeV1RevokeAddUserFromChat:
		event := new(EventV1RevokeAddUserFromChat)
		if err := json.Unmarshal(bs, event); err != nil {
			return fmt.Errorf("lark event unmarshal event %s failed", bs)
		}
		req.eventV1RevokeAddUserFromChat = event
	case EventTypeV1ChatDisband:
		event := new(EventV1ChatDisband)
		if err := json.Unmarshal(bs, event); err != nil {
			return fmt.Errorf("lark event unmarshal event %s failed", bs)
		}
		req.eventV1ChatDisband = event
	}

	return nil
}

type v1type struct {
	Type EventType `json:"type"`
}

func (r *EventCallbackService) handlerEvent(ctx context.Context, req *eventReq) (handled bool, s string, err error) {
	switch {
	case req.eventV2AwemeEcosystemAwemeUserBindedAccountV1 != nil:
		if r.cli.eventHandler.eventV2AwemeEcosystemAwemeUserBindedAccountV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2AwemeEcosystemAwemeUserBindedAccountV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2AwemeEcosystemAwemeUserBindedAccountV1)
		}
		return true, s, err
	case req.eventV2TaskTaskUpdatedV1 != nil:
		if r.cli.eventHandler.eventV2TaskTaskUpdatedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2TaskTaskUpdatedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2TaskTaskUpdatedV1)
		}
		return true, s, err
	case req.eventV2TaskTaskCommentUpdatedV1 != nil:
		if r.cli.eventHandler.eventV2TaskTaskCommentUpdatedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2TaskTaskCommentUpdatedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2TaskTaskCommentUpdatedV1)
		}
		return true, s, err
	case req.eventV2HelpdeskTicketMessageCreatedV1 != nil:
		if r.cli.eventHandler.eventV2HelpdeskTicketMessageCreatedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2HelpdeskTicketMessageCreatedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2HelpdeskTicketMessageCreatedV1)
		}
		return true, s, err
	case req.eventV2HelpdeskTicketCreatedV1 != nil:
		if r.cli.eventHandler.eventV2HelpdeskTicketCreatedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2HelpdeskTicketCreatedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2HelpdeskTicketCreatedV1)
		}
		return true, s, err
	case req.eventV2HelpdeskTicketMessageUpdatedV1 != nil:
		if r.cli.eventHandler.eventV2HelpdeskTicketMessageUpdatedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2HelpdeskTicketMessageUpdatedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2HelpdeskTicketMessageUpdatedV1)
		}
		return true, s, err
	case req.eventV2ContactDepartmentCreatedV3 != nil:
		if r.cli.eventHandler.eventV2ContactDepartmentCreatedV3Handler != nil {
			s, err = r.cli.eventHandler.eventV2ContactDepartmentCreatedV3Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ContactDepartmentCreatedV3)
		}
		return true, s, err
	case req.eventV2ContactDepartmentDeletedV3 != nil:
		if r.cli.eventHandler.eventV2ContactDepartmentDeletedV3Handler != nil {
			s, err = r.cli.eventHandler.eventV2ContactDepartmentDeletedV3Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ContactDepartmentDeletedV3)
		}
		return true, s, err
	case req.eventV2ContactDepartmentUpdatedV3 != nil:
		if r.cli.eventHandler.eventV2ContactDepartmentUpdatedV3Handler != nil {
			s, err = r.cli.eventHandler.eventV2ContactDepartmentUpdatedV3Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ContactDepartmentUpdatedV3)
		}
		return true, s, err
	case req.eventV2ContactUserUpdatedV3 != nil:
		if r.cli.eventHandler.eventV2ContactUserUpdatedV3Handler != nil {
			s, err = r.cli.eventHandler.eventV2ContactUserUpdatedV3Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ContactUserUpdatedV3)
		}
		return true, s, err
	case req.eventV2ContactUserCreatedV3 != nil:
		if r.cli.eventHandler.eventV2ContactUserCreatedV3Handler != nil {
			s, err = r.cli.eventHandler.eventV2ContactUserCreatedV3Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ContactUserCreatedV3)
		}
		return true, s, err
	case req.eventV2ContactUserDeletedV3 != nil:
		if r.cli.eventHandler.eventV2ContactUserDeletedV3Handler != nil {
			s, err = r.cli.eventHandler.eventV2ContactUserDeletedV3Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ContactUserDeletedV3)
		}
		return true, s, err
	case req.eventV2ContactScopeUpdatedV3 != nil:
		if r.cli.eventHandler.eventV2ContactScopeUpdatedV3Handler != nil {
			s, err = r.cli.eventHandler.eventV2ContactScopeUpdatedV3Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ContactScopeUpdatedV3)
		}
		return true, s, err
	case req.eventV2ContactEmployeeTypeEnumCreatedV3 != nil:
		if r.cli.eventHandler.eventV2ContactEmployeeTypeEnumCreatedV3Handler != nil {
			s, err = r.cli.eventHandler.eventV2ContactEmployeeTypeEnumCreatedV3Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ContactEmployeeTypeEnumCreatedV3)
		}
		return true, s, err
	case req.eventV2ContactEmployeeTypeEnumActivedV3 != nil:
		if r.cli.eventHandler.eventV2ContactEmployeeTypeEnumActivedV3Handler != nil {
			s, err = r.cli.eventHandler.eventV2ContactEmployeeTypeEnumActivedV3Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ContactEmployeeTypeEnumActivedV3)
		}
		return true, s, err
	case req.eventV2ContactEmployeeTypeEnumDeactivatedV3 != nil:
		if r.cli.eventHandler.eventV2ContactEmployeeTypeEnumDeactivatedV3Handler != nil {
			s, err = r.cli.eventHandler.eventV2ContactEmployeeTypeEnumDeactivatedV3Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ContactEmployeeTypeEnumDeactivatedV3)
		}
		return true, s, err
	case req.eventV2ContactEmployeeTypeEnumUpdatedV3 != nil:
		if r.cli.eventHandler.eventV2ContactEmployeeTypeEnumUpdatedV3Handler != nil {
			s, err = r.cli.eventHandler.eventV2ContactEmployeeTypeEnumUpdatedV3Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ContactEmployeeTypeEnumUpdatedV3)
		}
		return true, s, err
	case req.eventV2ContactEmployeeTypeEnumDeletedV3 != nil:
		if r.cli.eventHandler.eventV2ContactEmployeeTypeEnumDeletedV3Handler != nil {
			s, err = r.cli.eventHandler.eventV2ContactEmployeeTypeEnumDeletedV3Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ContactEmployeeTypeEnumDeletedV3)
		}
		return true, s, err
	case req.eventV2IMMessageReceiveV1 != nil:
		if r.cli.eventHandler.eventV2IMMessageReceiveV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2IMMessageReceiveV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2IMMessageReceiveV1)
		}
		return true, s, err
	case req.eventV2IMMessageReadV1 != nil:
		if r.cli.eventHandler.eventV2IMMessageReadV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2IMMessageReadV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2IMMessageReadV1)
		}
		return true, s, err
	case req.eventV2IMChatDisbandedV1 != nil:
		if r.cli.eventHandler.eventV2IMChatDisbandedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2IMChatDisbandedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2IMChatDisbandedV1)
		}
		return true, s, err
	case req.eventV2IMChatUpdatedV1 != nil:
		if r.cli.eventHandler.eventV2IMChatUpdatedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2IMChatUpdatedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2IMChatUpdatedV1)
		}
		return true, s, err
	case req.eventV2IMChatMemberBotAddedV1 != nil:
		if r.cli.eventHandler.eventV2IMChatMemberBotAddedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2IMChatMemberBotAddedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2IMChatMemberBotAddedV1)
		}
		return true, s, err
	case req.eventV2IMChatMemberBotDeletedV1 != nil:
		if r.cli.eventHandler.eventV2IMChatMemberBotDeletedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2IMChatMemberBotDeletedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2IMChatMemberBotDeletedV1)
		}
		return true, s, err
	case req.eventV2IMChatMemberUserAddedV1 != nil:
		if r.cli.eventHandler.eventV2IMChatMemberUserAddedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2IMChatMemberUserAddedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2IMChatMemberUserAddedV1)
		}
		return true, s, err
	case req.eventV2IMChatMemberUserWithdrawnV1 != nil:
		if r.cli.eventHandler.eventV2IMChatMemberUserWithdrawnV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2IMChatMemberUserWithdrawnV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2IMChatMemberUserWithdrawnV1)
		}
		return true, s, err
	case req.eventV2IMChatMemberUserDeletedV1 != nil:
		if r.cli.eventHandler.eventV2IMChatMemberUserDeletedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2IMChatMemberUserDeletedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2IMChatMemberUserDeletedV1)
		}
		return true, s, err
	case req.eventV2VCMeetingMeetingStartedV1 != nil:
		if r.cli.eventHandler.eventV2VCMeetingMeetingStartedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2VCMeetingMeetingStartedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2VCMeetingMeetingStartedV1)
		}
		return true, s, err
	case req.eventV2VCMeetingMeetingEndedV1 != nil:
		if r.cli.eventHandler.eventV2VCMeetingMeetingEndedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2VCMeetingMeetingEndedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2VCMeetingMeetingEndedV1)
		}
		return true, s, err
	case req.eventV2VCMeetingJoinMeetingV1 != nil:
		if r.cli.eventHandler.eventV2VCMeetingJoinMeetingV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2VCMeetingJoinMeetingV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2VCMeetingJoinMeetingV1)
		}
		return true, s, err
	case req.eventV2VCMeetingLeaveMeetingV1 != nil:
		if r.cli.eventHandler.eventV2VCMeetingLeaveMeetingV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2VCMeetingLeaveMeetingV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2VCMeetingLeaveMeetingV1)
		}
		return true, s, err
	case req.eventV2VCMeetingRecordingStartedV1 != nil:
		if r.cli.eventHandler.eventV2VCMeetingRecordingStartedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2VCMeetingRecordingStartedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2VCMeetingRecordingStartedV1)
		}
		return true, s, err
	case req.eventV2VCMeetingRecordingEndedV1 != nil:
		if r.cli.eventHandler.eventV2VCMeetingRecordingEndedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2VCMeetingRecordingEndedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2VCMeetingRecordingEndedV1)
		}
		return true, s, err
	case req.eventV2VCMeetingRecordingReadyV1 != nil:
		if r.cli.eventHandler.eventV2VCMeetingRecordingReadyV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2VCMeetingRecordingReadyV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2VCMeetingRecordingReadyV1)
		}
		return true, s, err
	case req.eventV2VCMeetingShareStartedV1 != nil:
		if r.cli.eventHandler.eventV2VCMeetingShareStartedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2VCMeetingShareStartedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2VCMeetingShareStartedV1)
		}
		return true, s, err
	case req.eventV2VCMeetingShareEndedV1 != nil:
		if r.cli.eventHandler.eventV2VCMeetingShareEndedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2VCMeetingShareEndedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2VCMeetingShareEndedV1)
		}
		return true, s, err
	case req.eventV2ACSAccessRecordCreatedV1 != nil:
		if r.cli.eventHandler.eventV2ACSAccessRecordCreatedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2ACSAccessRecordCreatedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ACSAccessRecordCreatedV1)
		}
		return true, s, err
	case req.eventV2ACSUserUpdatedV1 != nil:
		if r.cli.eventHandler.eventV2ACSUserUpdatedV1Handler != nil {
			s, err = r.cli.eventHandler.eventV2ACSUserUpdatedV1Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2ACSUserUpdatedV1)
		}
		return true, s, err
	case req.eventV2CalendarCalendarACLCreatedV4 != nil:
		if r.cli.eventHandler.eventV2CalendarCalendarACLCreatedV4Handler != nil {
			s, err = r.cli.eventHandler.eventV2CalendarCalendarACLCreatedV4Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2CalendarCalendarACLCreatedV4)
		}
		return true, s, err
	case req.eventV2CalendarCalendarACLDeletedV4 != nil:
		if r.cli.eventHandler.eventV2CalendarCalendarACLDeletedV4Handler != nil {
			s, err = r.cli.eventHandler.eventV2CalendarCalendarACLDeletedV4Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2CalendarCalendarACLDeletedV4)
		}
		return true, s, err
	case req.eventV2CalendarCalendarEventChangedV4 != nil:
		if r.cli.eventHandler.eventV2CalendarCalendarEventChangedV4Handler != nil {
			s, err = r.cli.eventHandler.eventV2CalendarCalendarEventChangedV4Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2CalendarCalendarEventChangedV4)
		}
		return true, s, err
	case req.eventV2CalendarCalendarChangedV4 != nil:
		if r.cli.eventHandler.eventV2CalendarCalendarChangedV4Handler != nil {
			s, err = r.cli.eventHandler.eventV2CalendarCalendarChangedV4Handler(ctx, r.cli, req.Schema, req.Header, req.eventV2CalendarCalendarChangedV4)
		}
		return true, s, err
	case req.eventV1AddBot != nil:
		if r.cli.eventHandler.eventV1AddBotHandler != nil {
			s, err = r.cli.eventHandler.eventV1AddBotHandler(ctx, r.cli, req.Schema, req.headerV1(EventTypeV1AddBot), req.eventV1AddBot)
		}
		return true, s, err
	case req.eventV1RemoveBot != nil:
		if r.cli.eventHandler.eventV1RemoveBotHandler != nil {
			s, err = r.cli.eventHandler.eventV1RemoveBotHandler(ctx, r.cli, req.Schema, req.headerV1(EventTypeV1RemoveBot), req.eventV1RemoveBot)
		}
		return true, s, err
	case req.eventV1P2PChatCreate != nil:
		if r.cli.eventHandler.eventV1P2PChatCreateHandler != nil {
			s, err = r.cli.eventHandler.eventV1P2PChatCreateHandler(ctx, r.cli, req.Schema, req.headerV1(EventTypeV1P2PChatCreate), req.eventV1P2PChatCreate)
		}
		return true, s, err
	case req.eventV1ReceiveMessage != nil:
		if r.cli.eventHandler.eventV1ReceiveMessageHandler != nil {
			s, err = r.cli.eventHandler.eventV1ReceiveMessageHandler(ctx, r.cli, req.Schema, req.headerV1(EventTypeV1ReceiveMessage), req.eventV1ReceiveMessage)
		}
		return true, s, err
	case req.eventV1AddUserToChat != nil:
		if r.cli.eventHandler.eventV1AddUserToChatHandler != nil {
			s, err = r.cli.eventHandler.eventV1AddUserToChatHandler(ctx, r.cli, req.Schema, req.headerV1(EventTypeV1AddUserToChat), req.eventV1AddUserToChat)
		}
		return true, s, err
	case req.eventV1RemoveUserFromChat != nil:
		if r.cli.eventHandler.eventV1RemoveUserFromChatHandler != nil {
			s, err = r.cli.eventHandler.eventV1RemoveUserFromChatHandler(ctx, r.cli, req.Schema, req.headerV1(EventTypeV1RemoveUserFromChat), req.eventV1RemoveUserFromChat)
		}
		return true, s, err
	case req.eventV1RevokeAddUserFromChat != nil:
		if r.cli.eventHandler.eventV1RevokeAddUserFromChatHandler != nil {
			s, err = r.cli.eventHandler.eventV1RevokeAddUserFromChatHandler(ctx, r.cli, req.Schema, req.headerV1(EventTypeV1RevokeAddUserFromChat), req.eventV1RevokeAddUserFromChat)
		}
		return true, s, err
	case req.eventV1ChatDisband != nil:
		if r.cli.eventHandler.eventV1ChatDisbandHandler != nil {
			s, err = r.cli.eventHandler.eventV1ChatDisbandHandler(ctx, r.cli, req.Schema, req.headerV1(EventTypeV1ChatDisband), req.eventV1ChatDisband)
		}
		return true, s, err
	}
	return false, "", nil
}
