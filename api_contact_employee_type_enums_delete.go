// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteEmployeeTypeEnum 删除自定义人员枚举
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/delete
func (r *ContactService) DeleteEmployeeTypeEnum(ctx context.Context, request *DeleteEmployeeTypeEnumReq, options ...MethodOptionFunc) (*DeleteEmployeeTypeEnumResp, *Response, error) {
	if r.cli.mock.mockContactDeleteEmployeeTypeEnum != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteEmployeeTypeEnum mock enable")
		return r.cli.mock.mockContactDeleteEmployeeTypeEnum(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteEmployeeTypeEnum",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/employee_type_enums/:enum_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteEmployeeTypeEnumResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockContactDeleteEmployeeTypeEnum(f func(ctx context.Context, request *DeleteEmployeeTypeEnumReq, options ...MethodOptionFunc) (*DeleteEmployeeTypeEnumResp, *Response, error)) {
	r.mockContactDeleteEmployeeTypeEnum = f
}

func (r *Mock) UnMockContactDeleteEmployeeTypeEnum() {
	r.mockContactDeleteEmployeeTypeEnum = nil
}

type DeleteEmployeeTypeEnumReq struct {
	EnumID string `path:"enum_id" json:"-"` // 枚举值id, 示例值："exGeIjow7zIqWMy+ONkFxA=="
}

type deleteEmployeeTypeEnumResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *DeleteEmployeeTypeEnumResp `json:"data,omitempty"`
}

type DeleteEmployeeTypeEnumResp struct{}
