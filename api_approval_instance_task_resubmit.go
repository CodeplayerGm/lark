// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// ResubmitApprovalInstanceTask 对于单个退回到发起人的审批任务进行重新发起操作。发起后审批流程会流转到下一个审批人。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/resubmit
func (r *ApprovalService) ResubmitApprovalInstanceTask(ctx context.Context, request *ResubmitApprovalInstanceTaskReq, options ...MethodOptionFunc) (*ResubmitApprovalInstanceTaskResp, *Response, error) {
	if r.cli.mock.mockApprovalResubmitApprovalInstanceTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#ResubmitApprovalInstanceTask mock enable")
		return r.cli.mock.mockApprovalResubmitApprovalInstanceTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "ResubmitApprovalInstanceTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/tasks/resubmit",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(resubmitApprovalInstanceTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalResubmitApprovalInstanceTask mock ApprovalResubmitApprovalInstanceTask method
func (r *Mock) MockApprovalResubmitApprovalInstanceTask(f func(ctx context.Context, request *ResubmitApprovalInstanceTaskReq, options ...MethodOptionFunc) (*ResubmitApprovalInstanceTaskResp, *Response, error)) {
	r.mockApprovalResubmitApprovalInstanceTask = f
}

// UnMockApprovalResubmitApprovalInstanceTask un-mock ApprovalResubmitApprovalInstanceTask method
func (r *Mock) UnMockApprovalResubmitApprovalInstanceTask() {
	r.mockApprovalResubmitApprovalInstanceTask = nil
}

// ResubmitApprovalInstanceTaskReq ...
type ResubmitApprovalInstanceTaskReq struct {
	UserIDType   *IDType            `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值: "open_id", 可选值有: open_id: 用户的 open id, union_id: 用户的 union id, user_id: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ApprovalCode string             `json:"approval_code,omitempty"` // 审批定义 Code, 示例值: "7C468A54-8745-2245-9675-08B7C63E7A85"
	InstanceCode string             `json:"instance_code,omitempty"` // 审批实例 Code, 示例值: "81D31358-93AF-92D6-7425-01A5D67C4E71"
	UserID       string             `json:"user_id,omitempty"`       // 根据user_id_type填写操作用户id, 示例值: "f7cb567e"
	Comment      *string            `json:"comment,omitempty"`       // 意见, 示例值: "{\"text\":\"评论\", \"file_codes\":[\"ABCD1232s\", \"ABC12334d22\"]}"
	TaskID       string             `json:"task_id,omitempty"`       // 任务 ID, 审批实例详情task_list中id, 示例值: "12345"
	Form         ApprovalWidgetList `json:"form,omitempty"`          // json 数组, 控件值, 同创建审批实例接口中form字段, 示例值: "[{\"id\":\"user_name\", \"type\": \"input\", \"value\":\"test\"}]"
}

// ResubmitApprovalInstanceTaskResp ...
type ResubmitApprovalInstanceTaskResp struct {
}

// resubmitApprovalInstanceTaskResp ...
type resubmitApprovalInstanceTaskResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *ResubmitApprovalInstanceTaskResp `json:"data,omitempty"`
}
