// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// UpdateTaskComment 该接口用于更新评论内容
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/update
func (r *TaskService) UpdateTaskComment(ctx context.Context, request *UpdateTaskCommentReq, options ...MethodOptionFunc) (*UpdateTaskCommentResp, *Response, error) {
	if r.cli.mock.mockTaskUpdateTaskComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#UpdateTaskComment mock enable")
		return r.cli.mock.mockTaskUpdateTaskComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "UpdateTaskComment",
		Method:                "PUT",
		URL:                   "https://open.feishu.cn/open-apis/task/v1/tasks/:task_id/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateTaskCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskUpdateTaskComment(f func(ctx context.Context, request *UpdateTaskCommentReq, options ...MethodOptionFunc) (*UpdateTaskCommentResp, *Response, error)) {
	r.mockTaskUpdateTaskComment = f
}

func (r *Mock) UnMockTaskUpdateTaskComment() {
	r.mockTaskUpdateTaskComment = nil
}

type UpdateTaskCommentReq struct {
	TaskID    string `path:"task_id" json:"-"`    // 任务ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	CommentID string `path:"comment_id" json:"-"` // 评论 ID, 示例值："6937231762296684564"
	Content   string `json:"content,omitempty"`   // 新的评论内容, 示例值："飞流直下三千尺，疑是银河落九天"
}

type updateTaskCommentResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateTaskCommentResp `json:"data,omitempty"`
}

type UpdateTaskCommentResp struct {
	Comment *UpdateTaskCommentRespComment `json:"comment,omitempty"` // 返回修改后的任务评论详情
}

type UpdateTaskCommentRespComment struct {
	Content  string `json:"content,omitempty"`   // 评论内容
	ParentID string `json:"parent_id,omitempty"` // 评论的父ID，创建评论时若不为空则为某条评论的回复，若不为空则不是回复
	ID       string `json:"id,omitempty"`        // 评论ID，由飞书服务器发号
}
