// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetTaskFollowerList 该接口用于查询任务关注者列表，支持分页，最大值为50
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/list
func (r *TaskService) GetTaskFollowerList(ctx context.Context, request *GetTaskFollowerListReq, options ...MethodOptionFunc) (*GetTaskFollowerListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskFollowerList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTaskFollowerList mock enable")
		return r.cli.mock.mockTaskGetTaskFollowerList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskFollowerList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/followers",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getTaskFollowerListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskGetTaskFollowerList(f func(ctx context.Context, request *GetTaskFollowerListReq, options ...MethodOptionFunc) (*GetTaskFollowerListResp, *Response, error)) {
	r.mockTaskGetTaskFollowerList = f
}

func (r *Mock) UnMockTaskGetTaskFollowerList() {
	r.mockTaskGetTaskFollowerList = nil
}

type GetTaskFollowerListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`50`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："「上次返回的page_token」"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID     string  `path:"task_id" json:"-"`       // 任务 ID, 示例值："0d38e26e-190a-49e9-93a2-35067763ed1f"
}

type getTaskFollowerListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskFollowerListResp `json:"data,omitempty"`
}

type GetTaskFollowerListResp struct {
	Items     []*GetTaskFollowerListRespItem `json:"items,omitempty"`      // 返回的关注者列表
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
}

type GetTaskFollowerListRespItem struct {
	ID string `json:"id,omitempty"` // 任务关注者 ID
}
