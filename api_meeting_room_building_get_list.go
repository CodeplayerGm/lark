// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetMeetingRoomBuildingList 该接口用于获取本企业下的建筑物（办公大楼）。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugzNyUjL4cjM14CO3ITN
func (r *MeetingRoomService) GetMeetingRoomBuildingList(ctx context.Context, request *GetMeetingRoomBuildingListReq, options ...MethodOptionFunc) (*GetMeetingRoomBuildingListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomBuildingList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomBuildingList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomBuildingList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomBuildingList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomBuildingListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomBuildingList mock MeetingRoomGetMeetingRoomBuildingList method
func (r *Mock) MockMeetingRoomGetMeetingRoomBuildingList(f func(ctx context.Context, request *GetMeetingRoomBuildingListReq, options ...MethodOptionFunc) (*GetMeetingRoomBuildingListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomBuildingList = f
}

// UnMockMeetingRoomGetMeetingRoomBuildingList un-mock MeetingRoomGetMeetingRoomBuildingList method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomBuildingList() {
	r.mockMeetingRoomGetMeetingRoomBuildingList = nil
}

// GetMeetingRoomBuildingListReq ...
type GetMeetingRoomBuildingListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 请求期望返回的建筑物数量，不足则返回全部，该值默认为 10，最大为 100
	PageToken *string `query:"page_token" json:"-"` // 用于标记当前请求的分页标记，将返回以当前分页标记开始，往后 page_size 个元素
	OrderBy   *string `query:"order_by" json:"-"`   // 提供用于对名称进行升序/降序排序的方式查询，可选项有："name-asc,name-desc"，传入其他字符串不做处理，默认无序
	Fields    *string `query:"fields" json:"-"`     // 用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,floors"，默认返回所有字段
}

// getMeetingRoomBuildingListResp ...
type getMeetingRoomBuildingListResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomBuildingListResp `json:"data,omitempty"` // 返回业务信息
}

// GetMeetingRoomBuildingListResp ...
type GetMeetingRoomBuildingListResp struct {
	PageToken string                                    `json:"page_token,omitempty"` // 分页标记，存在下一页时返回
	HasMore   bool                                      `json:"has_more,omitempty"`   // 存在下一页时，该值为 true，否则为 false
	Buildings []*GetMeetingRoomBuildingListRespBuilding `json:"buildings,omitempty"`  // 建筑列表
}

// GetMeetingRoomBuildingListRespBuilding ...
type GetMeetingRoomBuildingListRespBuilding struct {
	BuildingID  string   `json:"building_id,omitempty"` // 建筑物 ID
	Description string   `json:"description,omitempty"` // 建筑物的相关描述
	Floors      []string `json:"floors,omitempty"`      // 属于当前建筑物的所有楼层列表
	Name        string   `json:"name,omitempty"`        // 建筑物名称
	CountryID   string   `json:"country_id,omitempty"`  // 所属国家 ID
	DistrictID  string   `json:"district_id,omitempty"` // 所属城市 ID
}
