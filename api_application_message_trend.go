// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetApplicationMessageTrend
//
// 查询应用在指定时间段内机器人消息趋势信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUTN0YjL1UDN24SN1QjN
func (r *ApplicationService) GetApplicationMessageTrend(ctx context.Context, request *GetApplicationMessageTrendReq, options ...MethodOptionFunc) (*GetApplicationMessageTrendResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationMessageTrend != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationMessageTrend mock enable")
		return r.cli.mock.mockApplicationGetApplicationMessageTrend(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationMessageTrend",
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/application/v1/app_message_trend",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationMessageTrendResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockApplicationGetApplicationMessageTrend(f func(ctx context.Context, request *GetApplicationMessageTrendReq, options ...MethodOptionFunc) (*GetApplicationMessageTrendResp, *Response, error)) {
	r.mockApplicationGetApplicationMessageTrend = f
}

func (r *Mock) UnMockApplicationGetApplicationMessageTrend() {
	r.mockApplicationGetApplicationMessageTrend = nil
}

type GetApplicationMessageTrendReq struct {
	AppID        string    `json:"app_id,omitempty"`        // 目标应用的 ID
	TimeStart    int64     `json:"time_start,omitempty"`    // 起始时间戳（秒），时间跨度最长支持180天
	TimeEnd      int64     `json:"time_end,omitempty"`      // 截止时间戳（秒），时间跨度最长支持180天
	TimeInterval int64     `json:"time_interval,omitempty"` // 步长（秒），最小步长为60秒，需满足(${time_end} - ${time_start}) / ${time_interval} <= 2*24*60
	ChatType     *ChatType `json:"chat_type,omitempty"`     // 聊天类型，大小写不敏感，p2p：私聊；group：群聊
	MessageType  *MsgType  `json:"message_type,omitempty"`  // 消息类型，大小写不敏感，text：文本消息；image：图片消息；card：卡片消息；post：富文本消息；share_chat：群名片
}

type getApplicationMessageTrendResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码，非0表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationMessageTrendResp `json:"data,omitempty"` // 返回的业务信息，仅code = 0时有效
}

type GetApplicationMessageTrendResp struct {
	P2pSent       *GetApplicationMessageTrendRespP2pSent       `json:"p2p_sent,omitempty"`       // 单聊发送
	P2pReceived   *GetApplicationMessageTrendRespP2pReceived   `json:"p2p_received,omitempty"`   // 单聊接收
	P2pRead       *GetApplicationMessageTrendRespP2pRead       `json:"p2p_read,omitempty"`       // 单聊已读
	GroupSent     *GetApplicationMessageTrendRespGroupSent     `json:"group_sent,omitempty"`     // 群聊发送
	GroupReceived *GetApplicationMessageTrendRespGroupReceived `json:"group_received,omitempty"` // 群聊接收
	GroupRead     *GetApplicationMessageTrendRespGroupRead     `json:"group_read,omitempty"`     // 群聊已读
}

type GetApplicationMessageTrendRespP2pSent struct {
	Timestamp *GetApplicationMessageTrendRespP2pSentTimestamp `json:"timestamp,omitempty"` // 时间戳（秒）
}

type GetApplicationMessageTrendRespP2pSentTimestamp struct {
	Pv int64 `json:"pv,omitempty"` // 消息接收用户数量
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收用户数量
}

type GetApplicationMessageTrendRespP2pReceived struct {
	Timestamp *GetApplicationMessageTrendRespP2pReceivedTimestamp `json:"timestamp,omitempty"` // 时间戳（秒）
}

type GetApplicationMessageTrendRespP2pReceivedTimestamp struct {
	Pv int64 `json:"pv,omitempty"` // 消息接收用户数量
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收用户数量
}

type GetApplicationMessageTrendRespP2pRead struct {
	Timestamp *GetApplicationMessageTrendRespP2pReadTimestamp `json:"timestamp,omitempty"` // 时间戳（秒）
}

type GetApplicationMessageTrendRespP2pReadTimestamp struct {
	Pv int64 `json:"pv,omitempty"` // 消息已读用户数量
	Uv int64 `json:"uv,omitempty"` // 去重的消息已读用户数量
}

type GetApplicationMessageTrendRespGroupSent struct {
	Timestamp *GetApplicationMessageTrendRespGroupSentTimestamp `json:"timestamp,omitempty"` // 时间戳（秒）
}

type GetApplicationMessageTrendRespGroupSentTimestamp struct {
	Pv int64 `json:"pv,omitempty"` // 消息接收群聊数量
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收群聊数量
}

type GetApplicationMessageTrendRespGroupReceived struct {
	Timestamp *GetApplicationMessageTrendRespGroupReceivedTimestamp `json:"timestamp,omitempty"` // 时间戳（秒）
}

type GetApplicationMessageTrendRespGroupReceivedTimestamp struct {
	Pv int64 `json:"pv,omitempty"` // 消息接收群聊数量
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收群聊数量
}

type GetApplicationMessageTrendRespGroupRead struct {
	Timestamp *GetApplicationMessageTrendRespGroupReadTimestamp `json:"timestamp,omitempty"` // 时间戳（秒）
}

type GetApplicationMessageTrendRespGroupReadTimestamp struct {
	Pv int64 `json:"pv,omitempty"` // 消息已读用户数量
	Uv int64 `json:"uv,omitempty"` // 去重的消息已读用户数量
}
